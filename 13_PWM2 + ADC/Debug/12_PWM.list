
12_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  4 .ARM          00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000478  08000478  00010478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010480  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY
 13 .debug_info   000005d6  00000000  00000000  000104b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000135  00000000  00000000  00010a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000001af  00000000  00000000  00010c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000009de  00000000  00000000  00010e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e372  00000000  00000000  00011805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000afb77  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000a4  00000000  00000000  000afbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000460 	.word	0x08000460

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000460 	.word	0x08000460

080001c8 <main>:

#include "stm32l476xx.h"
#include "pwm.h"


int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0


	while(1){


		pwm();
 80001cc:	f000 f878 	bl	80002c0 <pwm>
 80001d0:	e7fc      	b.n	80001cc <main+0x4>

080001d2 <initialize_GPIOE>:

#define GPIOEN				(1U<<4)																//Enable clock access to GPIO
#define FreqClock			4000000


void initialize_GPIOE(){
 80001d2:	b480      	push	{r7}
 80001d4:	af00      	add	r7, sp, #0
	//Configure PA0 as Alterative function
	GPIOA->MODER &=~	(1U<<0); //Coloca no pino 0 o valor 1 negado ou seja 0
 80001d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001e0:	f023 0301 	bic.w	r3, r3, #1
 80001e4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=		(1U<<1);
 80001e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001f0:	f043 0302 	orr.w	r3, r3, #2
 80001f4:	6013      	str	r3, [r2, #0]
	//Configure PA0 as push-pull
	GPIOA->OTYPER &=~	(1u<<0);
 80001f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000200:	f023 0301 	bic.w	r3, r3, #1
 8000204:	6053      	str	r3, [r2, #4]
	//Configure PA0 as very high speed
	GPIOA->OSPEEDR |=	(1U<<0);
 8000206:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=	(1U<<1);
 8000216:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000220:	f043 0302 	orr.w	r3, r3, #2
 8000224:	6093      	str	r3, [r2, #8]
	//Configure AF1 low register
	GPIOA->AFR[0]  |=	(1U<<0);
 8000226:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022a:	6a1b      	ldr	r3, [r3, #32]
 800022c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~	(1U<<1);
 8000236:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000240:	f023 0302 	bic.w	r3, r3, #2
 8000244:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~	(1U<<2);
 8000246:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000250:	f023 0304 	bic.w	r3, r3, #4
 8000254:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~	(1U<<3);
 8000256:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800025a:	6a1b      	ldr	r3, [r3, #32]
 800025c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000260:	f023 0308 	bic.w	r3, r3, #8
 8000264:	6213      	str	r3, [r2, #32]
	//Configure AF1 high register
	GPIOA->AFR[1]  |=	(1U<<0);
 8000266:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800026a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800026c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]  &=~	(1U<<1);
 8000276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800027a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800027c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000280:	f023 0302 	bic.w	r3, r3, #2
 8000284:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]  &=~	(1U<<2);
 8000286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800028a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800028c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000290:	f023 0304 	bic.w	r3, r3, #4
 8000294:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]  &=~	(1U<<3);
 8000296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800029c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a0:	f023 0308 	bic.w	r3, r3, #8
 80002a4:	6253      	str	r3, [r2, #36]	; 0x24
	//Force diconnect imput to the adc
	GPIOA->ASCR	   &=~	(1U<<0);
 80002a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b0:	f023 0301 	bic.w	r3, r3, #1
 80002b4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <pwm>:
void pwm(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	initialize_GPIOE();
 80002c4:	f7ff ff85 	bl	80001d2 <initialize_GPIOE>
	//Configure Clock 16Mhz
	//RCC->CFGR &=~ (1U<<10);

	//Enable APB2 Clock access to Timer 2
	RCC->APB1ENR1 |= TIM2EN;
 80002c8:	4b3c      	ldr	r3, [pc, #240]	; (80003bc <pwm+0xfc>)
 80002ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002cc:	4a3b      	ldr	r2, [pc, #236]	; (80003bc <pwm+0xfc>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6593      	str	r3, [r2, #88]	; 0x58
	//Maintain 4Mhz of clock so prescale is 1
	TIM2->PSC	=	2-1;	//TIM2->PSC	=	9999;
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d8:	2201      	movs	r2, #1
 80002da:	629a      	str	r2, [r3, #40]	; 0x28
	//Frequency determined by TIMx_ARR
	TIM2->ARR 	= 	FreqClock/50;	//4MHz/50Hz		//TIM2->ARR 	= 	7;
 80002dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e0:	4a37      	ldr	r2, [pc, #220]	; (80003c0 <pwm+0x100>)
 80002e2:	62da      	str	r2, [r3, #44]	; 0x2c

	//Timer count
	TIM2->CNT	=	0;
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e8:	2200      	movs	r2, #0
 80002ea:	625a      	str	r2, [r3, #36]	; 0x24
	//Duty cycle determined by TIMx_CCRx [4000;8000] [1ms;2ms]
	TIM2->CCR1	= 	((FreqClock/50)*5)/100; 	//4000	5% of 20ms
 80002ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80002f4:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1	= 	((FreqClock/50)*10)/100;	//80000; 10% of 20ms

	//PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1 else inactive
	TIM2->CCMR1	&=~	(1U<<4);
 80002f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000300:	f023 0310 	bic.w	r3, r3, #16
 8000304:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1	|=	(1U<<5);
 8000306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000310:	f043 0320 	orr.w	r3, r3, #32
 8000314:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1	|=	(1U<<6);
 8000316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000324:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1	&=~	(1U<<16);
 8000326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000334:	6193      	str	r3, [r2, #24]

	//DIR -> 0: Counter used as upcounter
	TIM2->CR1	&=~ (1<<4);
 8000336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000340:	f023 0310 	bic.w	r3, r3, #16
 8000344:	6013      	str	r3, [r2, #0]
	//TIMx_ARR register is not buffered
	TIM2->CR1	&=~	(1U<<7);
 8000346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000354:	6013      	str	r3, [r2, #0]

	//UG-> Update generation 1: Re-initialize the counter and generates an update of the registers
	TIM2->EGR	|= 	(1U<<0);
 8000356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6153      	str	r3, [r2, #20]

	//CC1P: Capture/Compare 1 output Polarity. 0: OC1 active high (output mode)
	TIM2->CCER	&=~	(1U<<1);
 8000366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800036a:	6a1b      	ldr	r3, [r3, #32]
 800036c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000370:	f023 0302 	bic.w	r3, r3, #2
 8000374:	6213      	str	r3, [r2, #32]
	//CC1E: Capture/Compare 1 output enable. 0: Capture mode disabled
	TIM2->CCER	|=	(1U<<0);
 8000376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037a:	6a1b      	ldr	r3, [r3, #32]
 800037c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6213      	str	r3, [r2, #32]

	//CMS[1:0]: Center-aligned mode selection. 00: Edge-aligned mode
	TIM2->CR1	&=~	(1U<<5);
 8000386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000390:	f023 0320 	bic.w	r3, r3, #32
 8000394:	6013      	str	r3, [r2, #0]
	TIM2->CR1	&=~	(1U<<6);
 8000396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003a4:	6013      	str	r3, [r2, #0]
	//Enable Timer 2
	TIM2->CR1	|=	(1U<<0);
 80003a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6013      	str	r3, [r2, #0]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000
 80003c0:	00013880 	.word	0x00013880

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	; (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	; (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 f811 	bl	8000418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff fee7 	bl	80001c8 <main>

080003fa <LoopForever>:

LoopForever:
    b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000408:	08000480 	.word	0x08000480
  ldr r2, =_sbss
 800040c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000410:	2000001c 	.word	0x2000001c

08000414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC1_2_IRQHandler>
	...

08000418 <__libc_init_array>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	4d0d      	ldr	r5, [pc, #52]	; (8000450 <__libc_init_array+0x38>)
 800041c:	4c0d      	ldr	r4, [pc, #52]	; (8000454 <__libc_init_array+0x3c>)
 800041e:	1b64      	subs	r4, r4, r5
 8000420:	10a4      	asrs	r4, r4, #2
 8000422:	2600      	movs	r6, #0
 8000424:	42a6      	cmp	r6, r4
 8000426:	d109      	bne.n	800043c <__libc_init_array+0x24>
 8000428:	4d0b      	ldr	r5, [pc, #44]	; (8000458 <__libc_init_array+0x40>)
 800042a:	4c0c      	ldr	r4, [pc, #48]	; (800045c <__libc_init_array+0x44>)
 800042c:	f000 f818 	bl	8000460 <_init>
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	2600      	movs	r6, #0
 8000436:	42a6      	cmp	r6, r4
 8000438:	d105      	bne.n	8000446 <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000440:	4798      	blx	r3
 8000442:	3601      	adds	r6, #1
 8000444:	e7ee      	b.n	8000424 <__libc_init_array+0xc>
 8000446:	f855 3b04 	ldr.w	r3, [r5], #4
 800044a:	4798      	blx	r3
 800044c:	3601      	adds	r6, #1
 800044e:	e7f2      	b.n	8000436 <__libc_init_array+0x1e>
 8000450:	08000478 	.word	0x08000478
 8000454:	08000478 	.word	0x08000478
 8000458:	08000478 	.word	0x08000478
 800045c:	0800047c 	.word	0x0800047c

08000460 <_init>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr

0800046c <_fini>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr
