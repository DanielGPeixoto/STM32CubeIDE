
uart_2TX_3_TXRX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08001608  08001608  00011608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016a0  080016a0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016a0  080016a0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016a0  080016a0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016a0  080016a0  000116a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016a4  080016a4  000116a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080016a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000058  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000010a0  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004f0  00000000  00000000  00021134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00021628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000120  00000000  00000000  00021790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e204  00000000  00000000  000218b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001982  00000000  00000000  0003fab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3c8d  00000000  00000000  00041436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e50c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c58  00000000  00000000  000e5114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080015f0 	.word	0x080015f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080015f0 	.word	0x080015f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
char cUART3ReadBuffer[20];
char cUARTBufferSaved[20];



int main(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0


	/*MAKE GENERIC VERSION OF THIS FUNCTION IN ORDER TO RECEIVE ANY USART*/
	uart2_tx_init();
 8000274:	f000 f8ce 	bl	8000414 <uart2_tx_init>
	uart3_rx_init();
 8000278:	f000 f932 	bl	80004e0 <uart3_rx_init>
	/*Replace USART2 as USARTx, and Pass it as argument to the function*/
	while(1){


		cUART3ReadBuffer[0] = uart_read_function(USART3);
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <main+0x2c>)
 800027e:	f000 f97b 	bl	8000578 <uart_read_function>
 8000282:	4603      	mov	r3, r0
 8000284:	461a      	mov	r2, r3
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <main+0x30>)
 8000288:	701a      	strb	r2, [r3, #0]

			printf(cUART2WriteBuffer);
		}

*/
		cUART2WriteBuffer[0] = cUART3ReadBuffer[0];
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <main+0x30>)
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <main+0x34>)
 8000290:	701a      	strb	r2, [r3, #0]
		printf(cUART2WriteBuffer);
 8000292:	4804      	ldr	r0, [pc, #16]	; (80002a4 <main+0x34>)
 8000294:	f000 fa1e 	bl	80006d4 <iprintf>
		cUART3ReadBuffer[0] = uart_read_function(USART3);
 8000298:	e7f0      	b.n	800027c <main+0xc>
 800029a:	bf00      	nop
 800029c:	40004800 	.word	0x40004800
 80002a0:	20000094 	.word	0x20000094
 80002a4:	20000080 	.word	0x20000080

080002a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	60f8      	str	r0, [r7, #12]
 80002b0:	60b9      	str	r1, [r7, #8]
 80002b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]
 80002b8:	e00a      	b.n	80002d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002ba:	f3af 8000 	nop.w
 80002be:	4601      	mov	r1, r0
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	1c5a      	adds	r2, r3, #1
 80002c4:	60ba      	str	r2, [r7, #8]
 80002c6:	b2ca      	uxtb	r2, r1
 80002c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	3301      	adds	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
 80002d0:	697a      	ldr	r2, [r7, #20]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	dbf0      	blt.n	80002ba <_read+0x12>
	}

return len;
 80002d8:	687b      	ldr	r3, [r7, #4]
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3718      	adds	r7, #24
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b086      	sub	sp, #24
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	60f8      	str	r0, [r7, #12]
 80002ea:	60b9      	str	r1, [r7, #8]
 80002ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	e009      	b.n	8000308 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	60ba      	str	r2, [r7, #8]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 f877 	bl	80003f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	dbf1      	blt.n	80002f4 <_write+0x12>
	}
	return len;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <_close>:

int _close(int file)
{
 800031a:	b480      	push	{r7}
 800031c:	b083      	sub	sp, #12
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
	return -1;
 8000322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000326:	4618      	mov	r0, r3
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000332:	b480      	push	{r7}
 8000334:	b083      	sub	sp, #12
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000342:	605a      	str	r2, [r3, #4]
	return 0;
 8000344:	2300      	movs	r3, #0
}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <_isatty>:

int _isatty(int file)
{
 8000352:	b480      	push	{r7}
 8000354:	b083      	sub	sp, #12
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
	return 1;
 800035a:	2301      	movs	r3, #1
}
 800035c:	4618      	mov	r0, r3
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
	return 0;
 8000374:	2300      	movs	r3, #0
}
 8000376:	4618      	mov	r0, r3
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800038c:	4a14      	ldr	r2, [pc, #80]	; (80003e0 <_sbrk+0x5c>)
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <_sbrk+0x60>)
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <_sbrk+0x64>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d102      	bne.n	80003a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <_sbrk+0x64>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <_sbrk+0x68>)
 80003a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <_sbrk+0x64>)
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4413      	add	r3, r2
 80003ae:	693a      	ldr	r2, [r7, #16]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d207      	bcs.n	80003c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003b4:	f000 f95c 	bl	8000670 <__errno>
 80003b8:	4603      	mov	r3, r0
 80003ba:	220c      	movs	r2, #12
 80003bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003c2:	e009      	b.n	80003d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <_sbrk+0x64>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003ca:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <_sbrk+0x64>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4413      	add	r3, r2
 80003d2:	4a05      	ldr	r2, [pc, #20]	; (80003e8 <_sbrk+0x64>)
 80003d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003d6:	68fb      	ldr	r3, [r7, #12]
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3718      	adds	r7, #24
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20018000 	.word	0x20018000
 80003e4:	00000400 	.word	0x00000400
 80003e8:	200000a8 	.word	0x200000a8
 80003ec:	200000c0 	.word	0x200000c0

080003f0 <__io_putchar>:


/*Tenho de passar por argumento, a USART a Utilizar!!*/

int __io_putchar(int ch)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	uart_write_function(USART2, ch);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4619      	mov	r1, r3
 80003fe:	4804      	ldr	r0, [pc, #16]	; (8000410 <__io_putchar+0x20>)
 8000400:	f000 f8cf 	bl	80005a2 <uart_write_function>
	return ch;
 8000404:	687b      	ldr	r3, [r7, #4]
	}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40004400 	.word	0x40004400

08000414 <uart2_tx_init>:

/*MAKE GENERIC VERSION OF THIS FUNCTION IN ORDER TO RECEIVE ANY USART*/

/*Replace USART2 as USARTx, and Pass it as argument to the function*/
void uart2_tx_init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	/***********************Configure UART pin***************************/
	/*	Enable clock access to GPIOA for PA2 as TX line					*/
	RCC->AHB2ENR|= GPIOAEN;
 8000418:	4b2e      	ldr	r3, [pc, #184]	; (80004d4 <uart2_tx_init+0xc0>)
 800041a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041c:	4a2d      	ldr	r2, [pc, #180]	; (80004d4 <uart2_tx_init+0xc0>)
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	64d3      	str	r3, [r2, #76]	; 0x4c
	/*	Set PA2 Mode as alternate function mode							*/
	GPIOA->MODER &=~ (1U<<4);
 8000424:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800042e:	f023 0310 	bic.w	r3, r3, #16
 8000432:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000434:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6013      	str	r3, [r2, #0]

	/*	Set the alternate function typed to UART						*/
	GPIOA->AFR[0] |=(1U<<8);
 8000444:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000448:	6a1b      	ldr	r3, [r3, #32]
 800044a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800044e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000452:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000454:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000458:	6a1b      	ldr	r3, [r3, #32]
 800045a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800045e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000462:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000464:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000468:	6a1b      	ldr	r3, [r3, #32]
 800046a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800046e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000472:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000474:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000478:	6a1b      	ldr	r3, [r3, #32]
 800047a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800047e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000482:	6213      	str	r3, [r2, #32]

	/*Set PIN Pull-Down */
	GPIOA->PUPDR &=~ (1U<<4);
 8000484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800048e:	f023 0310 	bic.w	r3, r3, #16
 8000492:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<5);
 8000494:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	60d3      	str	r3, [r2, #12]
	/********************************************************************/

	/********************Configure the UART module***********************/
	/*	Enable clock access to UART2									*/
	RCC->APB1ENR1	|= USART2EN;
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <uart2_tx_init+0xc0>)
 80004a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a8:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <uart2_tx_init+0xc0>)
 80004aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ae:	6593      	str	r3, [r2, #88]	; 0x58
	/*	Configure baudrate												*/
	uart_set_baudrate(USART2, APB1_CLK, 115200);
 80004b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004b4:	4908      	ldr	r1, [pc, #32]	; (80004d8 <uart2_tx_init+0xc4>)
 80004b6:	4809      	ldr	r0, [pc, #36]	; (80004dc <uart2_tx_init+0xc8>)
 80004b8:	f000 f88a 	bl	80005d0 <uart_set_baudrate>
	/*	Configure transfer direction									*/
	USART2->CR1 = CR1_TE;												//Important to use '=' instead of '|=' operator, in order to clean everything
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <uart2_tx_init+0xc8>)
 80004be:	2208      	movs	r2, #8
 80004c0:	601a      	str	r2, [r3, #0]
																		//and set the othes configs of to it's default values
	/*	Enable UART module												*/
	USART2->CR1	|= CR1_UE;												//Enables the UART module
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <uart2_tx_init+0xc8>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a05      	ldr	r2, [pc, #20]	; (80004dc <uart2_tx_init+0xc8>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6013      	str	r3, [r2, #0]
	/********************************************************************/


}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	003d0900 	.word	0x003d0900
 80004dc:	40004400 	.word	0x40004400

080004e0 <uart3_rx_init>:
	/********************************************************************/

}

void uart3_rx_init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	/***********************Configure UART pin***************************/
	/*	Enable clock access to GPIOA for PC5 as RX line					*/
	RCC->AHB2ENR|= GPIOCEN;
 80004e4:	4b20      	ldr	r3, [pc, #128]	; (8000568 <uart3_rx_init+0x88>)
 80004e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e8:	4a1f      	ldr	r2, [pc, #124]	; (8000568 <uart3_rx_init+0x88>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	64d3      	str	r3, [r2, #76]	; 0x4c
	/*	Set PC5 Mode as alternate function mode							*/
	GPIOC->MODER &=~ (1U<<10);											//Sets 10th bit to zero
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <uart3_rx_init+0x8c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a1d      	ldr	r2, [pc, #116]	; (800056c <uart3_rx_init+0x8c>)
 80004f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004fa:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1U<<11);											//Sets 11th bit to 1
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <uart3_rx_init+0x8c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a1a      	ldr	r2, [pc, #104]	; (800056c <uart3_rx_init+0x8c>)
 8000502:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000506:	6013      	str	r3, [r2, #0]

	/*	Set the alternate function of PC5 to UART	AF7					*/
	GPIOC->AFR[0] |=(1U<<20);
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <uart3_rx_init+0x8c>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4a17      	ldr	r2, [pc, #92]	; (800056c <uart3_rx_init+0x8c>)
 800050e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000512:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |=(1U<<21);
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <uart3_rx_init+0x8c>)
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	4a14      	ldr	r2, [pc, #80]	; (800056c <uart3_rx_init+0x8c>)
 800051a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800051e:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |=(1U<<22);
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <uart3_rx_init+0x8c>)
 8000522:	6a1b      	ldr	r3, [r3, #32]
 8000524:	4a11      	ldr	r2, [pc, #68]	; (800056c <uart3_rx_init+0x8c>)
 8000526:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800052a:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] &=~(1U<<23);
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <uart3_rx_init+0x8c>)
 800052e:	6a1b      	ldr	r3, [r3, #32]
 8000530:	4a0e      	ldr	r2, [pc, #56]	; (800056c <uart3_rx_init+0x8c>)
 8000532:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000536:	6213      	str	r3, [r2, #32]
	//GPIOC->PUPDR |= (1U<<11);
	/********************************************************************/

	/********************Configure the UART module***********************/
	/*	Enable clock access to UART3									*/
	RCC->APB1ENR1	|= USART3EN;
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <uart3_rx_init+0x88>)
 800053a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <uart3_rx_init+0x88>)
 800053e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000542:	6593      	str	r3, [r2, #88]	; 0x58
	/*	Configure baudrate												*/
	uart_set_baudrate(USART3, APB1_CLK, 115200);
 8000544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000548:	4909      	ldr	r1, [pc, #36]	; (8000570 <uart3_rx_init+0x90>)
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <uart3_rx_init+0x94>)
 800054c:	f000 f840 	bl	80005d0 <uart_set_baudrate>
	/*	Configure transfer direction									*/
	USART3->CR1 = CR1_RE;												//Enables as Receiver. '=', all others bits in register set to default
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <uart3_rx_init+0x94>)
 8000552:	2204      	movs	r2, #4
 8000554:	601a      	str	r2, [r3, #0]
																		//
	/*	Enable UART module												*/
	USART3->CR1	|= CR1_UE;												//Enables the UART module
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <uart3_rx_init+0x94>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a06      	ldr	r2, [pc, #24]	; (8000574 <uart3_rx_init+0x94>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6013      	str	r3, [r2, #0]
	/********************************************************************/

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	48000800 	.word	0x48000800
 8000570:	003d0900 	.word	0x003d0900
 8000574:	40004800 	.word	0x40004800

08000578 <uart_read_function>:

char uart_read_function(USART_TypeDef *USARTx)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	/*Reading a register - Perform a 'and' operation against the register and the bit we want to read*/
	while(!(USARTx->ISR & ISR_RXNE))																//Wait for transmit data register to be empty
 8000580:	bf00      	nop
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 0320 	and.w	r3, r3, #32
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0f9      	beq.n	8000582 <uart_read_function+0xa>
	{
		//waits for register to be empty
	}
	/*TDR - Transmitter Data Register it's equal to the character we want to send*/
	return USARTx->RDR;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000592:	b29b      	uxth	r3, r3
 8000594:	b2db      	uxtb	r3, r3
	}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <uart_write_function>:

void uart_write_function(USART_TypeDef *USARTx,uint8_t ch)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	70fb      	strb	r3, [r7, #3]
	/*Reading a register - Perform a 'and' operation against the register and the bit we want to read*/
	while(!(USARTx->ISR & ISR_TXE))																//Wait for transmit data register to be empty
 80005ae:	bf00      	nop
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f9      	beq.n	80005b0 <uart_write_function+0xe>
	{

	}
	/*TDR - Transmitter Data Register it's equal to the character we want to send*/
	USARTx->TDR = (ch & 0xFF);											// & 0xFF makes sure that 8 bits are transmitted
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	851a      	strh	r2, [r3, #40]	; 0x28
	}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PreiphClk, uint32_t BaudRate)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PreiphClk, BaudRate);
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	68b8      	ldr	r0, [r7, #8]
 80005e0:	f000 f808 	bl	80005f4 <compute_uart_div>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	60da      	str	r2, [r3, #12]
	}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PreiphClk, uint32_t BaudRate)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	return ((PreiphClk + (BaudRate/2))/BaudRate);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	085a      	lsrs	r2, r3, #1
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	441a      	add	r2, r3
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	fbb2 f3f3 	udiv	r3, r2, r3
 800060c:	b29b      	uxth	r3, r3
	}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000620:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0a      	ldr	r4, [pc, #40]	; (8000668 <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064a:	f000 f817 	bl	800067c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064e:	f7ff fe0f 	bl	8000270 <main>

08000652 <LoopForever>:

LoopForever:
    b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   r0, =_estack
 8000654:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000660:	080016a8 	.word	0x080016a8
  ldr r2, =_sbss
 8000664:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000668:	200000bc 	.word	0x200000bc

0800066c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC1_2_IRQHandler>
	...

08000670 <__errno>:
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <__errno+0x8>)
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000000 	.word	0x20000000

0800067c <__libc_init_array>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	4d0d      	ldr	r5, [pc, #52]	; (80006b4 <__libc_init_array+0x38>)
 8000680:	4c0d      	ldr	r4, [pc, #52]	; (80006b8 <__libc_init_array+0x3c>)
 8000682:	1b64      	subs	r4, r4, r5
 8000684:	10a4      	asrs	r4, r4, #2
 8000686:	2600      	movs	r6, #0
 8000688:	42a6      	cmp	r6, r4
 800068a:	d109      	bne.n	80006a0 <__libc_init_array+0x24>
 800068c:	4d0b      	ldr	r5, [pc, #44]	; (80006bc <__libc_init_array+0x40>)
 800068e:	4c0c      	ldr	r4, [pc, #48]	; (80006c0 <__libc_init_array+0x44>)
 8000690:	f000 ffae 	bl	80015f0 <_init>
 8000694:	1b64      	subs	r4, r4, r5
 8000696:	10a4      	asrs	r4, r4, #2
 8000698:	2600      	movs	r6, #0
 800069a:	42a6      	cmp	r6, r4
 800069c:	d105      	bne.n	80006aa <__libc_init_array+0x2e>
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a4:	4798      	blx	r3
 80006a6:	3601      	adds	r6, #1
 80006a8:	e7ee      	b.n	8000688 <__libc_init_array+0xc>
 80006aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ae:	4798      	blx	r3
 80006b0:	3601      	adds	r6, #1
 80006b2:	e7f2      	b.n	800069a <__libc_init_array+0x1e>
 80006b4:	080016a0 	.word	0x080016a0
 80006b8:	080016a0 	.word	0x080016a0
 80006bc:	080016a0 	.word	0x080016a0
 80006c0:	080016a4 	.word	0x080016a4

080006c4 <memset>:
 80006c4:	4402      	add	r2, r0
 80006c6:	4603      	mov	r3, r0
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d100      	bne.n	80006ce <memset+0xa>
 80006cc:	4770      	bx	lr
 80006ce:	f803 1b01 	strb.w	r1, [r3], #1
 80006d2:	e7f9      	b.n	80006c8 <memset+0x4>

080006d4 <iprintf>:
 80006d4:	b40f      	push	{r0, r1, r2, r3}
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <iprintf+0x2c>)
 80006d8:	b513      	push	{r0, r1, r4, lr}
 80006da:	681c      	ldr	r4, [r3, #0]
 80006dc:	b124      	cbz	r4, 80006e8 <iprintf+0x14>
 80006de:	69a3      	ldr	r3, [r4, #24]
 80006e0:	b913      	cbnz	r3, 80006e8 <iprintf+0x14>
 80006e2:	4620      	mov	r0, r4
 80006e4:	f000 f866 	bl	80007b4 <__sinit>
 80006e8:	ab05      	add	r3, sp, #20
 80006ea:	9a04      	ldr	r2, [sp, #16]
 80006ec:	68a1      	ldr	r1, [r4, #8]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4620      	mov	r0, r4
 80006f2:	f000 f9bd 	bl	8000a70 <_vfiprintf_r>
 80006f6:	b002      	add	sp, #8
 80006f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006fc:	b004      	add	sp, #16
 80006fe:	4770      	bx	lr
 8000700:	20000000 	.word	0x20000000

08000704 <std>:
 8000704:	2300      	movs	r3, #0
 8000706:	b510      	push	{r4, lr}
 8000708:	4604      	mov	r4, r0
 800070a:	e9c0 3300 	strd	r3, r3, [r0]
 800070e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000712:	6083      	str	r3, [r0, #8]
 8000714:	8181      	strh	r1, [r0, #12]
 8000716:	6643      	str	r3, [r0, #100]	; 0x64
 8000718:	81c2      	strh	r2, [r0, #14]
 800071a:	6183      	str	r3, [r0, #24]
 800071c:	4619      	mov	r1, r3
 800071e:	2208      	movs	r2, #8
 8000720:	305c      	adds	r0, #92	; 0x5c
 8000722:	f7ff ffcf 	bl	80006c4 <memset>
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <std+0x38>)
 8000728:	6263      	str	r3, [r4, #36]	; 0x24
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <std+0x3c>)
 800072c:	62a3      	str	r3, [r4, #40]	; 0x28
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <std+0x40>)
 8000730:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <std+0x44>)
 8000734:	6224      	str	r4, [r4, #32]
 8000736:	6323      	str	r3, [r4, #48]	; 0x30
 8000738:	bd10      	pop	{r4, pc}
 800073a:	bf00      	nop
 800073c:	08001019 	.word	0x08001019
 8000740:	0800103b 	.word	0x0800103b
 8000744:	08001073 	.word	0x08001073
 8000748:	08001097 	.word	0x08001097

0800074c <_cleanup_r>:
 800074c:	4901      	ldr	r1, [pc, #4]	; (8000754 <_cleanup_r+0x8>)
 800074e:	f000 b8af 	b.w	80008b0 <_fwalk_reent>
 8000752:	bf00      	nop
 8000754:	08001371 	.word	0x08001371

08000758 <__sfmoreglue>:
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	2268      	movs	r2, #104	; 0x68
 800075c:	1e4d      	subs	r5, r1, #1
 800075e:	4355      	muls	r5, r2
 8000760:	460e      	mov	r6, r1
 8000762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000766:	f000 f8e5 	bl	8000934 <_malloc_r>
 800076a:	4604      	mov	r4, r0
 800076c:	b140      	cbz	r0, 8000780 <__sfmoreglue+0x28>
 800076e:	2100      	movs	r1, #0
 8000770:	e9c0 1600 	strd	r1, r6, [r0]
 8000774:	300c      	adds	r0, #12
 8000776:	60a0      	str	r0, [r4, #8]
 8000778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800077c:	f7ff ffa2 	bl	80006c4 <memset>
 8000780:	4620      	mov	r0, r4
 8000782:	bd70      	pop	{r4, r5, r6, pc}

08000784 <__sfp_lock_acquire>:
 8000784:	4801      	ldr	r0, [pc, #4]	; (800078c <__sfp_lock_acquire+0x8>)
 8000786:	f000 b8b3 	b.w	80008f0 <__retarget_lock_acquire_recursive>
 800078a:	bf00      	nop
 800078c:	200000ad 	.word	0x200000ad

08000790 <__sfp_lock_release>:
 8000790:	4801      	ldr	r0, [pc, #4]	; (8000798 <__sfp_lock_release+0x8>)
 8000792:	f000 b8ae 	b.w	80008f2 <__retarget_lock_release_recursive>
 8000796:	bf00      	nop
 8000798:	200000ad 	.word	0x200000ad

0800079c <__sinit_lock_acquire>:
 800079c:	4801      	ldr	r0, [pc, #4]	; (80007a4 <__sinit_lock_acquire+0x8>)
 800079e:	f000 b8a7 	b.w	80008f0 <__retarget_lock_acquire_recursive>
 80007a2:	bf00      	nop
 80007a4:	200000ae 	.word	0x200000ae

080007a8 <__sinit_lock_release>:
 80007a8:	4801      	ldr	r0, [pc, #4]	; (80007b0 <__sinit_lock_release+0x8>)
 80007aa:	f000 b8a2 	b.w	80008f2 <__retarget_lock_release_recursive>
 80007ae:	bf00      	nop
 80007b0:	200000ae 	.word	0x200000ae

080007b4 <__sinit>:
 80007b4:	b510      	push	{r4, lr}
 80007b6:	4604      	mov	r4, r0
 80007b8:	f7ff fff0 	bl	800079c <__sinit_lock_acquire>
 80007bc:	69a3      	ldr	r3, [r4, #24]
 80007be:	b11b      	cbz	r3, 80007c8 <__sinit+0x14>
 80007c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c4:	f7ff bff0 	b.w	80007a8 <__sinit_lock_release>
 80007c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80007cc:	6523      	str	r3, [r4, #80]	; 0x50
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <__sinit+0x68>)
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <__sinit+0x6c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80007d6:	42a3      	cmp	r3, r4
 80007d8:	bf04      	itt	eq
 80007da:	2301      	moveq	r3, #1
 80007dc:	61a3      	streq	r3, [r4, #24]
 80007de:	4620      	mov	r0, r4
 80007e0:	f000 f820 	bl	8000824 <__sfp>
 80007e4:	6060      	str	r0, [r4, #4]
 80007e6:	4620      	mov	r0, r4
 80007e8:	f000 f81c 	bl	8000824 <__sfp>
 80007ec:	60a0      	str	r0, [r4, #8]
 80007ee:	4620      	mov	r0, r4
 80007f0:	f000 f818 	bl	8000824 <__sfp>
 80007f4:	2200      	movs	r2, #0
 80007f6:	60e0      	str	r0, [r4, #12]
 80007f8:	2104      	movs	r1, #4
 80007fa:	6860      	ldr	r0, [r4, #4]
 80007fc:	f7ff ff82 	bl	8000704 <std>
 8000800:	68a0      	ldr	r0, [r4, #8]
 8000802:	2201      	movs	r2, #1
 8000804:	2109      	movs	r1, #9
 8000806:	f7ff ff7d 	bl	8000704 <std>
 800080a:	68e0      	ldr	r0, [r4, #12]
 800080c:	2202      	movs	r2, #2
 800080e:	2112      	movs	r1, #18
 8000810:	f7ff ff78 	bl	8000704 <std>
 8000814:	2301      	movs	r3, #1
 8000816:	61a3      	str	r3, [r4, #24]
 8000818:	e7d2      	b.n	80007c0 <__sinit+0xc>
 800081a:	bf00      	nop
 800081c:	08001608 	.word	0x08001608
 8000820:	0800074d 	.word	0x0800074d

08000824 <__sfp>:
 8000824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000826:	4607      	mov	r7, r0
 8000828:	f7ff ffac 	bl	8000784 <__sfp_lock_acquire>
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <__sfp+0x84>)
 800082e:	681e      	ldr	r6, [r3, #0]
 8000830:	69b3      	ldr	r3, [r6, #24]
 8000832:	b913      	cbnz	r3, 800083a <__sfp+0x16>
 8000834:	4630      	mov	r0, r6
 8000836:	f7ff ffbd 	bl	80007b4 <__sinit>
 800083a:	3648      	adds	r6, #72	; 0x48
 800083c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000840:	3b01      	subs	r3, #1
 8000842:	d503      	bpl.n	800084c <__sfp+0x28>
 8000844:	6833      	ldr	r3, [r6, #0]
 8000846:	b30b      	cbz	r3, 800088c <__sfp+0x68>
 8000848:	6836      	ldr	r6, [r6, #0]
 800084a:	e7f7      	b.n	800083c <__sfp+0x18>
 800084c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000850:	b9d5      	cbnz	r5, 8000888 <__sfp+0x64>
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <__sfp+0x88>)
 8000854:	60e3      	str	r3, [r4, #12]
 8000856:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800085a:	6665      	str	r5, [r4, #100]	; 0x64
 800085c:	f000 f847 	bl	80008ee <__retarget_lock_init_recursive>
 8000860:	f7ff ff96 	bl	8000790 <__sfp_lock_release>
 8000864:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000868:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800086c:	6025      	str	r5, [r4, #0]
 800086e:	61a5      	str	r5, [r4, #24]
 8000870:	2208      	movs	r2, #8
 8000872:	4629      	mov	r1, r5
 8000874:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000878:	f7ff ff24 	bl	80006c4 <memset>
 800087c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000880:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000884:	4620      	mov	r0, r4
 8000886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000888:	3468      	adds	r4, #104	; 0x68
 800088a:	e7d9      	b.n	8000840 <__sfp+0x1c>
 800088c:	2104      	movs	r1, #4
 800088e:	4638      	mov	r0, r7
 8000890:	f7ff ff62 	bl	8000758 <__sfmoreglue>
 8000894:	4604      	mov	r4, r0
 8000896:	6030      	str	r0, [r6, #0]
 8000898:	2800      	cmp	r0, #0
 800089a:	d1d5      	bne.n	8000848 <__sfp+0x24>
 800089c:	f7ff ff78 	bl	8000790 <__sfp_lock_release>
 80008a0:	230c      	movs	r3, #12
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	e7ee      	b.n	8000884 <__sfp+0x60>
 80008a6:	bf00      	nop
 80008a8:	08001608 	.word	0x08001608
 80008ac:	ffff0001 	.word	0xffff0001

080008b0 <_fwalk_reent>:
 80008b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008b4:	4606      	mov	r6, r0
 80008b6:	4688      	mov	r8, r1
 80008b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80008bc:	2700      	movs	r7, #0
 80008be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008c2:	f1b9 0901 	subs.w	r9, r9, #1
 80008c6:	d505      	bpl.n	80008d4 <_fwalk_reent+0x24>
 80008c8:	6824      	ldr	r4, [r4, #0]
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	d1f7      	bne.n	80008be <_fwalk_reent+0xe>
 80008ce:	4638      	mov	r0, r7
 80008d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008d4:	89ab      	ldrh	r3, [r5, #12]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d907      	bls.n	80008ea <_fwalk_reent+0x3a>
 80008da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008de:	3301      	adds	r3, #1
 80008e0:	d003      	beq.n	80008ea <_fwalk_reent+0x3a>
 80008e2:	4629      	mov	r1, r5
 80008e4:	4630      	mov	r0, r6
 80008e6:	47c0      	blx	r8
 80008e8:	4307      	orrs	r7, r0
 80008ea:	3568      	adds	r5, #104	; 0x68
 80008ec:	e7e9      	b.n	80008c2 <_fwalk_reent+0x12>

080008ee <__retarget_lock_init_recursive>:
 80008ee:	4770      	bx	lr

080008f0 <__retarget_lock_acquire_recursive>:
 80008f0:	4770      	bx	lr

080008f2 <__retarget_lock_release_recursive>:
 80008f2:	4770      	bx	lr

080008f4 <sbrk_aligned>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	4e0e      	ldr	r6, [pc, #56]	; (8000930 <sbrk_aligned+0x3c>)
 80008f8:	460c      	mov	r4, r1
 80008fa:	6831      	ldr	r1, [r6, #0]
 80008fc:	4605      	mov	r5, r0
 80008fe:	b911      	cbnz	r1, 8000906 <sbrk_aligned+0x12>
 8000900:	f000 fb7a 	bl	8000ff8 <_sbrk_r>
 8000904:	6030      	str	r0, [r6, #0]
 8000906:	4621      	mov	r1, r4
 8000908:	4628      	mov	r0, r5
 800090a:	f000 fb75 	bl	8000ff8 <_sbrk_r>
 800090e:	1c43      	adds	r3, r0, #1
 8000910:	d00a      	beq.n	8000928 <sbrk_aligned+0x34>
 8000912:	1cc4      	adds	r4, r0, #3
 8000914:	f024 0403 	bic.w	r4, r4, #3
 8000918:	42a0      	cmp	r0, r4
 800091a:	d007      	beq.n	800092c <sbrk_aligned+0x38>
 800091c:	1a21      	subs	r1, r4, r0
 800091e:	4628      	mov	r0, r5
 8000920:	f000 fb6a 	bl	8000ff8 <_sbrk_r>
 8000924:	3001      	adds	r0, #1
 8000926:	d101      	bne.n	800092c <sbrk_aligned+0x38>
 8000928:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800092c:	4620      	mov	r0, r4
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	200000b4 	.word	0x200000b4

08000934 <_malloc_r>:
 8000934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000938:	1ccd      	adds	r5, r1, #3
 800093a:	f025 0503 	bic.w	r5, r5, #3
 800093e:	3508      	adds	r5, #8
 8000940:	2d0c      	cmp	r5, #12
 8000942:	bf38      	it	cc
 8000944:	250c      	movcc	r5, #12
 8000946:	2d00      	cmp	r5, #0
 8000948:	4607      	mov	r7, r0
 800094a:	db01      	blt.n	8000950 <_malloc_r+0x1c>
 800094c:	42a9      	cmp	r1, r5
 800094e:	d905      	bls.n	800095c <_malloc_r+0x28>
 8000950:	230c      	movs	r3, #12
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	2600      	movs	r6, #0
 8000956:	4630      	mov	r0, r6
 8000958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800095c:	4e2e      	ldr	r6, [pc, #184]	; (8000a18 <_malloc_r+0xe4>)
 800095e:	f000 fdbb 	bl	80014d8 <__malloc_lock>
 8000962:	6833      	ldr	r3, [r6, #0]
 8000964:	461c      	mov	r4, r3
 8000966:	bb34      	cbnz	r4, 80009b6 <_malloc_r+0x82>
 8000968:	4629      	mov	r1, r5
 800096a:	4638      	mov	r0, r7
 800096c:	f7ff ffc2 	bl	80008f4 <sbrk_aligned>
 8000970:	1c43      	adds	r3, r0, #1
 8000972:	4604      	mov	r4, r0
 8000974:	d14d      	bne.n	8000a12 <_malloc_r+0xde>
 8000976:	6834      	ldr	r4, [r6, #0]
 8000978:	4626      	mov	r6, r4
 800097a:	2e00      	cmp	r6, #0
 800097c:	d140      	bne.n	8000a00 <_malloc_r+0xcc>
 800097e:	6823      	ldr	r3, [r4, #0]
 8000980:	4631      	mov	r1, r6
 8000982:	4638      	mov	r0, r7
 8000984:	eb04 0803 	add.w	r8, r4, r3
 8000988:	f000 fb36 	bl	8000ff8 <_sbrk_r>
 800098c:	4580      	cmp	r8, r0
 800098e:	d13a      	bne.n	8000a06 <_malloc_r+0xd2>
 8000990:	6821      	ldr	r1, [r4, #0]
 8000992:	3503      	adds	r5, #3
 8000994:	1a6d      	subs	r5, r5, r1
 8000996:	f025 0503 	bic.w	r5, r5, #3
 800099a:	3508      	adds	r5, #8
 800099c:	2d0c      	cmp	r5, #12
 800099e:	bf38      	it	cc
 80009a0:	250c      	movcc	r5, #12
 80009a2:	4629      	mov	r1, r5
 80009a4:	4638      	mov	r0, r7
 80009a6:	f7ff ffa5 	bl	80008f4 <sbrk_aligned>
 80009aa:	3001      	adds	r0, #1
 80009ac:	d02b      	beq.n	8000a06 <_malloc_r+0xd2>
 80009ae:	6823      	ldr	r3, [r4, #0]
 80009b0:	442b      	add	r3, r5
 80009b2:	6023      	str	r3, [r4, #0]
 80009b4:	e00e      	b.n	80009d4 <_malloc_r+0xa0>
 80009b6:	6822      	ldr	r2, [r4, #0]
 80009b8:	1b52      	subs	r2, r2, r5
 80009ba:	d41e      	bmi.n	80009fa <_malloc_r+0xc6>
 80009bc:	2a0b      	cmp	r2, #11
 80009be:	d916      	bls.n	80009ee <_malloc_r+0xba>
 80009c0:	1961      	adds	r1, r4, r5
 80009c2:	42a3      	cmp	r3, r4
 80009c4:	6025      	str	r5, [r4, #0]
 80009c6:	bf18      	it	ne
 80009c8:	6059      	strne	r1, [r3, #4]
 80009ca:	6863      	ldr	r3, [r4, #4]
 80009cc:	bf08      	it	eq
 80009ce:	6031      	streq	r1, [r6, #0]
 80009d0:	5162      	str	r2, [r4, r5]
 80009d2:	604b      	str	r3, [r1, #4]
 80009d4:	4638      	mov	r0, r7
 80009d6:	f104 060b 	add.w	r6, r4, #11
 80009da:	f000 fd83 	bl	80014e4 <__malloc_unlock>
 80009de:	f026 0607 	bic.w	r6, r6, #7
 80009e2:	1d23      	adds	r3, r4, #4
 80009e4:	1af2      	subs	r2, r6, r3
 80009e6:	d0b6      	beq.n	8000956 <_malloc_r+0x22>
 80009e8:	1b9b      	subs	r3, r3, r6
 80009ea:	50a3      	str	r3, [r4, r2]
 80009ec:	e7b3      	b.n	8000956 <_malloc_r+0x22>
 80009ee:	6862      	ldr	r2, [r4, #4]
 80009f0:	42a3      	cmp	r3, r4
 80009f2:	bf0c      	ite	eq
 80009f4:	6032      	streq	r2, [r6, #0]
 80009f6:	605a      	strne	r2, [r3, #4]
 80009f8:	e7ec      	b.n	80009d4 <_malloc_r+0xa0>
 80009fa:	4623      	mov	r3, r4
 80009fc:	6864      	ldr	r4, [r4, #4]
 80009fe:	e7b2      	b.n	8000966 <_malloc_r+0x32>
 8000a00:	4634      	mov	r4, r6
 8000a02:	6876      	ldr	r6, [r6, #4]
 8000a04:	e7b9      	b.n	800097a <_malloc_r+0x46>
 8000a06:	230c      	movs	r3, #12
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4638      	mov	r0, r7
 8000a0c:	f000 fd6a 	bl	80014e4 <__malloc_unlock>
 8000a10:	e7a1      	b.n	8000956 <_malloc_r+0x22>
 8000a12:	6025      	str	r5, [r4, #0]
 8000a14:	e7de      	b.n	80009d4 <_malloc_r+0xa0>
 8000a16:	bf00      	nop
 8000a18:	200000b0 	.word	0x200000b0

08000a1c <__sfputc_r>:
 8000a1c:	6893      	ldr	r3, [r2, #8]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	b410      	push	{r4}
 8000a24:	6093      	str	r3, [r2, #8]
 8000a26:	da08      	bge.n	8000a3a <__sfputc_r+0x1e>
 8000a28:	6994      	ldr	r4, [r2, #24]
 8000a2a:	42a3      	cmp	r3, r4
 8000a2c:	db01      	blt.n	8000a32 <__sfputc_r+0x16>
 8000a2e:	290a      	cmp	r1, #10
 8000a30:	d103      	bne.n	8000a3a <__sfputc_r+0x1e>
 8000a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a36:	f000 bb33 	b.w	80010a0 <__swbuf_r>
 8000a3a:	6813      	ldr	r3, [r2, #0]
 8000a3c:	1c58      	adds	r0, r3, #1
 8000a3e:	6010      	str	r0, [r2, #0]
 8000a40:	7019      	strb	r1, [r3, #0]
 8000a42:	4608      	mov	r0, r1
 8000a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <__sfputs_r>:
 8000a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4c:	4606      	mov	r6, r0
 8000a4e:	460f      	mov	r7, r1
 8000a50:	4614      	mov	r4, r2
 8000a52:	18d5      	adds	r5, r2, r3
 8000a54:	42ac      	cmp	r4, r5
 8000a56:	d101      	bne.n	8000a5c <__sfputs_r+0x12>
 8000a58:	2000      	movs	r0, #0
 8000a5a:	e007      	b.n	8000a6c <__sfputs_r+0x22>
 8000a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a60:	463a      	mov	r2, r7
 8000a62:	4630      	mov	r0, r6
 8000a64:	f7ff ffda 	bl	8000a1c <__sfputc_r>
 8000a68:	1c43      	adds	r3, r0, #1
 8000a6a:	d1f3      	bne.n	8000a54 <__sfputs_r+0xa>
 8000a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a70 <_vfiprintf_r>:
 8000a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a74:	460d      	mov	r5, r1
 8000a76:	b09d      	sub	sp, #116	; 0x74
 8000a78:	4614      	mov	r4, r2
 8000a7a:	4698      	mov	r8, r3
 8000a7c:	4606      	mov	r6, r0
 8000a7e:	b118      	cbz	r0, 8000a88 <_vfiprintf_r+0x18>
 8000a80:	6983      	ldr	r3, [r0, #24]
 8000a82:	b90b      	cbnz	r3, 8000a88 <_vfiprintf_r+0x18>
 8000a84:	f7ff fe96 	bl	80007b4 <__sinit>
 8000a88:	4b89      	ldr	r3, [pc, #548]	; (8000cb0 <_vfiprintf_r+0x240>)
 8000a8a:	429d      	cmp	r5, r3
 8000a8c:	d11b      	bne.n	8000ac6 <_vfiprintf_r+0x56>
 8000a8e:	6875      	ldr	r5, [r6, #4]
 8000a90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a92:	07d9      	lsls	r1, r3, #31
 8000a94:	d405      	bmi.n	8000aa2 <_vfiprintf_r+0x32>
 8000a96:	89ab      	ldrh	r3, [r5, #12]
 8000a98:	059a      	lsls	r2, r3, #22
 8000a9a:	d402      	bmi.n	8000aa2 <_vfiprintf_r+0x32>
 8000a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a9e:	f7ff ff27 	bl	80008f0 <__retarget_lock_acquire_recursive>
 8000aa2:	89ab      	ldrh	r3, [r5, #12]
 8000aa4:	071b      	lsls	r3, r3, #28
 8000aa6:	d501      	bpl.n	8000aac <_vfiprintf_r+0x3c>
 8000aa8:	692b      	ldr	r3, [r5, #16]
 8000aaa:	b9eb      	cbnz	r3, 8000ae8 <_vfiprintf_r+0x78>
 8000aac:	4629      	mov	r1, r5
 8000aae:	4630      	mov	r0, r6
 8000ab0:	f000 fb5a 	bl	8001168 <__swsetup_r>
 8000ab4:	b1c0      	cbz	r0, 8000ae8 <_vfiprintf_r+0x78>
 8000ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ab8:	07dc      	lsls	r4, r3, #31
 8000aba:	d50e      	bpl.n	8000ada <_vfiprintf_r+0x6a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	b01d      	add	sp, #116	; 0x74
 8000ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ac6:	4b7b      	ldr	r3, [pc, #492]	; (8000cb4 <_vfiprintf_r+0x244>)
 8000ac8:	429d      	cmp	r5, r3
 8000aca:	d101      	bne.n	8000ad0 <_vfiprintf_r+0x60>
 8000acc:	68b5      	ldr	r5, [r6, #8]
 8000ace:	e7df      	b.n	8000a90 <_vfiprintf_r+0x20>
 8000ad0:	4b79      	ldr	r3, [pc, #484]	; (8000cb8 <_vfiprintf_r+0x248>)
 8000ad2:	429d      	cmp	r5, r3
 8000ad4:	bf08      	it	eq
 8000ad6:	68f5      	ldreq	r5, [r6, #12]
 8000ad8:	e7da      	b.n	8000a90 <_vfiprintf_r+0x20>
 8000ada:	89ab      	ldrh	r3, [r5, #12]
 8000adc:	0598      	lsls	r0, r3, #22
 8000ade:	d4ed      	bmi.n	8000abc <_vfiprintf_r+0x4c>
 8000ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ae2:	f7ff ff06 	bl	80008f2 <__retarget_lock_release_recursive>
 8000ae6:	e7e9      	b.n	8000abc <_vfiprintf_r+0x4c>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	9309      	str	r3, [sp, #36]	; 0x24
 8000aec:	2320      	movs	r3, #32
 8000aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000af6:	2330      	movs	r3, #48	; 0x30
 8000af8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000cbc <_vfiprintf_r+0x24c>
 8000afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b00:	f04f 0901 	mov.w	r9, #1
 8000b04:	4623      	mov	r3, r4
 8000b06:	469a      	mov	sl, r3
 8000b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b0c:	b10a      	cbz	r2, 8000b12 <_vfiprintf_r+0xa2>
 8000b0e:	2a25      	cmp	r2, #37	; 0x25
 8000b10:	d1f9      	bne.n	8000b06 <_vfiprintf_r+0x96>
 8000b12:	ebba 0b04 	subs.w	fp, sl, r4
 8000b16:	d00b      	beq.n	8000b30 <_vfiprintf_r+0xc0>
 8000b18:	465b      	mov	r3, fp
 8000b1a:	4622      	mov	r2, r4
 8000b1c:	4629      	mov	r1, r5
 8000b1e:	4630      	mov	r0, r6
 8000b20:	f7ff ff93 	bl	8000a4a <__sfputs_r>
 8000b24:	3001      	adds	r0, #1
 8000b26:	f000 80aa 	beq.w	8000c7e <_vfiprintf_r+0x20e>
 8000b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b2c:	445a      	add	r2, fp
 8000b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8000b30:	f89a 3000 	ldrb.w	r3, [sl]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	f000 80a2 	beq.w	8000c7e <_vfiprintf_r+0x20e>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b44:	f10a 0a01 	add.w	sl, sl, #1
 8000b48:	9304      	str	r3, [sp, #16]
 8000b4a:	9307      	str	r3, [sp, #28]
 8000b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b50:	931a      	str	r3, [sp, #104]	; 0x68
 8000b52:	4654      	mov	r4, sl
 8000b54:	2205      	movs	r2, #5
 8000b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b5a:	4858      	ldr	r0, [pc, #352]	; (8000cbc <_vfiprintf_r+0x24c>)
 8000b5c:	f7ff fb38 	bl	80001d0 <memchr>
 8000b60:	9a04      	ldr	r2, [sp, #16]
 8000b62:	b9d8      	cbnz	r0, 8000b9c <_vfiprintf_r+0x12c>
 8000b64:	06d1      	lsls	r1, r2, #27
 8000b66:	bf44      	itt	mi
 8000b68:	2320      	movmi	r3, #32
 8000b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b6e:	0713      	lsls	r3, r2, #28
 8000b70:	bf44      	itt	mi
 8000b72:	232b      	movmi	r3, #43	; 0x2b
 8000b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b78:	f89a 3000 	ldrb.w	r3, [sl]
 8000b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8000b7e:	d015      	beq.n	8000bac <_vfiprintf_r+0x13c>
 8000b80:	9a07      	ldr	r2, [sp, #28]
 8000b82:	4654      	mov	r4, sl
 8000b84:	2000      	movs	r0, #0
 8000b86:	f04f 0c0a 	mov.w	ip, #10
 8000b8a:	4621      	mov	r1, r4
 8000b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b90:	3b30      	subs	r3, #48	; 0x30
 8000b92:	2b09      	cmp	r3, #9
 8000b94:	d94e      	bls.n	8000c34 <_vfiprintf_r+0x1c4>
 8000b96:	b1b0      	cbz	r0, 8000bc6 <_vfiprintf_r+0x156>
 8000b98:	9207      	str	r2, [sp, #28]
 8000b9a:	e014      	b.n	8000bc6 <_vfiprintf_r+0x156>
 8000b9c:	eba0 0308 	sub.w	r3, r0, r8
 8000ba0:	fa09 f303 	lsl.w	r3, r9, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	9304      	str	r3, [sp, #16]
 8000ba8:	46a2      	mov	sl, r4
 8000baa:	e7d2      	b.n	8000b52 <_vfiprintf_r+0xe2>
 8000bac:	9b03      	ldr	r3, [sp, #12]
 8000bae:	1d19      	adds	r1, r3, #4
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	9103      	str	r1, [sp, #12]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bfbb      	ittet	lt
 8000bb8:	425b      	neglt	r3, r3
 8000bba:	f042 0202 	orrlt.w	r2, r2, #2
 8000bbe:	9307      	strge	r3, [sp, #28]
 8000bc0:	9307      	strlt	r3, [sp, #28]
 8000bc2:	bfb8      	it	lt
 8000bc4:	9204      	strlt	r2, [sp, #16]
 8000bc6:	7823      	ldrb	r3, [r4, #0]
 8000bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8000bca:	d10c      	bne.n	8000be6 <_vfiprintf_r+0x176>
 8000bcc:	7863      	ldrb	r3, [r4, #1]
 8000bce:	2b2a      	cmp	r3, #42	; 0x2a
 8000bd0:	d135      	bne.n	8000c3e <_vfiprintf_r+0x1ce>
 8000bd2:	9b03      	ldr	r3, [sp, #12]
 8000bd4:	1d1a      	adds	r2, r3, #4
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	9203      	str	r2, [sp, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bfb8      	it	lt
 8000bde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000be2:	3402      	adds	r4, #2
 8000be4:	9305      	str	r3, [sp, #20]
 8000be6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000ccc <_vfiprintf_r+0x25c>
 8000bea:	7821      	ldrb	r1, [r4, #0]
 8000bec:	2203      	movs	r2, #3
 8000bee:	4650      	mov	r0, sl
 8000bf0:	f7ff faee 	bl	80001d0 <memchr>
 8000bf4:	b140      	cbz	r0, 8000c08 <_vfiprintf_r+0x198>
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	eba0 000a 	sub.w	r0, r0, sl
 8000bfc:	fa03 f000 	lsl.w	r0, r3, r0
 8000c00:	9b04      	ldr	r3, [sp, #16]
 8000c02:	4303      	orrs	r3, r0
 8000c04:	3401      	adds	r4, #1
 8000c06:	9304      	str	r3, [sp, #16]
 8000c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c0c:	482c      	ldr	r0, [pc, #176]	; (8000cc0 <_vfiprintf_r+0x250>)
 8000c0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c12:	2206      	movs	r2, #6
 8000c14:	f7ff fadc 	bl	80001d0 <memchr>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d03f      	beq.n	8000c9c <_vfiprintf_r+0x22c>
 8000c1c:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <_vfiprintf_r+0x254>)
 8000c1e:	bb1b      	cbnz	r3, 8000c68 <_vfiprintf_r+0x1f8>
 8000c20:	9b03      	ldr	r3, [sp, #12]
 8000c22:	3307      	adds	r3, #7
 8000c24:	f023 0307 	bic.w	r3, r3, #7
 8000c28:	3308      	adds	r3, #8
 8000c2a:	9303      	str	r3, [sp, #12]
 8000c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c2e:	443b      	add	r3, r7
 8000c30:	9309      	str	r3, [sp, #36]	; 0x24
 8000c32:	e767      	b.n	8000b04 <_vfiprintf_r+0x94>
 8000c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c38:	460c      	mov	r4, r1
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	e7a5      	b.n	8000b8a <_vfiprintf_r+0x11a>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	3401      	adds	r4, #1
 8000c42:	9305      	str	r3, [sp, #20]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 0c0a 	mov.w	ip, #10
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c50:	3a30      	subs	r2, #48	; 0x30
 8000c52:	2a09      	cmp	r2, #9
 8000c54:	d903      	bls.n	8000c5e <_vfiprintf_r+0x1ee>
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0c5      	beq.n	8000be6 <_vfiprintf_r+0x176>
 8000c5a:	9105      	str	r1, [sp, #20]
 8000c5c:	e7c3      	b.n	8000be6 <_vfiprintf_r+0x176>
 8000c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c62:	4604      	mov	r4, r0
 8000c64:	2301      	movs	r3, #1
 8000c66:	e7f0      	b.n	8000c4a <_vfiprintf_r+0x1da>
 8000c68:	ab03      	add	r3, sp, #12
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	462a      	mov	r2, r5
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <_vfiprintf_r+0x258>)
 8000c70:	a904      	add	r1, sp, #16
 8000c72:	4630      	mov	r0, r6
 8000c74:	f3af 8000 	nop.w
 8000c78:	4607      	mov	r7, r0
 8000c7a:	1c78      	adds	r0, r7, #1
 8000c7c:	d1d6      	bne.n	8000c2c <_vfiprintf_r+0x1bc>
 8000c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c80:	07d9      	lsls	r1, r3, #31
 8000c82:	d405      	bmi.n	8000c90 <_vfiprintf_r+0x220>
 8000c84:	89ab      	ldrh	r3, [r5, #12]
 8000c86:	059a      	lsls	r2, r3, #22
 8000c88:	d402      	bmi.n	8000c90 <_vfiprintf_r+0x220>
 8000c8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c8c:	f7ff fe31 	bl	80008f2 <__retarget_lock_release_recursive>
 8000c90:	89ab      	ldrh	r3, [r5, #12]
 8000c92:	065b      	lsls	r3, r3, #25
 8000c94:	f53f af12 	bmi.w	8000abc <_vfiprintf_r+0x4c>
 8000c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c9a:	e711      	b.n	8000ac0 <_vfiprintf_r+0x50>
 8000c9c:	ab03      	add	r3, sp, #12
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	462a      	mov	r2, r5
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <_vfiprintf_r+0x258>)
 8000ca4:	a904      	add	r1, sp, #16
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	f000 f880 	bl	8000dac <_printf_i>
 8000cac:	e7e4      	b.n	8000c78 <_vfiprintf_r+0x208>
 8000cae:	bf00      	nop
 8000cb0:	0800162c 	.word	0x0800162c
 8000cb4:	0800164c 	.word	0x0800164c
 8000cb8:	0800160c 	.word	0x0800160c
 8000cbc:	0800166c 	.word	0x0800166c
 8000cc0:	08001676 	.word	0x08001676
 8000cc4:	00000000 	.word	0x00000000
 8000cc8:	08000a4b 	.word	0x08000a4b
 8000ccc:	08001672 	.word	0x08001672

08000cd0 <_printf_common>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	4616      	mov	r6, r2
 8000cd6:	4699      	mov	r9, r3
 8000cd8:	688a      	ldr	r2, [r1, #8]
 8000cda:	690b      	ldr	r3, [r1, #16]
 8000cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	bfb8      	it	lt
 8000ce4:	4613      	movlt	r3, r2
 8000ce6:	6033      	str	r3, [r6, #0]
 8000ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000cec:	4607      	mov	r7, r0
 8000cee:	460c      	mov	r4, r1
 8000cf0:	b10a      	cbz	r2, 8000cf6 <_printf_common+0x26>
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	6033      	str	r3, [r6, #0]
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	0699      	lsls	r1, r3, #26
 8000cfa:	bf42      	ittt	mi
 8000cfc:	6833      	ldrmi	r3, [r6, #0]
 8000cfe:	3302      	addmi	r3, #2
 8000d00:	6033      	strmi	r3, [r6, #0]
 8000d02:	6825      	ldr	r5, [r4, #0]
 8000d04:	f015 0506 	ands.w	r5, r5, #6
 8000d08:	d106      	bne.n	8000d18 <_printf_common+0x48>
 8000d0a:	f104 0a19 	add.w	sl, r4, #25
 8000d0e:	68e3      	ldr	r3, [r4, #12]
 8000d10:	6832      	ldr	r2, [r6, #0]
 8000d12:	1a9b      	subs	r3, r3, r2
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	dc26      	bgt.n	8000d66 <_printf_common+0x96>
 8000d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d1c:	1e13      	subs	r3, r2, #0
 8000d1e:	6822      	ldr	r2, [r4, #0]
 8000d20:	bf18      	it	ne
 8000d22:	2301      	movne	r3, #1
 8000d24:	0692      	lsls	r2, r2, #26
 8000d26:	d42b      	bmi.n	8000d80 <_printf_common+0xb0>
 8000d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d2c:	4649      	mov	r1, r9
 8000d2e:	4638      	mov	r0, r7
 8000d30:	47c0      	blx	r8
 8000d32:	3001      	adds	r0, #1
 8000d34:	d01e      	beq.n	8000d74 <_printf_common+0xa4>
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	68e5      	ldr	r5, [r4, #12]
 8000d3a:	6832      	ldr	r2, [r6, #0]
 8000d3c:	f003 0306 	and.w	r3, r3, #6
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	bf08      	it	eq
 8000d44:	1aad      	subeq	r5, r5, r2
 8000d46:	68a3      	ldr	r3, [r4, #8]
 8000d48:	6922      	ldr	r2, [r4, #16]
 8000d4a:	bf0c      	ite	eq
 8000d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d50:	2500      	movne	r5, #0
 8000d52:	4293      	cmp	r3, r2
 8000d54:	bfc4      	itt	gt
 8000d56:	1a9b      	subgt	r3, r3, r2
 8000d58:	18ed      	addgt	r5, r5, r3
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	341a      	adds	r4, #26
 8000d5e:	42b5      	cmp	r5, r6
 8000d60:	d11a      	bne.n	8000d98 <_printf_common+0xc8>
 8000d62:	2000      	movs	r0, #0
 8000d64:	e008      	b.n	8000d78 <_printf_common+0xa8>
 8000d66:	2301      	movs	r3, #1
 8000d68:	4652      	mov	r2, sl
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	4638      	mov	r0, r7
 8000d6e:	47c0      	blx	r8
 8000d70:	3001      	adds	r0, #1
 8000d72:	d103      	bne.n	8000d7c <_printf_common+0xac>
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	3501      	adds	r5, #1
 8000d7e:	e7c6      	b.n	8000d0e <_printf_common+0x3e>
 8000d80:	18e1      	adds	r1, r4, r3
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	2030      	movs	r0, #48	; 0x30
 8000d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d8a:	4422      	add	r2, r4
 8000d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d94:	3302      	adds	r3, #2
 8000d96:	e7c7      	b.n	8000d28 <_printf_common+0x58>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	4649      	mov	r1, r9
 8000d9e:	4638      	mov	r0, r7
 8000da0:	47c0      	blx	r8
 8000da2:	3001      	adds	r0, #1
 8000da4:	d0e6      	beq.n	8000d74 <_printf_common+0xa4>
 8000da6:	3601      	adds	r6, #1
 8000da8:	e7d9      	b.n	8000d5e <_printf_common+0x8e>
	...

08000dac <_printf_i>:
 8000dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000db0:	7e0f      	ldrb	r7, [r1, #24]
 8000db2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000db4:	2f78      	cmp	r7, #120	; 0x78
 8000db6:	4691      	mov	r9, r2
 8000db8:	4680      	mov	r8, r0
 8000dba:	460c      	mov	r4, r1
 8000dbc:	469a      	mov	sl, r3
 8000dbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000dc2:	d807      	bhi.n	8000dd4 <_printf_i+0x28>
 8000dc4:	2f62      	cmp	r7, #98	; 0x62
 8000dc6:	d80a      	bhi.n	8000dde <_printf_i+0x32>
 8000dc8:	2f00      	cmp	r7, #0
 8000dca:	f000 80d8 	beq.w	8000f7e <_printf_i+0x1d2>
 8000dce:	2f58      	cmp	r7, #88	; 0x58
 8000dd0:	f000 80a3 	beq.w	8000f1a <_printf_i+0x16e>
 8000dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ddc:	e03a      	b.n	8000e54 <_printf_i+0xa8>
 8000dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000de2:	2b15      	cmp	r3, #21
 8000de4:	d8f6      	bhi.n	8000dd4 <_printf_i+0x28>
 8000de6:	a101      	add	r1, pc, #4	; (adr r1, 8000dec <_printf_i+0x40>)
 8000de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000dec:	08000e45 	.word	0x08000e45
 8000df0:	08000e59 	.word	0x08000e59
 8000df4:	08000dd5 	.word	0x08000dd5
 8000df8:	08000dd5 	.word	0x08000dd5
 8000dfc:	08000dd5 	.word	0x08000dd5
 8000e00:	08000dd5 	.word	0x08000dd5
 8000e04:	08000e59 	.word	0x08000e59
 8000e08:	08000dd5 	.word	0x08000dd5
 8000e0c:	08000dd5 	.word	0x08000dd5
 8000e10:	08000dd5 	.word	0x08000dd5
 8000e14:	08000dd5 	.word	0x08000dd5
 8000e18:	08000f65 	.word	0x08000f65
 8000e1c:	08000e89 	.word	0x08000e89
 8000e20:	08000f47 	.word	0x08000f47
 8000e24:	08000dd5 	.word	0x08000dd5
 8000e28:	08000dd5 	.word	0x08000dd5
 8000e2c:	08000f87 	.word	0x08000f87
 8000e30:	08000dd5 	.word	0x08000dd5
 8000e34:	08000e89 	.word	0x08000e89
 8000e38:	08000dd5 	.word	0x08000dd5
 8000e3c:	08000dd5 	.word	0x08000dd5
 8000e40:	08000f4f 	.word	0x08000f4f
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	1d1a      	adds	r2, r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	602a      	str	r2, [r5, #0]
 8000e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e54:	2301      	movs	r3, #1
 8000e56:	e0a3      	b.n	8000fa0 <_printf_i+0x1f4>
 8000e58:	6820      	ldr	r0, [r4, #0]
 8000e5a:	6829      	ldr	r1, [r5, #0]
 8000e5c:	0606      	lsls	r6, r0, #24
 8000e5e:	f101 0304 	add.w	r3, r1, #4
 8000e62:	d50a      	bpl.n	8000e7a <_printf_i+0xce>
 8000e64:	680e      	ldr	r6, [r1, #0]
 8000e66:	602b      	str	r3, [r5, #0]
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	da03      	bge.n	8000e74 <_printf_i+0xc8>
 8000e6c:	232d      	movs	r3, #45	; 0x2d
 8000e6e:	4276      	negs	r6, r6
 8000e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e74:	485e      	ldr	r0, [pc, #376]	; (8000ff0 <_printf_i+0x244>)
 8000e76:	230a      	movs	r3, #10
 8000e78:	e019      	b.n	8000eae <_printf_i+0x102>
 8000e7a:	680e      	ldr	r6, [r1, #0]
 8000e7c:	602b      	str	r3, [r5, #0]
 8000e7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e82:	bf18      	it	ne
 8000e84:	b236      	sxthne	r6, r6
 8000e86:	e7ef      	b.n	8000e68 <_printf_i+0xbc>
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	6820      	ldr	r0, [r4, #0]
 8000e8c:	1d19      	adds	r1, r3, #4
 8000e8e:	6029      	str	r1, [r5, #0]
 8000e90:	0601      	lsls	r1, r0, #24
 8000e92:	d501      	bpl.n	8000e98 <_printf_i+0xec>
 8000e94:	681e      	ldr	r6, [r3, #0]
 8000e96:	e002      	b.n	8000e9e <_printf_i+0xf2>
 8000e98:	0646      	lsls	r6, r0, #25
 8000e9a:	d5fb      	bpl.n	8000e94 <_printf_i+0xe8>
 8000e9c:	881e      	ldrh	r6, [r3, #0]
 8000e9e:	4854      	ldr	r0, [pc, #336]	; (8000ff0 <_printf_i+0x244>)
 8000ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2308      	moveq	r3, #8
 8000ea6:	230a      	movne	r3, #10
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000eae:	6865      	ldr	r5, [r4, #4]
 8000eb0:	60a5      	str	r5, [r4, #8]
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	bfa2      	ittt	ge
 8000eb6:	6821      	ldrge	r1, [r4, #0]
 8000eb8:	f021 0104 	bicge.w	r1, r1, #4
 8000ebc:	6021      	strge	r1, [r4, #0]
 8000ebe:	b90e      	cbnz	r6, 8000ec4 <_printf_i+0x118>
 8000ec0:	2d00      	cmp	r5, #0
 8000ec2:	d04d      	beq.n	8000f60 <_printf_i+0x1b4>
 8000ec4:	4615      	mov	r5, r2
 8000ec6:	fbb6 f1f3 	udiv	r1, r6, r3
 8000eca:	fb03 6711 	mls	r7, r3, r1, r6
 8000ece:	5dc7      	ldrb	r7, [r0, r7]
 8000ed0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000ed4:	4637      	mov	r7, r6
 8000ed6:	42bb      	cmp	r3, r7
 8000ed8:	460e      	mov	r6, r1
 8000eda:	d9f4      	bls.n	8000ec6 <_printf_i+0x11a>
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d10b      	bne.n	8000ef8 <_printf_i+0x14c>
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	07de      	lsls	r6, r3, #31
 8000ee4:	d508      	bpl.n	8000ef8 <_printf_i+0x14c>
 8000ee6:	6923      	ldr	r3, [r4, #16]
 8000ee8:	6861      	ldr	r1, [r4, #4]
 8000eea:	4299      	cmp	r1, r3
 8000eec:	bfde      	ittt	le
 8000eee:	2330      	movle	r3, #48	; 0x30
 8000ef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000ef4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000ef8:	1b52      	subs	r2, r2, r5
 8000efa:	6122      	str	r2, [r4, #16]
 8000efc:	f8cd a000 	str.w	sl, [sp]
 8000f00:	464b      	mov	r3, r9
 8000f02:	aa03      	add	r2, sp, #12
 8000f04:	4621      	mov	r1, r4
 8000f06:	4640      	mov	r0, r8
 8000f08:	f7ff fee2 	bl	8000cd0 <_printf_common>
 8000f0c:	3001      	adds	r0, #1
 8000f0e:	d14c      	bne.n	8000faa <_printf_i+0x1fe>
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f14:	b004      	add	sp, #16
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	4835      	ldr	r0, [pc, #212]	; (8000ff0 <_printf_i+0x244>)
 8000f1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f20:	6829      	ldr	r1, [r5, #0]
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f28:	6029      	str	r1, [r5, #0]
 8000f2a:	061d      	lsls	r5, r3, #24
 8000f2c:	d514      	bpl.n	8000f58 <_printf_i+0x1ac>
 8000f2e:	07df      	lsls	r7, r3, #31
 8000f30:	bf44      	itt	mi
 8000f32:	f043 0320 	orrmi.w	r3, r3, #32
 8000f36:	6023      	strmi	r3, [r4, #0]
 8000f38:	b91e      	cbnz	r6, 8000f42 <_printf_i+0x196>
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	f023 0320 	bic.w	r3, r3, #32
 8000f40:	6023      	str	r3, [r4, #0]
 8000f42:	2310      	movs	r3, #16
 8000f44:	e7b0      	b.n	8000ea8 <_printf_i+0xfc>
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	f043 0320 	orr.w	r3, r3, #32
 8000f4c:	6023      	str	r3, [r4, #0]
 8000f4e:	2378      	movs	r3, #120	; 0x78
 8000f50:	4828      	ldr	r0, [pc, #160]	; (8000ff4 <_printf_i+0x248>)
 8000f52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f56:	e7e3      	b.n	8000f20 <_printf_i+0x174>
 8000f58:	0659      	lsls	r1, r3, #25
 8000f5a:	bf48      	it	mi
 8000f5c:	b2b6      	uxthmi	r6, r6
 8000f5e:	e7e6      	b.n	8000f2e <_printf_i+0x182>
 8000f60:	4615      	mov	r5, r2
 8000f62:	e7bb      	b.n	8000edc <_printf_i+0x130>
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	6826      	ldr	r6, [r4, #0]
 8000f68:	6961      	ldr	r1, [r4, #20]
 8000f6a:	1d18      	adds	r0, r3, #4
 8000f6c:	6028      	str	r0, [r5, #0]
 8000f6e:	0635      	lsls	r5, r6, #24
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	d501      	bpl.n	8000f78 <_printf_i+0x1cc>
 8000f74:	6019      	str	r1, [r3, #0]
 8000f76:	e002      	b.n	8000f7e <_printf_i+0x1d2>
 8000f78:	0670      	lsls	r0, r6, #25
 8000f7a:	d5fb      	bpl.n	8000f74 <_printf_i+0x1c8>
 8000f7c:	8019      	strh	r1, [r3, #0]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	6123      	str	r3, [r4, #16]
 8000f82:	4615      	mov	r5, r2
 8000f84:	e7ba      	b.n	8000efc <_printf_i+0x150>
 8000f86:	682b      	ldr	r3, [r5, #0]
 8000f88:	1d1a      	adds	r2, r3, #4
 8000f8a:	602a      	str	r2, [r5, #0]
 8000f8c:	681d      	ldr	r5, [r3, #0]
 8000f8e:	6862      	ldr	r2, [r4, #4]
 8000f90:	2100      	movs	r1, #0
 8000f92:	4628      	mov	r0, r5
 8000f94:	f7ff f91c 	bl	80001d0 <memchr>
 8000f98:	b108      	cbz	r0, 8000f9e <_printf_i+0x1f2>
 8000f9a:	1b40      	subs	r0, r0, r5
 8000f9c:	6060      	str	r0, [r4, #4]
 8000f9e:	6863      	ldr	r3, [r4, #4]
 8000fa0:	6123      	str	r3, [r4, #16]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fa8:	e7a8      	b.n	8000efc <_printf_i+0x150>
 8000faa:	6923      	ldr	r3, [r4, #16]
 8000fac:	462a      	mov	r2, r5
 8000fae:	4649      	mov	r1, r9
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	47d0      	blx	sl
 8000fb4:	3001      	adds	r0, #1
 8000fb6:	d0ab      	beq.n	8000f10 <_printf_i+0x164>
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	079b      	lsls	r3, r3, #30
 8000fbc:	d413      	bmi.n	8000fe6 <_printf_i+0x23a>
 8000fbe:	68e0      	ldr	r0, [r4, #12]
 8000fc0:	9b03      	ldr	r3, [sp, #12]
 8000fc2:	4298      	cmp	r0, r3
 8000fc4:	bfb8      	it	lt
 8000fc6:	4618      	movlt	r0, r3
 8000fc8:	e7a4      	b.n	8000f14 <_printf_i+0x168>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	4632      	mov	r2, r6
 8000fce:	4649      	mov	r1, r9
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	47d0      	blx	sl
 8000fd4:	3001      	adds	r0, #1
 8000fd6:	d09b      	beq.n	8000f10 <_printf_i+0x164>
 8000fd8:	3501      	adds	r5, #1
 8000fda:	68e3      	ldr	r3, [r4, #12]
 8000fdc:	9903      	ldr	r1, [sp, #12]
 8000fde:	1a5b      	subs	r3, r3, r1
 8000fe0:	42ab      	cmp	r3, r5
 8000fe2:	dcf2      	bgt.n	8000fca <_printf_i+0x21e>
 8000fe4:	e7eb      	b.n	8000fbe <_printf_i+0x212>
 8000fe6:	2500      	movs	r5, #0
 8000fe8:	f104 0619 	add.w	r6, r4, #25
 8000fec:	e7f5      	b.n	8000fda <_printf_i+0x22e>
 8000fee:	bf00      	nop
 8000ff0:	0800167d 	.word	0x0800167d
 8000ff4:	0800168e 	.word	0x0800168e

08000ff8 <_sbrk_r>:
 8000ff8:	b538      	push	{r3, r4, r5, lr}
 8000ffa:	4d06      	ldr	r5, [pc, #24]	; (8001014 <_sbrk_r+0x1c>)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4604      	mov	r4, r0
 8001000:	4608      	mov	r0, r1
 8001002:	602b      	str	r3, [r5, #0]
 8001004:	f7ff f9be 	bl	8000384 <_sbrk>
 8001008:	1c43      	adds	r3, r0, #1
 800100a:	d102      	bne.n	8001012 <_sbrk_r+0x1a>
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	b103      	cbz	r3, 8001012 <_sbrk_r+0x1a>
 8001010:	6023      	str	r3, [r4, #0]
 8001012:	bd38      	pop	{r3, r4, r5, pc}
 8001014:	200000b8 	.word	0x200000b8

08001018 <__sread>:
 8001018:	b510      	push	{r4, lr}
 800101a:	460c      	mov	r4, r1
 800101c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001020:	f000 fab2 	bl	8001588 <_read_r>
 8001024:	2800      	cmp	r0, #0
 8001026:	bfab      	itete	ge
 8001028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800102a:	89a3      	ldrhlt	r3, [r4, #12]
 800102c:	181b      	addge	r3, r3, r0
 800102e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001032:	bfac      	ite	ge
 8001034:	6563      	strge	r3, [r4, #84]	; 0x54
 8001036:	81a3      	strhlt	r3, [r4, #12]
 8001038:	bd10      	pop	{r4, pc}

0800103a <__swrite>:
 800103a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800103e:	461f      	mov	r7, r3
 8001040:	898b      	ldrh	r3, [r1, #12]
 8001042:	05db      	lsls	r3, r3, #23
 8001044:	4605      	mov	r5, r0
 8001046:	460c      	mov	r4, r1
 8001048:	4616      	mov	r6, r2
 800104a:	d505      	bpl.n	8001058 <__swrite+0x1e>
 800104c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001050:	2302      	movs	r3, #2
 8001052:	2200      	movs	r2, #0
 8001054:	f000 f9c8 	bl	80013e8 <_lseek_r>
 8001058:	89a3      	ldrh	r3, [r4, #12]
 800105a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800105e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001062:	81a3      	strh	r3, [r4, #12]
 8001064:	4632      	mov	r2, r6
 8001066:	463b      	mov	r3, r7
 8001068:	4628      	mov	r0, r5
 800106a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800106e:	f000 b869 	b.w	8001144 <_write_r>

08001072 <__sseek>:
 8001072:	b510      	push	{r4, lr}
 8001074:	460c      	mov	r4, r1
 8001076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800107a:	f000 f9b5 	bl	80013e8 <_lseek_r>
 800107e:	1c43      	adds	r3, r0, #1
 8001080:	89a3      	ldrh	r3, [r4, #12]
 8001082:	bf15      	itete	ne
 8001084:	6560      	strne	r0, [r4, #84]	; 0x54
 8001086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800108a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800108e:	81a3      	strheq	r3, [r4, #12]
 8001090:	bf18      	it	ne
 8001092:	81a3      	strhne	r3, [r4, #12]
 8001094:	bd10      	pop	{r4, pc}

08001096 <__sclose>:
 8001096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800109a:	f000 b8d3 	b.w	8001244 <_close_r>
	...

080010a0 <__swbuf_r>:
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	460e      	mov	r6, r1
 80010a4:	4614      	mov	r4, r2
 80010a6:	4605      	mov	r5, r0
 80010a8:	b118      	cbz	r0, 80010b2 <__swbuf_r+0x12>
 80010aa:	6983      	ldr	r3, [r0, #24]
 80010ac:	b90b      	cbnz	r3, 80010b2 <__swbuf_r+0x12>
 80010ae:	f7ff fb81 	bl	80007b4 <__sinit>
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <__swbuf_r+0x98>)
 80010b4:	429c      	cmp	r4, r3
 80010b6:	d12b      	bne.n	8001110 <__swbuf_r+0x70>
 80010b8:	686c      	ldr	r4, [r5, #4]
 80010ba:	69a3      	ldr	r3, [r4, #24]
 80010bc:	60a3      	str	r3, [r4, #8]
 80010be:	89a3      	ldrh	r3, [r4, #12]
 80010c0:	071a      	lsls	r2, r3, #28
 80010c2:	d52f      	bpl.n	8001124 <__swbuf_r+0x84>
 80010c4:	6923      	ldr	r3, [r4, #16]
 80010c6:	b36b      	cbz	r3, 8001124 <__swbuf_r+0x84>
 80010c8:	6923      	ldr	r3, [r4, #16]
 80010ca:	6820      	ldr	r0, [r4, #0]
 80010cc:	1ac0      	subs	r0, r0, r3
 80010ce:	6963      	ldr	r3, [r4, #20]
 80010d0:	b2f6      	uxtb	r6, r6
 80010d2:	4283      	cmp	r3, r0
 80010d4:	4637      	mov	r7, r6
 80010d6:	dc04      	bgt.n	80010e2 <__swbuf_r+0x42>
 80010d8:	4621      	mov	r1, r4
 80010da:	4628      	mov	r0, r5
 80010dc:	f000 f948 	bl	8001370 <_fflush_r>
 80010e0:	bb30      	cbnz	r0, 8001130 <__swbuf_r+0x90>
 80010e2:	68a3      	ldr	r3, [r4, #8]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	60a3      	str	r3, [r4, #8]
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	6022      	str	r2, [r4, #0]
 80010ee:	701e      	strb	r6, [r3, #0]
 80010f0:	6963      	ldr	r3, [r4, #20]
 80010f2:	3001      	adds	r0, #1
 80010f4:	4283      	cmp	r3, r0
 80010f6:	d004      	beq.n	8001102 <__swbuf_r+0x62>
 80010f8:	89a3      	ldrh	r3, [r4, #12]
 80010fa:	07db      	lsls	r3, r3, #31
 80010fc:	d506      	bpl.n	800110c <__swbuf_r+0x6c>
 80010fe:	2e0a      	cmp	r6, #10
 8001100:	d104      	bne.n	800110c <__swbuf_r+0x6c>
 8001102:	4621      	mov	r1, r4
 8001104:	4628      	mov	r0, r5
 8001106:	f000 f933 	bl	8001370 <_fflush_r>
 800110a:	b988      	cbnz	r0, 8001130 <__swbuf_r+0x90>
 800110c:	4638      	mov	r0, r7
 800110e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <__swbuf_r+0x9c>)
 8001112:	429c      	cmp	r4, r3
 8001114:	d101      	bne.n	800111a <__swbuf_r+0x7a>
 8001116:	68ac      	ldr	r4, [r5, #8]
 8001118:	e7cf      	b.n	80010ba <__swbuf_r+0x1a>
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <__swbuf_r+0xa0>)
 800111c:	429c      	cmp	r4, r3
 800111e:	bf08      	it	eq
 8001120:	68ec      	ldreq	r4, [r5, #12]
 8001122:	e7ca      	b.n	80010ba <__swbuf_r+0x1a>
 8001124:	4621      	mov	r1, r4
 8001126:	4628      	mov	r0, r5
 8001128:	f000 f81e 	bl	8001168 <__swsetup_r>
 800112c:	2800      	cmp	r0, #0
 800112e:	d0cb      	beq.n	80010c8 <__swbuf_r+0x28>
 8001130:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001134:	e7ea      	b.n	800110c <__swbuf_r+0x6c>
 8001136:	bf00      	nop
 8001138:	0800162c 	.word	0x0800162c
 800113c:	0800164c 	.word	0x0800164c
 8001140:	0800160c 	.word	0x0800160c

08001144 <_write_r>:
 8001144:	b538      	push	{r3, r4, r5, lr}
 8001146:	4d07      	ldr	r5, [pc, #28]	; (8001164 <_write_r+0x20>)
 8001148:	4604      	mov	r4, r0
 800114a:	4608      	mov	r0, r1
 800114c:	4611      	mov	r1, r2
 800114e:	2200      	movs	r2, #0
 8001150:	602a      	str	r2, [r5, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	f7ff f8c5 	bl	80002e2 <_write>
 8001158:	1c43      	adds	r3, r0, #1
 800115a:	d102      	bne.n	8001162 <_write_r+0x1e>
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	b103      	cbz	r3, 8001162 <_write_r+0x1e>
 8001160:	6023      	str	r3, [r4, #0]
 8001162:	bd38      	pop	{r3, r4, r5, pc}
 8001164:	200000b8 	.word	0x200000b8

08001168 <__swsetup_r>:
 8001168:	4b32      	ldr	r3, [pc, #200]	; (8001234 <__swsetup_r+0xcc>)
 800116a:	b570      	push	{r4, r5, r6, lr}
 800116c:	681d      	ldr	r5, [r3, #0]
 800116e:	4606      	mov	r6, r0
 8001170:	460c      	mov	r4, r1
 8001172:	b125      	cbz	r5, 800117e <__swsetup_r+0x16>
 8001174:	69ab      	ldr	r3, [r5, #24]
 8001176:	b913      	cbnz	r3, 800117e <__swsetup_r+0x16>
 8001178:	4628      	mov	r0, r5
 800117a:	f7ff fb1b 	bl	80007b4 <__sinit>
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <__swsetup_r+0xd0>)
 8001180:	429c      	cmp	r4, r3
 8001182:	d10f      	bne.n	80011a4 <__swsetup_r+0x3c>
 8001184:	686c      	ldr	r4, [r5, #4]
 8001186:	89a3      	ldrh	r3, [r4, #12]
 8001188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800118c:	0719      	lsls	r1, r3, #28
 800118e:	d42c      	bmi.n	80011ea <__swsetup_r+0x82>
 8001190:	06dd      	lsls	r5, r3, #27
 8001192:	d411      	bmi.n	80011b8 <__swsetup_r+0x50>
 8001194:	2309      	movs	r3, #9
 8001196:	6033      	str	r3, [r6, #0]
 8001198:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800119c:	81a3      	strh	r3, [r4, #12]
 800119e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a2:	e03e      	b.n	8001222 <__swsetup_r+0xba>
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <__swsetup_r+0xd4>)
 80011a6:	429c      	cmp	r4, r3
 80011a8:	d101      	bne.n	80011ae <__swsetup_r+0x46>
 80011aa:	68ac      	ldr	r4, [r5, #8]
 80011ac:	e7eb      	b.n	8001186 <__swsetup_r+0x1e>
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <__swsetup_r+0xd8>)
 80011b0:	429c      	cmp	r4, r3
 80011b2:	bf08      	it	eq
 80011b4:	68ec      	ldreq	r4, [r5, #12]
 80011b6:	e7e6      	b.n	8001186 <__swsetup_r+0x1e>
 80011b8:	0758      	lsls	r0, r3, #29
 80011ba:	d512      	bpl.n	80011e2 <__swsetup_r+0x7a>
 80011bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011be:	b141      	cbz	r1, 80011d2 <__swsetup_r+0x6a>
 80011c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011c4:	4299      	cmp	r1, r3
 80011c6:	d002      	beq.n	80011ce <__swsetup_r+0x66>
 80011c8:	4630      	mov	r0, r6
 80011ca:	f000 f991 	bl	80014f0 <_free_r>
 80011ce:	2300      	movs	r3, #0
 80011d0:	6363      	str	r3, [r4, #52]	; 0x34
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011d8:	81a3      	strh	r3, [r4, #12]
 80011da:	2300      	movs	r3, #0
 80011dc:	6063      	str	r3, [r4, #4]
 80011de:	6923      	ldr	r3, [r4, #16]
 80011e0:	6023      	str	r3, [r4, #0]
 80011e2:	89a3      	ldrh	r3, [r4, #12]
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	81a3      	strh	r3, [r4, #12]
 80011ea:	6923      	ldr	r3, [r4, #16]
 80011ec:	b94b      	cbnz	r3, 8001202 <__swsetup_r+0x9a>
 80011ee:	89a3      	ldrh	r3, [r4, #12]
 80011f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80011f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f8:	d003      	beq.n	8001202 <__swsetup_r+0x9a>
 80011fa:	4621      	mov	r1, r4
 80011fc:	4630      	mov	r0, r6
 80011fe:	f000 f92b 	bl	8001458 <__smakebuf_r>
 8001202:	89a0      	ldrh	r0, [r4, #12]
 8001204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001208:	f010 0301 	ands.w	r3, r0, #1
 800120c:	d00a      	beq.n	8001224 <__swsetup_r+0xbc>
 800120e:	2300      	movs	r3, #0
 8001210:	60a3      	str	r3, [r4, #8]
 8001212:	6963      	ldr	r3, [r4, #20]
 8001214:	425b      	negs	r3, r3
 8001216:	61a3      	str	r3, [r4, #24]
 8001218:	6923      	ldr	r3, [r4, #16]
 800121a:	b943      	cbnz	r3, 800122e <__swsetup_r+0xc6>
 800121c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001220:	d1ba      	bne.n	8001198 <__swsetup_r+0x30>
 8001222:	bd70      	pop	{r4, r5, r6, pc}
 8001224:	0781      	lsls	r1, r0, #30
 8001226:	bf58      	it	pl
 8001228:	6963      	ldrpl	r3, [r4, #20]
 800122a:	60a3      	str	r3, [r4, #8]
 800122c:	e7f4      	b.n	8001218 <__swsetup_r+0xb0>
 800122e:	2000      	movs	r0, #0
 8001230:	e7f7      	b.n	8001222 <__swsetup_r+0xba>
 8001232:	bf00      	nop
 8001234:	20000000 	.word	0x20000000
 8001238:	0800162c 	.word	0x0800162c
 800123c:	0800164c 	.word	0x0800164c
 8001240:	0800160c 	.word	0x0800160c

08001244 <_close_r>:
 8001244:	b538      	push	{r3, r4, r5, lr}
 8001246:	4d06      	ldr	r5, [pc, #24]	; (8001260 <_close_r+0x1c>)
 8001248:	2300      	movs	r3, #0
 800124a:	4604      	mov	r4, r0
 800124c:	4608      	mov	r0, r1
 800124e:	602b      	str	r3, [r5, #0]
 8001250:	f7ff f863 	bl	800031a <_close>
 8001254:	1c43      	adds	r3, r0, #1
 8001256:	d102      	bne.n	800125e <_close_r+0x1a>
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	b103      	cbz	r3, 800125e <_close_r+0x1a>
 800125c:	6023      	str	r3, [r4, #0]
 800125e:	bd38      	pop	{r3, r4, r5, pc}
 8001260:	200000b8 	.word	0x200000b8

08001264 <__sflush_r>:
 8001264:	898a      	ldrh	r2, [r1, #12]
 8001266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126a:	4605      	mov	r5, r0
 800126c:	0710      	lsls	r0, r2, #28
 800126e:	460c      	mov	r4, r1
 8001270:	d458      	bmi.n	8001324 <__sflush_r+0xc0>
 8001272:	684b      	ldr	r3, [r1, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	dc05      	bgt.n	8001284 <__sflush_r+0x20>
 8001278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	dc02      	bgt.n	8001284 <__sflush_r+0x20>
 800127e:	2000      	movs	r0, #0
 8001280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001286:	2e00      	cmp	r6, #0
 8001288:	d0f9      	beq.n	800127e <__sflush_r+0x1a>
 800128a:	2300      	movs	r3, #0
 800128c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001290:	682f      	ldr	r7, [r5, #0]
 8001292:	602b      	str	r3, [r5, #0]
 8001294:	d032      	beq.n	80012fc <__sflush_r+0x98>
 8001296:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001298:	89a3      	ldrh	r3, [r4, #12]
 800129a:	075a      	lsls	r2, r3, #29
 800129c:	d505      	bpl.n	80012aa <__sflush_r+0x46>
 800129e:	6863      	ldr	r3, [r4, #4]
 80012a0:	1ac0      	subs	r0, r0, r3
 80012a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012a4:	b10b      	cbz	r3, 80012aa <__sflush_r+0x46>
 80012a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012a8:	1ac0      	subs	r0, r0, r3
 80012aa:	2300      	movs	r3, #0
 80012ac:	4602      	mov	r2, r0
 80012ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012b0:	6a21      	ldr	r1, [r4, #32]
 80012b2:	4628      	mov	r0, r5
 80012b4:	47b0      	blx	r6
 80012b6:	1c43      	adds	r3, r0, #1
 80012b8:	89a3      	ldrh	r3, [r4, #12]
 80012ba:	d106      	bne.n	80012ca <__sflush_r+0x66>
 80012bc:	6829      	ldr	r1, [r5, #0]
 80012be:	291d      	cmp	r1, #29
 80012c0:	d82c      	bhi.n	800131c <__sflush_r+0xb8>
 80012c2:	4a2a      	ldr	r2, [pc, #168]	; (800136c <__sflush_r+0x108>)
 80012c4:	40ca      	lsrs	r2, r1
 80012c6:	07d6      	lsls	r6, r2, #31
 80012c8:	d528      	bpl.n	800131c <__sflush_r+0xb8>
 80012ca:	2200      	movs	r2, #0
 80012cc:	6062      	str	r2, [r4, #4]
 80012ce:	04d9      	lsls	r1, r3, #19
 80012d0:	6922      	ldr	r2, [r4, #16]
 80012d2:	6022      	str	r2, [r4, #0]
 80012d4:	d504      	bpl.n	80012e0 <__sflush_r+0x7c>
 80012d6:	1c42      	adds	r2, r0, #1
 80012d8:	d101      	bne.n	80012de <__sflush_r+0x7a>
 80012da:	682b      	ldr	r3, [r5, #0]
 80012dc:	b903      	cbnz	r3, 80012e0 <__sflush_r+0x7c>
 80012de:	6560      	str	r0, [r4, #84]	; 0x54
 80012e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012e2:	602f      	str	r7, [r5, #0]
 80012e4:	2900      	cmp	r1, #0
 80012e6:	d0ca      	beq.n	800127e <__sflush_r+0x1a>
 80012e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012ec:	4299      	cmp	r1, r3
 80012ee:	d002      	beq.n	80012f6 <__sflush_r+0x92>
 80012f0:	4628      	mov	r0, r5
 80012f2:	f000 f8fd 	bl	80014f0 <_free_r>
 80012f6:	2000      	movs	r0, #0
 80012f8:	6360      	str	r0, [r4, #52]	; 0x34
 80012fa:	e7c1      	b.n	8001280 <__sflush_r+0x1c>
 80012fc:	6a21      	ldr	r1, [r4, #32]
 80012fe:	2301      	movs	r3, #1
 8001300:	4628      	mov	r0, r5
 8001302:	47b0      	blx	r6
 8001304:	1c41      	adds	r1, r0, #1
 8001306:	d1c7      	bne.n	8001298 <__sflush_r+0x34>
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0c4      	beq.n	8001298 <__sflush_r+0x34>
 800130e:	2b1d      	cmp	r3, #29
 8001310:	d001      	beq.n	8001316 <__sflush_r+0xb2>
 8001312:	2b16      	cmp	r3, #22
 8001314:	d101      	bne.n	800131a <__sflush_r+0xb6>
 8001316:	602f      	str	r7, [r5, #0]
 8001318:	e7b1      	b.n	800127e <__sflush_r+0x1a>
 800131a:	89a3      	ldrh	r3, [r4, #12]
 800131c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001320:	81a3      	strh	r3, [r4, #12]
 8001322:	e7ad      	b.n	8001280 <__sflush_r+0x1c>
 8001324:	690f      	ldr	r7, [r1, #16]
 8001326:	2f00      	cmp	r7, #0
 8001328:	d0a9      	beq.n	800127e <__sflush_r+0x1a>
 800132a:	0793      	lsls	r3, r2, #30
 800132c:	680e      	ldr	r6, [r1, #0]
 800132e:	bf08      	it	eq
 8001330:	694b      	ldreq	r3, [r1, #20]
 8001332:	600f      	str	r7, [r1, #0]
 8001334:	bf18      	it	ne
 8001336:	2300      	movne	r3, #0
 8001338:	eba6 0807 	sub.w	r8, r6, r7
 800133c:	608b      	str	r3, [r1, #8]
 800133e:	f1b8 0f00 	cmp.w	r8, #0
 8001342:	dd9c      	ble.n	800127e <__sflush_r+0x1a>
 8001344:	6a21      	ldr	r1, [r4, #32]
 8001346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001348:	4643      	mov	r3, r8
 800134a:	463a      	mov	r2, r7
 800134c:	4628      	mov	r0, r5
 800134e:	47b0      	blx	r6
 8001350:	2800      	cmp	r0, #0
 8001352:	dc06      	bgt.n	8001362 <__sflush_r+0xfe>
 8001354:	89a3      	ldrh	r3, [r4, #12]
 8001356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135a:	81a3      	strh	r3, [r4, #12]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001360:	e78e      	b.n	8001280 <__sflush_r+0x1c>
 8001362:	4407      	add	r7, r0
 8001364:	eba8 0800 	sub.w	r8, r8, r0
 8001368:	e7e9      	b.n	800133e <__sflush_r+0xda>
 800136a:	bf00      	nop
 800136c:	20400001 	.word	0x20400001

08001370 <_fflush_r>:
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	690b      	ldr	r3, [r1, #16]
 8001374:	4605      	mov	r5, r0
 8001376:	460c      	mov	r4, r1
 8001378:	b913      	cbnz	r3, 8001380 <_fflush_r+0x10>
 800137a:	2500      	movs	r5, #0
 800137c:	4628      	mov	r0, r5
 800137e:	bd38      	pop	{r3, r4, r5, pc}
 8001380:	b118      	cbz	r0, 800138a <_fflush_r+0x1a>
 8001382:	6983      	ldr	r3, [r0, #24]
 8001384:	b90b      	cbnz	r3, 800138a <_fflush_r+0x1a>
 8001386:	f7ff fa15 	bl	80007b4 <__sinit>
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <_fflush_r+0x6c>)
 800138c:	429c      	cmp	r4, r3
 800138e:	d11b      	bne.n	80013c8 <_fflush_r+0x58>
 8001390:	686c      	ldr	r4, [r5, #4]
 8001392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0ef      	beq.n	800137a <_fflush_r+0xa>
 800139a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800139c:	07d0      	lsls	r0, r2, #31
 800139e:	d404      	bmi.n	80013aa <_fflush_r+0x3a>
 80013a0:	0599      	lsls	r1, r3, #22
 80013a2:	d402      	bmi.n	80013aa <_fflush_r+0x3a>
 80013a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013a6:	f7ff faa3 	bl	80008f0 <__retarget_lock_acquire_recursive>
 80013aa:	4628      	mov	r0, r5
 80013ac:	4621      	mov	r1, r4
 80013ae:	f7ff ff59 	bl	8001264 <__sflush_r>
 80013b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013b4:	07da      	lsls	r2, r3, #31
 80013b6:	4605      	mov	r5, r0
 80013b8:	d4e0      	bmi.n	800137c <_fflush_r+0xc>
 80013ba:	89a3      	ldrh	r3, [r4, #12]
 80013bc:	059b      	lsls	r3, r3, #22
 80013be:	d4dd      	bmi.n	800137c <_fflush_r+0xc>
 80013c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013c2:	f7ff fa96 	bl	80008f2 <__retarget_lock_release_recursive>
 80013c6:	e7d9      	b.n	800137c <_fflush_r+0xc>
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <_fflush_r+0x70>)
 80013ca:	429c      	cmp	r4, r3
 80013cc:	d101      	bne.n	80013d2 <_fflush_r+0x62>
 80013ce:	68ac      	ldr	r4, [r5, #8]
 80013d0:	e7df      	b.n	8001392 <_fflush_r+0x22>
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <_fflush_r+0x74>)
 80013d4:	429c      	cmp	r4, r3
 80013d6:	bf08      	it	eq
 80013d8:	68ec      	ldreq	r4, [r5, #12]
 80013da:	e7da      	b.n	8001392 <_fflush_r+0x22>
 80013dc:	0800162c 	.word	0x0800162c
 80013e0:	0800164c 	.word	0x0800164c
 80013e4:	0800160c 	.word	0x0800160c

080013e8 <_lseek_r>:
 80013e8:	b538      	push	{r3, r4, r5, lr}
 80013ea:	4d07      	ldr	r5, [pc, #28]	; (8001408 <_lseek_r+0x20>)
 80013ec:	4604      	mov	r4, r0
 80013ee:	4608      	mov	r0, r1
 80013f0:	4611      	mov	r1, r2
 80013f2:	2200      	movs	r2, #0
 80013f4:	602a      	str	r2, [r5, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	f7fe ffb6 	bl	8000368 <_lseek>
 80013fc:	1c43      	adds	r3, r0, #1
 80013fe:	d102      	bne.n	8001406 <_lseek_r+0x1e>
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	b103      	cbz	r3, 8001406 <_lseek_r+0x1e>
 8001404:	6023      	str	r3, [r4, #0]
 8001406:	bd38      	pop	{r3, r4, r5, pc}
 8001408:	200000b8 	.word	0x200000b8

0800140c <__swhatbuf_r>:
 800140c:	b570      	push	{r4, r5, r6, lr}
 800140e:	460e      	mov	r6, r1
 8001410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001414:	2900      	cmp	r1, #0
 8001416:	b096      	sub	sp, #88	; 0x58
 8001418:	4614      	mov	r4, r2
 800141a:	461d      	mov	r5, r3
 800141c:	da08      	bge.n	8001430 <__swhatbuf_r+0x24>
 800141e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	602a      	str	r2, [r5, #0]
 8001426:	061a      	lsls	r2, r3, #24
 8001428:	d410      	bmi.n	800144c <__swhatbuf_r+0x40>
 800142a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142e:	e00e      	b.n	800144e <__swhatbuf_r+0x42>
 8001430:	466a      	mov	r2, sp
 8001432:	f000 f8bb 	bl	80015ac <_fstat_r>
 8001436:	2800      	cmp	r0, #0
 8001438:	dbf1      	blt.n	800141e <__swhatbuf_r+0x12>
 800143a:	9a01      	ldr	r2, [sp, #4]
 800143c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001440:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001444:	425a      	negs	r2, r3
 8001446:	415a      	adcs	r2, r3
 8001448:	602a      	str	r2, [r5, #0]
 800144a:	e7ee      	b.n	800142a <__swhatbuf_r+0x1e>
 800144c:	2340      	movs	r3, #64	; 0x40
 800144e:	2000      	movs	r0, #0
 8001450:	6023      	str	r3, [r4, #0]
 8001452:	b016      	add	sp, #88	; 0x58
 8001454:	bd70      	pop	{r4, r5, r6, pc}
	...

08001458 <__smakebuf_r>:
 8001458:	898b      	ldrh	r3, [r1, #12]
 800145a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800145c:	079d      	lsls	r5, r3, #30
 800145e:	4606      	mov	r6, r0
 8001460:	460c      	mov	r4, r1
 8001462:	d507      	bpl.n	8001474 <__smakebuf_r+0x1c>
 8001464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	6123      	str	r3, [r4, #16]
 800146c:	2301      	movs	r3, #1
 800146e:	6163      	str	r3, [r4, #20]
 8001470:	b002      	add	sp, #8
 8001472:	bd70      	pop	{r4, r5, r6, pc}
 8001474:	ab01      	add	r3, sp, #4
 8001476:	466a      	mov	r2, sp
 8001478:	f7ff ffc8 	bl	800140c <__swhatbuf_r>
 800147c:	9900      	ldr	r1, [sp, #0]
 800147e:	4605      	mov	r5, r0
 8001480:	4630      	mov	r0, r6
 8001482:	f7ff fa57 	bl	8000934 <_malloc_r>
 8001486:	b948      	cbnz	r0, 800149c <__smakebuf_r+0x44>
 8001488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800148c:	059a      	lsls	r2, r3, #22
 800148e:	d4ef      	bmi.n	8001470 <__smakebuf_r+0x18>
 8001490:	f023 0303 	bic.w	r3, r3, #3
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	81a3      	strh	r3, [r4, #12]
 800149a:	e7e3      	b.n	8001464 <__smakebuf_r+0xc>
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <__smakebuf_r+0x7c>)
 800149e:	62b3      	str	r3, [r6, #40]	; 0x28
 80014a0:	89a3      	ldrh	r3, [r4, #12]
 80014a2:	6020      	str	r0, [r4, #0]
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	81a3      	strh	r3, [r4, #12]
 80014aa:	9b00      	ldr	r3, [sp, #0]
 80014ac:	6163      	str	r3, [r4, #20]
 80014ae:	9b01      	ldr	r3, [sp, #4]
 80014b0:	6120      	str	r0, [r4, #16]
 80014b2:	b15b      	cbz	r3, 80014cc <__smakebuf_r+0x74>
 80014b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014b8:	4630      	mov	r0, r6
 80014ba:	f000 f889 	bl	80015d0 <_isatty_r>
 80014be:	b128      	cbz	r0, 80014cc <__smakebuf_r+0x74>
 80014c0:	89a3      	ldrh	r3, [r4, #12]
 80014c2:	f023 0303 	bic.w	r3, r3, #3
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	81a3      	strh	r3, [r4, #12]
 80014cc:	89a0      	ldrh	r0, [r4, #12]
 80014ce:	4305      	orrs	r5, r0
 80014d0:	81a5      	strh	r5, [r4, #12]
 80014d2:	e7cd      	b.n	8001470 <__smakebuf_r+0x18>
 80014d4:	0800074d 	.word	0x0800074d

080014d8 <__malloc_lock>:
 80014d8:	4801      	ldr	r0, [pc, #4]	; (80014e0 <__malloc_lock+0x8>)
 80014da:	f7ff ba09 	b.w	80008f0 <__retarget_lock_acquire_recursive>
 80014de:	bf00      	nop
 80014e0:	200000ac 	.word	0x200000ac

080014e4 <__malloc_unlock>:
 80014e4:	4801      	ldr	r0, [pc, #4]	; (80014ec <__malloc_unlock+0x8>)
 80014e6:	f7ff ba04 	b.w	80008f2 <__retarget_lock_release_recursive>
 80014ea:	bf00      	nop
 80014ec:	200000ac 	.word	0x200000ac

080014f0 <_free_r>:
 80014f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014f2:	2900      	cmp	r1, #0
 80014f4:	d044      	beq.n	8001580 <_free_r+0x90>
 80014f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014fa:	9001      	str	r0, [sp, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f1a1 0404 	sub.w	r4, r1, #4
 8001502:	bfb8      	it	lt
 8001504:	18e4      	addlt	r4, r4, r3
 8001506:	f7ff ffe7 	bl	80014d8 <__malloc_lock>
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <_free_r+0x94>)
 800150c:	9801      	ldr	r0, [sp, #4]
 800150e:	6813      	ldr	r3, [r2, #0]
 8001510:	b933      	cbnz	r3, 8001520 <_free_r+0x30>
 8001512:	6063      	str	r3, [r4, #4]
 8001514:	6014      	str	r4, [r2, #0]
 8001516:	b003      	add	sp, #12
 8001518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800151c:	f7ff bfe2 	b.w	80014e4 <__malloc_unlock>
 8001520:	42a3      	cmp	r3, r4
 8001522:	d908      	bls.n	8001536 <_free_r+0x46>
 8001524:	6825      	ldr	r5, [r4, #0]
 8001526:	1961      	adds	r1, r4, r5
 8001528:	428b      	cmp	r3, r1
 800152a:	bf01      	itttt	eq
 800152c:	6819      	ldreq	r1, [r3, #0]
 800152e:	685b      	ldreq	r3, [r3, #4]
 8001530:	1949      	addeq	r1, r1, r5
 8001532:	6021      	streq	r1, [r4, #0]
 8001534:	e7ed      	b.n	8001512 <_free_r+0x22>
 8001536:	461a      	mov	r2, r3
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	b10b      	cbz	r3, 8001540 <_free_r+0x50>
 800153c:	42a3      	cmp	r3, r4
 800153e:	d9fa      	bls.n	8001536 <_free_r+0x46>
 8001540:	6811      	ldr	r1, [r2, #0]
 8001542:	1855      	adds	r5, r2, r1
 8001544:	42a5      	cmp	r5, r4
 8001546:	d10b      	bne.n	8001560 <_free_r+0x70>
 8001548:	6824      	ldr	r4, [r4, #0]
 800154a:	4421      	add	r1, r4
 800154c:	1854      	adds	r4, r2, r1
 800154e:	42a3      	cmp	r3, r4
 8001550:	6011      	str	r1, [r2, #0]
 8001552:	d1e0      	bne.n	8001516 <_free_r+0x26>
 8001554:	681c      	ldr	r4, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	6053      	str	r3, [r2, #4]
 800155a:	4421      	add	r1, r4
 800155c:	6011      	str	r1, [r2, #0]
 800155e:	e7da      	b.n	8001516 <_free_r+0x26>
 8001560:	d902      	bls.n	8001568 <_free_r+0x78>
 8001562:	230c      	movs	r3, #12
 8001564:	6003      	str	r3, [r0, #0]
 8001566:	e7d6      	b.n	8001516 <_free_r+0x26>
 8001568:	6825      	ldr	r5, [r4, #0]
 800156a:	1961      	adds	r1, r4, r5
 800156c:	428b      	cmp	r3, r1
 800156e:	bf04      	itt	eq
 8001570:	6819      	ldreq	r1, [r3, #0]
 8001572:	685b      	ldreq	r3, [r3, #4]
 8001574:	6063      	str	r3, [r4, #4]
 8001576:	bf04      	itt	eq
 8001578:	1949      	addeq	r1, r1, r5
 800157a:	6021      	streq	r1, [r4, #0]
 800157c:	6054      	str	r4, [r2, #4]
 800157e:	e7ca      	b.n	8001516 <_free_r+0x26>
 8001580:	b003      	add	sp, #12
 8001582:	bd30      	pop	{r4, r5, pc}
 8001584:	200000b0 	.word	0x200000b0

08001588 <_read_r>:
 8001588:	b538      	push	{r3, r4, r5, lr}
 800158a:	4d07      	ldr	r5, [pc, #28]	; (80015a8 <_read_r+0x20>)
 800158c:	4604      	mov	r4, r0
 800158e:	4608      	mov	r0, r1
 8001590:	4611      	mov	r1, r2
 8001592:	2200      	movs	r2, #0
 8001594:	602a      	str	r2, [r5, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	f7fe fe86 	bl	80002a8 <_read>
 800159c:	1c43      	adds	r3, r0, #1
 800159e:	d102      	bne.n	80015a6 <_read_r+0x1e>
 80015a0:	682b      	ldr	r3, [r5, #0]
 80015a2:	b103      	cbz	r3, 80015a6 <_read_r+0x1e>
 80015a4:	6023      	str	r3, [r4, #0]
 80015a6:	bd38      	pop	{r3, r4, r5, pc}
 80015a8:	200000b8 	.word	0x200000b8

080015ac <_fstat_r>:
 80015ac:	b538      	push	{r3, r4, r5, lr}
 80015ae:	4d07      	ldr	r5, [pc, #28]	; (80015cc <_fstat_r+0x20>)
 80015b0:	2300      	movs	r3, #0
 80015b2:	4604      	mov	r4, r0
 80015b4:	4608      	mov	r0, r1
 80015b6:	4611      	mov	r1, r2
 80015b8:	602b      	str	r3, [r5, #0]
 80015ba:	f7fe feba 	bl	8000332 <_fstat>
 80015be:	1c43      	adds	r3, r0, #1
 80015c0:	d102      	bne.n	80015c8 <_fstat_r+0x1c>
 80015c2:	682b      	ldr	r3, [r5, #0]
 80015c4:	b103      	cbz	r3, 80015c8 <_fstat_r+0x1c>
 80015c6:	6023      	str	r3, [r4, #0]
 80015c8:	bd38      	pop	{r3, r4, r5, pc}
 80015ca:	bf00      	nop
 80015cc:	200000b8 	.word	0x200000b8

080015d0 <_isatty_r>:
 80015d0:	b538      	push	{r3, r4, r5, lr}
 80015d2:	4d06      	ldr	r5, [pc, #24]	; (80015ec <_isatty_r+0x1c>)
 80015d4:	2300      	movs	r3, #0
 80015d6:	4604      	mov	r4, r0
 80015d8:	4608      	mov	r0, r1
 80015da:	602b      	str	r3, [r5, #0]
 80015dc:	f7fe feb9 	bl	8000352 <_isatty>
 80015e0:	1c43      	adds	r3, r0, #1
 80015e2:	d102      	bne.n	80015ea <_isatty_r+0x1a>
 80015e4:	682b      	ldr	r3, [r5, #0]
 80015e6:	b103      	cbz	r3, 80015ea <_isatty_r+0x1a>
 80015e8:	6023      	str	r3, [r4, #0]
 80015ea:	bd38      	pop	{r3, r4, r5, pc}
 80015ec:	200000b8 	.word	0x200000b8

080015f0 <_init>:
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	bf00      	nop
 80015f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015f6:	bc08      	pop	{r3}
 80015f8:	469e      	mov	lr, r3
 80015fa:	4770      	bx	lr

080015fc <_fini>:
 80015fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fe:	bf00      	nop
 8001600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001602:	bc08      	pop	{r3}
 8001604:	469e      	mov	lr, r3
 8001606:	4770      	bx	lr
