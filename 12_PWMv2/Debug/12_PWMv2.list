
12_PWMv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800057c  08000584  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800057c  0800057c  00010584  2**0
                  CONTENTS
  4 .ARM          00000000  0800057c  0800057c  00010584  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800057c  08000584  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800057c  0800057c  0001057c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000580  08000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010584  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010584  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000da0  00000000  00000000  000105b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000033a  00000000  00000000  00011354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00011690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000088  00000000  00000000  00011750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001060  00000000  00000000  000117d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001196  00000000  00000000  00012838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a24cc  00000000  00000000  000139ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b5e9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001b0  00000000  00000000  000b5eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000564 	.word	0x08000564

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000564 	.word	0x08000564

080001c8 <main>:

//void dummytimer(void);

int iAnalogValue;

int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	//Add delay between initialization and start of converion
	//dummytimer();

	//start_conversion();

	uart2_tx_init();
 80001ce:	f000 f8ff 	bl	80003d0 <uart2_tx_init>


	pwm();
 80001d2:	f000 f87b 	bl	80002cc <pwm>

	while(1){
		for(int i=0; i<10000000; i++)
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	e007      	b.n	80001ec <main+0x24>
			TIM2->CCR1	= 	((4000000/50)*40)/100; 	//4000	5% of 20ms
 80001dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80001e4:	635a      	str	r2, [r3, #52]	; 0x34
		for(int i=0; i<10000000; i++)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3301      	adds	r3, #1
 80001ea:	607b      	str	r3, [r7, #4]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4a09      	ldr	r2, [pc, #36]	; (8000214 <main+0x4c>)
 80001f0:	4293      	cmp	r3, r2
 80001f2:	dbf3      	blt.n	80001dc <main+0x14>
		for(int i=0; i<1000000; i++)
 80001f4:	2300      	movs	r3, #0
 80001f6:	603b      	str	r3, [r7, #0]
 80001f8:	e006      	b.n	8000208 <main+0x40>
			TIM2->CCR1	= 	((4000000/50)*0)/100; 	//4000	5% of 20ms
 80001fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001fe:	2200      	movs	r2, #0
 8000200:	635a      	str	r2, [r3, #52]	; 0x34
		for(int i=0; i<1000000; i++)
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	3301      	adds	r3, #1
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	4a03      	ldr	r2, [pc, #12]	; (8000218 <main+0x50>)
 800020c:	4293      	cmp	r3, r2
 800020e:	ddf4      	ble.n	80001fa <main+0x32>
		for(int i=0; i<10000000; i++)
 8000210:	e7e1      	b.n	80001d6 <main+0xe>
 8000212:	bf00      	nop
 8000214:	00989680 	.word	0x00989680
 8000218:	000f423f 	.word	0x000f423f

0800021c <initialize_GPIOE>:
#define TIM2EN				(1U<<0)															//Enable Timer 2 Clock Access
#define CR1_CEN				(1U<<0)																//Enable counter

#define GPIOEN				(1U<<4)																//Enable clock access to GPIO
#define FreqClock			4000000
void initialize_GPIOE(){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	//Configure PA0 as Alterative function
	GPIOA->MODER &=~	(1U<<0); //Coloca no pino 0 o valor 1 negado ou seja 0
 8000220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800022a:	f023 0301 	bic.w	r3, r3, #1
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=		(1U<<1);
 8000230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6013      	str	r3, [r2, #0]
	//Configure PA0 as push-pull
	GPIOA->OTYPER &=~	(1u<<0);
 8000240:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800024a:	f023 0301 	bic.w	r3, r3, #1
 800024e:	6053      	str	r3, [r2, #4]
	//Configure PA0 as very high speed
	GPIOA->OSPEEDR |=	(1U<<0);
 8000250:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=	(1U<<1);
 8000260:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026a:	f043 0302 	orr.w	r3, r3, #2
 800026e:	6093      	str	r3, [r2, #8]
	//Configure AF1 low register
	GPIOA->AFR[0]  |=	(1U<<0);
 8000270:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000274:	6a1b      	ldr	r3, [r3, #32]
 8000276:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~	(1U<<1);
 8000280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000284:	6a1b      	ldr	r3, [r3, #32]
 8000286:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800028a:	f023 0302 	bic.w	r3, r3, #2
 800028e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~	(1U<<2);
 8000290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000294:	6a1b      	ldr	r3, [r3, #32]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029a:	f023 0304 	bic.w	r3, r3, #4
 800029e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &=~	(1U<<3);
 80002a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a4:	6a1b      	ldr	r3, [r3, #32]
 80002a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002aa:	f023 0308 	bic.w	r3, r3, #8
 80002ae:	6213      	str	r3, [r2, #32]
	//Force diconnect imput to the adc
	GPIOA->ASCR	   &=~	(1U<<0);
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ba:	f023 0301 	bic.w	r3, r3, #1
 80002be:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
	...

080002cc <pwm>:
void pwm(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	initialize_GPIOE();
 80002d0:	f7ff ffa4 	bl	800021c <initialize_GPIOE>
	//Configure Clock 16Mhz
	//RCC->CFGR &=~ (1U<<10);

	//Enable APB2 Clock access to Timer 2
	RCC->APB1ENR1 |= TIM2EN;
 80002d4:	4b3c      	ldr	r3, [pc, #240]	; (80003c8 <pwm+0xfc>)
 80002d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002d8:	4a3b      	ldr	r2, [pc, #236]	; (80003c8 <pwm+0xfc>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6593      	str	r3, [r2, #88]	; 0x58
	//Maintain 4Mhz of clock so prescale is 1
	TIM2->PSC	=	2-1;	//TIM2->PSC	=	9999;
 80002e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e4:	2201      	movs	r2, #1
 80002e6:	629a      	str	r2, [r3, #40]	; 0x28
	//Frequency determined by TIMx_ARR
	//IM2->ARR 	= 	FreqClock/50;	//4MHz/50Hz		//TIM2->ARR 	= 	7;
	TIM2->ARR 	= 	80000;	//4MHz/50Hz		//TIM2->ARR 	= 	7;
 80002e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ec:	4a37      	ldr	r2, [pc, #220]	; (80003cc <pwm+0x100>)
 80002ee:	62da      	str	r2, [r3, #44]	; 0x2c

	//Timer count
	TIM2->CNT	=	0;
 80002f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f4:	2200      	movs	r2, #0
 80002f6:	625a      	str	r2, [r3, #36]	; 0x24
	//Duty cycle determined by TIMx_CCRx [4000;8000] [1ms;2ms]
	TIM2->CCR1	= 	((FreqClock/50)*20)/100; 	//4000	5% of 20ms
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000300:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1	= 	((FreqClock/50)*10)/100;	//80000; 10% of 20ms

	//PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1 else inactive
	TIM2->CCMR1	&=~	(1U<<4);
 8000302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800030c:	f023 0310 	bic.w	r3, r3, #16
 8000310:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1	|=	(1U<<5);
 8000312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031c:	f043 0320 	orr.w	r3, r3, #32
 8000320:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1	|=	(1U<<6);
 8000322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800032c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000330:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1	&=~	(1U<<16);
 8000332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800033c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000340:	6193      	str	r3, [r2, #24]

	//DIR -> 0: Counter used as upcounter
	TIM2->CR1	&=~ (1<<4);
 8000342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034c:	f023 0310 	bic.w	r3, r3, #16
 8000350:	6013      	str	r3, [r2, #0]
	//TIMx_ARR register is not buffered
	TIM2->CR1	&=~	(1U<<7);
 8000352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800035c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000360:	6013      	str	r3, [r2, #0]

	//UG-> Update generation 1: Re-initialize the counter and generates an update of the registers
	TIM2->EGR	|= 	(1U<<0);
 8000362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6153      	str	r3, [r2, #20]

	//CC1P: Capture/Compare 1 output Polarity. 0: OC1 active high (output mode)
	TIM2->CCER	&=~	(1U<<1);
 8000372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000376:	6a1b      	ldr	r3, [r3, #32]
 8000378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800037c:	f023 0302 	bic.w	r3, r3, #2
 8000380:	6213      	str	r3, [r2, #32]
	//CC1E: Capture/Compare 1 output enable. 0: Capture mode disabled
	TIM2->CCER	|=	(1U<<0);
 8000382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000386:	6a1b      	ldr	r3, [r3, #32]
 8000388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6213      	str	r3, [r2, #32]

	//CMS[1:0]: Center-aligned mode selection. 00: Edge-aligned mode
	TIM2->CR1	&=~	(1U<<5);
 8000392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800039c:	f023 0320 	bic.w	r3, r3, #32
 80003a0:	6013      	str	r3, [r2, #0]
	TIM2->CR1	&=~	(1U<<6);
 80003a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003b0:	6013      	str	r3, [r2, #0]
	//Enable Timer 2
	TIM2->CR1	|=	(1U<<0);
 80003b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6013      	str	r3, [r2, #0]

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	00013880 	.word	0x00013880

080003d0 <uart2_tx_init>:

/*MAKE GENERIC VERSION OF THIS FUNCTION IN ORDER TO RECEIVE ANY USART*/

/*Replace USART2 as USARTx, and Pass it as argument to the function*/
void uart2_tx_init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	/***********************Configure UART pin***************************/
	/*	Enable clock access to GPIOA for PA2 as TX line					*/
	RCC->AHB2ENR|= GPIOAEN;
 80003d4:	4b26      	ldr	r3, [pc, #152]	; (8000470 <uart2_tx_init+0xa0>)
 80003d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d8:	4a25      	ldr	r2, [pc, #148]	; (8000470 <uart2_tx_init+0xa0>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	64d3      	str	r3, [r2, #76]	; 0x4c
	/*	Set PA2 Mode as alternate function mode							*/
	GPIOA->MODER &=~ (1U<<4);
 80003e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ea:	f023 0310 	bic.w	r3, r3, #16
 80003ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80003f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6013      	str	r3, [r2, #0]

	/*	Set the alternate function typed to UART						*/
	GPIOA->AFR[0] |=(1U<<8);
 8000400:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000404:	6a1b      	ldr	r3, [r3, #32]
 8000406:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800040a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800040e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000410:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000414:	6a1b      	ldr	r3, [r3, #32]
 8000416:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800041a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000420:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000424:	6a1b      	ldr	r3, [r3, #32]
 8000426:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800042a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800042e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000430:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000434:	6a1b      	ldr	r3, [r3, #32]
 8000436:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800043a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800043e:	6213      	str	r3, [r2, #32]
	/********************************************************************/

	/********************Configure the UART module***********************/
	/*	Enable clock access to UART2									*/
	RCC->APB1ENR1	|= USART2EN;
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <uart2_tx_init+0xa0>)
 8000442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000444:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <uart2_tx_init+0xa0>)
 8000446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800044a:	6593      	str	r3, [r2, #88]	; 0x58
	/*	Configure baudrate												*/
	uart_set_baudrate(USART2, APB1_CLK, 115200);
 800044c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000450:	4908      	ldr	r1, [pc, #32]	; (8000474 <uart2_tx_init+0xa4>)
 8000452:	4809      	ldr	r0, [pc, #36]	; (8000478 <uart2_tx_init+0xa8>)
 8000454:	f000 f812 	bl	800047c <uart_set_baudrate>
	/*	Configure transfer direction									*/
	USART2->CR1 = CR1_TE;												//Important to use '=' instead of '|=' operator, in order to clean everything
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <uart2_tx_init+0xa8>)
 800045a:	2208      	movs	r2, #8
 800045c:	601a      	str	r2, [r3, #0]
																		//and set the othes configs of to it's default values
	/*	Enable UART module												*/
	USART2->CR1	|= CR1_UE;												//Enables the UART module
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <uart2_tx_init+0xa8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a05      	ldr	r2, [pc, #20]	; (8000478 <uart2_tx_init+0xa8>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6013      	str	r3, [r2, #0]
	/********************************************************************/


}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	003d0900 	.word	0x003d0900
 8000478:	40004400 	.word	0x40004400

0800047c <uart_set_baudrate>:
	/*TDR - Transmitter Data Register it's equal to the character we want to send*/
	USARTx->TDR = (ch & 0xFF);											// & 0xFF makes sure that 8 bits are transmitted
	}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PreiphClk, uint32_t BaudRate)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PreiphClk, BaudRate);
 8000488:	6879      	ldr	r1, [r7, #4]
 800048a:	68b8      	ldr	r0, [r7, #8]
 800048c:	f000 f808 	bl	80004a0 <compute_uart_div>
 8000490:	4603      	mov	r3, r0
 8000492:	461a      	mov	r2, r3
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	60da      	str	r2, [r3, #12]
	}
 8000498:	bf00      	nop
 800049a:	3710      	adds	r7, #16
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PreiphClk, uint32_t BaudRate)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
	return ((PreiphClk + (BaudRate/2))/BaudRate);
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	085a      	lsrs	r2, r3, #1
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	441a      	add	r2, r3
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b8:	b29b      	uxth	r3, r3
	}
 80004ba:	4618      	mov	r0, r3
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c8:	480d      	ldr	r0, [pc, #52]	; (8000500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <LoopForever+0x6>)
  ldr r1, =_edata
 80004d2:	490d      	ldr	r1, [pc, #52]	; (8000508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <LoopForever+0xe>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d8:	e002      	b.n	80004e0 <LoopCopyDataInit>

080004da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004de:	3304      	adds	r3, #4

080004e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e4:	d3f9      	bcc.n	80004da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e8:	4c0a      	ldr	r4, [pc, #40]	; (8000514 <LoopForever+0x16>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ec:	e001      	b.n	80004f2 <LoopFillZerobss>

080004ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f0:	3204      	adds	r2, #4

080004f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f4:	d3fb      	bcc.n	80004ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f6:	f000 f811 	bl	800051c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fa:	f7ff fe65 	bl	80001c8 <main>

080004fe <LoopForever>:

LoopForever:
    b LoopForever
 80004fe:	e7fe      	b.n	80004fe <LoopForever>
  ldr   r0, =_estack
 8000500:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800050c:	08000584 	.word	0x08000584
  ldr r2, =_sbss
 8000510:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000514:	2000001c 	.word	0x2000001c

08000518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_2_IRQHandler>
	...

0800051c <__libc_init_array>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	4d0d      	ldr	r5, [pc, #52]	; (8000554 <__libc_init_array+0x38>)
 8000520:	4c0d      	ldr	r4, [pc, #52]	; (8000558 <__libc_init_array+0x3c>)
 8000522:	1b64      	subs	r4, r4, r5
 8000524:	10a4      	asrs	r4, r4, #2
 8000526:	2600      	movs	r6, #0
 8000528:	42a6      	cmp	r6, r4
 800052a:	d109      	bne.n	8000540 <__libc_init_array+0x24>
 800052c:	4d0b      	ldr	r5, [pc, #44]	; (800055c <__libc_init_array+0x40>)
 800052e:	4c0c      	ldr	r4, [pc, #48]	; (8000560 <__libc_init_array+0x44>)
 8000530:	f000 f818 	bl	8000564 <_init>
 8000534:	1b64      	subs	r4, r4, r5
 8000536:	10a4      	asrs	r4, r4, #2
 8000538:	2600      	movs	r6, #0
 800053a:	42a6      	cmp	r6, r4
 800053c:	d105      	bne.n	800054a <__libc_init_array+0x2e>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	f855 3b04 	ldr.w	r3, [r5], #4
 8000544:	4798      	blx	r3
 8000546:	3601      	adds	r6, #1
 8000548:	e7ee      	b.n	8000528 <__libc_init_array+0xc>
 800054a:	f855 3b04 	ldr.w	r3, [r5], #4
 800054e:	4798      	blx	r3
 8000550:	3601      	adds	r6, #1
 8000552:	e7f2      	b.n	800053a <__libc_init_array+0x1e>
 8000554:	0800057c 	.word	0x0800057c
 8000558:	0800057c 	.word	0x0800057c
 800055c:	0800057c 	.word	0x0800057c
 8000560:	08000580 	.word	0x08000580

08000564 <_init>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr

08000570 <_fini>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr
