
11_SystickTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001414  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080015a4  080015a4  000115a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001650  08001650  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001650  08001650  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001650  08001650  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001650  08001650  00011650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001654  08001654  00011654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000034  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000166b  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000068a  00000000  00000000  000216ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00021d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000148  00000000  00000000  00021f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e38d  00000000  00000000  00022088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000022f8  00000000  00000000  00040415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3dc1  00000000  00000000  0004270d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e64ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ce4  00000000  00000000  000e6520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800158c 	.word	0x0800158c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	0800158c 	.word	0x0800158c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <adc_read>:
	ADC1->CR	|=	(1U<<2);

	}

uint32_t adc_read(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	//Wait for end-of-conversion flag by reading the EOC flag. Using the AND operation against the bit we want
	//to read, this operation will return 1 in case of bit number 2 in the ADC1->CR is set to 1 and will return zero if not.
	//So, while the operation does not return 1, we wait
	while(!(ADC1->ISR & ISR_EOC)){}
 8000274:	bf00      	nop
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <adc_read+0x2c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 0304 	and.w	r3, r3, #4
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0f9      	beq.n	8000276 <adc_read+0x6>

	//Clear the End of conversion flag
	ADC1->ISR	|= ISR_EOC;
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <adc_read+0x2c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a05      	ldr	r2, [pc, #20]	; (800029c <adc_read+0x2c>)
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	6013      	str	r3, [r2, #0]
	//Returns the data converted, stored at the data register
	return (ADC1->DR);
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <adc_read+0x2c>)
 8000290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	}
 8000292:	4618      	mov	r0, r3
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	50040000 	.word	0x50040000

080002a0 <main>:

//void dummytimer(void);

int iAnalogValue;

int main(void){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	//Add delay between initialization and start of converion
	//dummytimer();

	//start_conversion();

	uart2_tx_init();
 80002a4:	f000 f8f6 	bl	8000494 <uart2_tx_init>



	while(1){

		iSystickDelayMs(1000);
 80002a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ac:	f000 f8b6 	bl	800041c <iSystickDelayMs>
		iAnalogValue = adc_read();
 80002b0:	f7ff ffde 	bl	8000270 <adc_read>
 80002b4:	4603      	mov	r3, r0
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <main+0x2c>)
 80002ba:	601a      	str	r2, [r3, #0]
		printf("Analog Value: %d\n\r", iAnalogValue);
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <main+0x2c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4619      	mov	r1, r3
 80002c2:	4803      	ldr	r0, [pc, #12]	; (80002d0 <main+0x30>)
 80002c4:	f000 f9d4 	bl	8000670 <iprintf>
		iSystickDelayMs(1000);
 80002c8:	e7ee      	b.n	80002a8 <main+0x8>
 80002ca:	bf00      	nop
 80002cc:	20000080 	.word	0x20000080
 80002d0:	080015a4 	.word	0x080015a4

080002d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	e00a      	b.n	80002fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002e6:	f3af 8000 	nop.w
 80002ea:	4601      	mov	r1, r0
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	1c5a      	adds	r2, r3, #1
 80002f0:	60ba      	str	r2, [r7, #8]
 80002f2:	b2ca      	uxtb	r2, r1
 80002f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	3301      	adds	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
 80002fc:	697a      	ldr	r2, [r7, #20]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	429a      	cmp	r2, r3
 8000302:	dbf0      	blt.n	80002e6 <_read+0x12>
	}

return len;
 8000304:	687b      	ldr	r3, [r7, #4]
}
 8000306:	4618      	mov	r0, r3
 8000308:	3718      	adds	r7, #24
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b086      	sub	sp, #24
 8000312:	af00      	add	r7, sp, #0
 8000314:	60f8      	str	r0, [r7, #12]
 8000316:	60b9      	str	r1, [r7, #8]
 8000318:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
 800031e:	e009      	b.n	8000334 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	60ba      	str	r2, [r7, #8]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f8a1 	bl	8000470 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	3301      	adds	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
 8000334:	697a      	ldr	r2, [r7, #20]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	dbf1      	blt.n	8000320 <_write+0x12>
	}
	return len;
 800033c:	687b      	ldr	r3, [r7, #4]
}
 800033e:	4618      	mov	r0, r3
 8000340:	3718      	adds	r7, #24
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <_close>:

int _close(int file)
{
 8000346:	b480      	push	{r7}
 8000348:	b083      	sub	sp, #12
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
	return -1;
 800034e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000352:	4618      	mov	r0, r3
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800035e:	b480      	push	{r7}
 8000360:	b083      	sub	sp, #12
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800036e:	605a      	str	r2, [r3, #4]
	return 0;
 8000370:	2300      	movs	r3, #0
}
 8000372:	4618      	mov	r0, r3
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr

0800037e <_isatty>:

int _isatty(int file)
{
 800037e:	b480      	push	{r7}
 8000380:	b083      	sub	sp, #12
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
	return 1;
 8000386:	2301      	movs	r3, #1
}
 8000388:	4618      	mov	r0, r3
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
	return 0;
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
	...

080003b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003b8:	4a14      	ldr	r2, [pc, #80]	; (800040c <_sbrk+0x5c>)
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <_sbrk+0x60>)
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <_sbrk+0x64>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d102      	bne.n	80003d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <_sbrk+0x64>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <_sbrk+0x68>)
 80003d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <_sbrk+0x64>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	693a      	ldr	r2, [r7, #16]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d207      	bcs.n	80003f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e0:	f000 f914 	bl	800060c <__errno>
 80003e4:	4603      	mov	r3, r0
 80003e6:	220c      	movs	r2, #12
 80003e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003ee:	e009      	b.n	8000404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <_sbrk+0x64>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <_sbrk+0x64>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	4a05      	ldr	r2, [pc, #20]	; (8000414 <_sbrk+0x64>)
 8000400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20018000 	.word	0x20018000
 8000410:	00000400 	.word	0x00000400
 8000414:	20000084 	.word	0x20000084
 8000418:	20000098 	.word	0x20000098

0800041c <iSystickDelayMs>:
#define CTRL_CLKSRC				(1U<<2)							//Defines if clock source is internal or external to the processor
#define CTRL_COUNTFLAG			(1U<<16)						//Bit witch returns 1 if timer counted to 0 since last time this was read.



void iSystickDelayMs(int delay){
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]

	/*Reload the systick with the number of cycles per milliseconds*/
	SysTick->LOAD = SYSTICK_LOAD_VALUE;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <iSystickDelayMs+0x50>)
 8000426:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800042a:	605a      	str	r2, [r3, #4]
	/*Clear the systick current value register*/
	SysTick->VAL = 0;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <iSystickDelayMs+0x50>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
	/*Select the clock source and enable systick*/
	SysTick->CTRL = CTRL_CLKSRC | CTRL_ENABLE;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <iSystickDelayMs+0x50>)
 8000434:	2205      	movs	r2, #5
 8000436:	601a      	str	r2, [r3, #0]

	/*creating the delay function it self*/

	for(int i=0; i<delay; i++){
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	e009      	b.n	8000452 <iSystickDelayMs+0x36>
		/*Wait until COUNTFLAG is set*/
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0){}		//reads the count flag, if it is equal to zero
 800043e:	bf00      	nop
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <iSystickDelayMs+0x50>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0f9      	beq.n	8000440 <iSystickDelayMs+0x24>
	for(int i=0; i<delay; i++){
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3301      	adds	r3, #1
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	429a      	cmp	r2, r3
 8000458:	dbf1      	blt.n	800043e <iSystickDelayMs+0x22>



	}
	//Resets the SysTick Control and Status Register
	SysTick->CTRL = 0;
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <iSystickDelayMs+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]

	// do this until all the milliseconds passed to the function has elapsed
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	e000e010 	.word	0xe000e010

08000470 <__io_putchar>:
static uint16_t compute_uart_div(uint32_t PreiphClk, uint32_t BaudRate); 						//Function prototype for computing the Baudrate value
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PreiphClk, uint32_t BaudRate);	//Prototype function for the BaudRate Register configuration
static void uart2_write(USART_TypeDef *USARTx,uint8_t ch);										//Prototype for the Transmit data function

int __io_putchar(int ch)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	uart2_write(USART2, ch);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	b2db      	uxtb	r3, r3
 800047c:	4619      	mov	r1, r3
 800047e:	4804      	ldr	r0, [pc, #16]	; (8000490 <__io_putchar+0x20>)
 8000480:	f000 f85e 	bl	8000540 <uart2_write>
	return ch;
 8000484:	687b      	ldr	r3, [r7, #4]
	}
 8000486:	4618      	mov	r0, r3
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40004400 	.word	0x40004400

08000494 <uart2_tx_init>:

/*MAKE GENERIC VERSION OF THIS FUNCTION IN ORDER TO RECEIVE ANY USART*/

/*Replace USART2 as USARTx, and Pass it as argument to the function*/
void uart2_tx_init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	/***********************Configure UART pin***************************/
	/*	Enable clock access to GPIOA for PA2 as TX line					*/
	RCC->AHB2ENR|= GPIOAEN;
 8000498:	4b26      	ldr	r3, [pc, #152]	; (8000534 <uart2_tx_init+0xa0>)
 800049a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049c:	4a25      	ldr	r2, [pc, #148]	; (8000534 <uart2_tx_init+0xa0>)
 800049e:	f043 0301 	orr.w	r3, r3, #1
 80004a2:	64d3      	str	r3, [r2, #76]	; 0x4c
	/*	Set PA2 Mode as alternate function mode							*/
	GPIOA->MODER &=~ (1U<<4);
 80004a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ae:	f023 0310 	bic.w	r3, r3, #16
 80004b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004be:	f043 0320 	orr.w	r3, r3, #32
 80004c2:	6013      	str	r3, [r2, #0]

	/*	Set the alternate function typed to UART						*/
	GPIOA->AFR[0] |=(1U<<8);
 80004c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c8:	6a1b      	ldr	r3, [r3, #32]
 80004ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80004d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d8:	6a1b      	ldr	r3, [r3, #32]
 80004da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80004e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e8:	6a1b      	ldr	r3, [r3, #32]
 80004ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80004f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004f8:	6a1b      	ldr	r3, [r3, #32]
 80004fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000502:	6213      	str	r3, [r2, #32]
	/********************************************************************/

	/********************Configure the UART module***********************/
	/*	Enable clock access to UART2									*/
	RCC->APB1ENR1	|= USART2EN;
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <uart2_tx_init+0xa0>)
 8000506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <uart2_tx_init+0xa0>)
 800050a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800050e:	6593      	str	r3, [r2, #88]	; 0x58
	/*	Configure baudrate												*/
	uart_set_baudrate(USART2, APB1_CLK, 115200);
 8000510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000514:	4908      	ldr	r1, [pc, #32]	; (8000538 <uart2_tx_init+0xa4>)
 8000516:	4809      	ldr	r0, [pc, #36]	; (800053c <uart2_tx_init+0xa8>)
 8000518:	f000 f829 	bl	800056e <uart_set_baudrate>
	/*	Configure transfer direction									*/
	USART2->CR1 = CR1_TE;												//Important to use '=' instead of '|=' operator, in order to clean everything
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <uart2_tx_init+0xa8>)
 800051e:	2208      	movs	r2, #8
 8000520:	601a      	str	r2, [r3, #0]
																		//and set the othes configs of to it's default values
	/*	Enable UART module												*/
	USART2->CR1	|= CR1_UE;												//Enables the UART module
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <uart2_tx_init+0xa8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <uart2_tx_init+0xa8>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6013      	str	r3, [r2, #0]
	/********************************************************************/


}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000
 8000538:	003d0900 	.word	0x003d0900
 800053c:	40004400 	.word	0x40004400

08000540 <uart2_write>:
	/*Read content of receive data register*/
	return USARTx->RDR;
	}

static void uart2_write(USART_TypeDef *USARTx,uint8_t ch)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]
	/*Reading a register - Perform a 'and' operation against the register and the bit we want to read*/
	while(!(USARTx->ISR & ISR_TXE))																//Wait for transmit data register to be empty
 800054c:	bf00      	nop
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f9      	beq.n	800054e <uart2_write+0xe>
	{
		//wait
	}
	/*TDR - Transmitter Data Register it's equal to the character we want to send*/
	USARTx->TDR = (ch & 0xFF);											// & 0xFF makes sure that 8 bits are transmitted
 800055a:	78fb      	ldrb	r3, [r7, #3]
 800055c:	b29a      	uxth	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	851a      	strh	r2, [r3, #40]	; 0x28
	}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PreiphClk, uint32_t BaudRate)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	60f8      	str	r0, [r7, #12]
 8000576:	60b9      	str	r1, [r7, #8]
 8000578:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PreiphClk, BaudRate);
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	68b8      	ldr	r0, [r7, #8]
 800057e:	f000 f808 	bl	8000592 <compute_uart_div>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	60da      	str	r2, [r3, #12]
	}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PreiphClk, uint32_t BaudRate)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
	return ((PreiphClk + (BaudRate/2))/BaudRate);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	085a      	lsrs	r2, r3, #1
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	441a      	add	r2, r3
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005aa:	b29b      	uxth	r3, r3
	}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c2:	490d      	ldr	r1, [pc, #52]	; (80005f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <LoopForever+0xe>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d8:	4c0a      	ldr	r4, [pc, #40]	; (8000604 <LoopForever+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005e6:	f000 f817 	bl	8000618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff fe59 	bl	80002a0 <main>

080005ee <LoopForever>:

LoopForever:
    b LoopForever
 80005ee:	e7fe      	b.n	80005ee <LoopForever>
  ldr   r0, =_estack
 80005f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005fc:	08001658 	.word	0x08001658
  ldr r2, =_sbss
 8000600:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000604:	20000098 	.word	0x20000098

08000608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC1_2_IRQHandler>
	...

0800060c <__errno>:
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <__errno+0x8>)
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000000 	.word	0x20000000

08000618 <__libc_init_array>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	4d0d      	ldr	r5, [pc, #52]	; (8000650 <__libc_init_array+0x38>)
 800061c:	4c0d      	ldr	r4, [pc, #52]	; (8000654 <__libc_init_array+0x3c>)
 800061e:	1b64      	subs	r4, r4, r5
 8000620:	10a4      	asrs	r4, r4, #2
 8000622:	2600      	movs	r6, #0
 8000624:	42a6      	cmp	r6, r4
 8000626:	d109      	bne.n	800063c <__libc_init_array+0x24>
 8000628:	4d0b      	ldr	r5, [pc, #44]	; (8000658 <__libc_init_array+0x40>)
 800062a:	4c0c      	ldr	r4, [pc, #48]	; (800065c <__libc_init_array+0x44>)
 800062c:	f000 ffae 	bl	800158c <_init>
 8000630:	1b64      	subs	r4, r4, r5
 8000632:	10a4      	asrs	r4, r4, #2
 8000634:	2600      	movs	r6, #0
 8000636:	42a6      	cmp	r6, r4
 8000638:	d105      	bne.n	8000646 <__libc_init_array+0x2e>
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000640:	4798      	blx	r3
 8000642:	3601      	adds	r6, #1
 8000644:	e7ee      	b.n	8000624 <__libc_init_array+0xc>
 8000646:	f855 3b04 	ldr.w	r3, [r5], #4
 800064a:	4798      	blx	r3
 800064c:	3601      	adds	r6, #1
 800064e:	e7f2      	b.n	8000636 <__libc_init_array+0x1e>
 8000650:	08001650 	.word	0x08001650
 8000654:	08001650 	.word	0x08001650
 8000658:	08001650 	.word	0x08001650
 800065c:	08001654 	.word	0x08001654

08000660 <memset>:
 8000660:	4402      	add	r2, r0
 8000662:	4603      	mov	r3, r0
 8000664:	4293      	cmp	r3, r2
 8000666:	d100      	bne.n	800066a <memset+0xa>
 8000668:	4770      	bx	lr
 800066a:	f803 1b01 	strb.w	r1, [r3], #1
 800066e:	e7f9      	b.n	8000664 <memset+0x4>

08000670 <iprintf>:
 8000670:	b40f      	push	{r0, r1, r2, r3}
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <iprintf+0x2c>)
 8000674:	b513      	push	{r0, r1, r4, lr}
 8000676:	681c      	ldr	r4, [r3, #0]
 8000678:	b124      	cbz	r4, 8000684 <iprintf+0x14>
 800067a:	69a3      	ldr	r3, [r4, #24]
 800067c:	b913      	cbnz	r3, 8000684 <iprintf+0x14>
 800067e:	4620      	mov	r0, r4
 8000680:	f000 f866 	bl	8000750 <__sinit>
 8000684:	ab05      	add	r3, sp, #20
 8000686:	9a04      	ldr	r2, [sp, #16]
 8000688:	68a1      	ldr	r1, [r4, #8]
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	4620      	mov	r0, r4
 800068e:	f000 f9bd 	bl	8000a0c <_vfiprintf_r>
 8000692:	b002      	add	sp, #8
 8000694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000698:	b004      	add	sp, #16
 800069a:	4770      	bx	lr
 800069c:	20000000 	.word	0x20000000

080006a0 <std>:
 80006a0:	2300      	movs	r3, #0
 80006a2:	b510      	push	{r4, lr}
 80006a4:	4604      	mov	r4, r0
 80006a6:	e9c0 3300 	strd	r3, r3, [r0]
 80006aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006ae:	6083      	str	r3, [r0, #8]
 80006b0:	8181      	strh	r1, [r0, #12]
 80006b2:	6643      	str	r3, [r0, #100]	; 0x64
 80006b4:	81c2      	strh	r2, [r0, #14]
 80006b6:	6183      	str	r3, [r0, #24]
 80006b8:	4619      	mov	r1, r3
 80006ba:	2208      	movs	r2, #8
 80006bc:	305c      	adds	r0, #92	; 0x5c
 80006be:	f7ff ffcf 	bl	8000660 <memset>
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <std+0x38>)
 80006c4:	6263      	str	r3, [r4, #36]	; 0x24
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <std+0x3c>)
 80006c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <std+0x40>)
 80006cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <std+0x44>)
 80006d0:	6224      	str	r4, [r4, #32]
 80006d2:	6323      	str	r3, [r4, #48]	; 0x30
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	bf00      	nop
 80006d8:	08000fb5 	.word	0x08000fb5
 80006dc:	08000fd7 	.word	0x08000fd7
 80006e0:	0800100f 	.word	0x0800100f
 80006e4:	08001033 	.word	0x08001033

080006e8 <_cleanup_r>:
 80006e8:	4901      	ldr	r1, [pc, #4]	; (80006f0 <_cleanup_r+0x8>)
 80006ea:	f000 b8af 	b.w	800084c <_fwalk_reent>
 80006ee:	bf00      	nop
 80006f0:	0800130d 	.word	0x0800130d

080006f4 <__sfmoreglue>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	2268      	movs	r2, #104	; 0x68
 80006f8:	1e4d      	subs	r5, r1, #1
 80006fa:	4355      	muls	r5, r2
 80006fc:	460e      	mov	r6, r1
 80006fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000702:	f000 f8e5 	bl	80008d0 <_malloc_r>
 8000706:	4604      	mov	r4, r0
 8000708:	b140      	cbz	r0, 800071c <__sfmoreglue+0x28>
 800070a:	2100      	movs	r1, #0
 800070c:	e9c0 1600 	strd	r1, r6, [r0]
 8000710:	300c      	adds	r0, #12
 8000712:	60a0      	str	r0, [r4, #8]
 8000714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000718:	f7ff ffa2 	bl	8000660 <memset>
 800071c:	4620      	mov	r0, r4
 800071e:	bd70      	pop	{r4, r5, r6, pc}

08000720 <__sfp_lock_acquire>:
 8000720:	4801      	ldr	r0, [pc, #4]	; (8000728 <__sfp_lock_acquire+0x8>)
 8000722:	f000 b8b3 	b.w	800088c <__retarget_lock_acquire_recursive>
 8000726:	bf00      	nop
 8000728:	20000089 	.word	0x20000089

0800072c <__sfp_lock_release>:
 800072c:	4801      	ldr	r0, [pc, #4]	; (8000734 <__sfp_lock_release+0x8>)
 800072e:	f000 b8ae 	b.w	800088e <__retarget_lock_release_recursive>
 8000732:	bf00      	nop
 8000734:	20000089 	.word	0x20000089

08000738 <__sinit_lock_acquire>:
 8000738:	4801      	ldr	r0, [pc, #4]	; (8000740 <__sinit_lock_acquire+0x8>)
 800073a:	f000 b8a7 	b.w	800088c <__retarget_lock_acquire_recursive>
 800073e:	bf00      	nop
 8000740:	2000008a 	.word	0x2000008a

08000744 <__sinit_lock_release>:
 8000744:	4801      	ldr	r0, [pc, #4]	; (800074c <__sinit_lock_release+0x8>)
 8000746:	f000 b8a2 	b.w	800088e <__retarget_lock_release_recursive>
 800074a:	bf00      	nop
 800074c:	2000008a 	.word	0x2000008a

08000750 <__sinit>:
 8000750:	b510      	push	{r4, lr}
 8000752:	4604      	mov	r4, r0
 8000754:	f7ff fff0 	bl	8000738 <__sinit_lock_acquire>
 8000758:	69a3      	ldr	r3, [r4, #24]
 800075a:	b11b      	cbz	r3, 8000764 <__sinit+0x14>
 800075c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000760:	f7ff bff0 	b.w	8000744 <__sinit_lock_release>
 8000764:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000768:	6523      	str	r3, [r4, #80]	; 0x50
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <__sinit+0x68>)
 800076c:	4a13      	ldr	r2, [pc, #76]	; (80007bc <__sinit+0x6c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	62a2      	str	r2, [r4, #40]	; 0x28
 8000772:	42a3      	cmp	r3, r4
 8000774:	bf04      	itt	eq
 8000776:	2301      	moveq	r3, #1
 8000778:	61a3      	streq	r3, [r4, #24]
 800077a:	4620      	mov	r0, r4
 800077c:	f000 f820 	bl	80007c0 <__sfp>
 8000780:	6060      	str	r0, [r4, #4]
 8000782:	4620      	mov	r0, r4
 8000784:	f000 f81c 	bl	80007c0 <__sfp>
 8000788:	60a0      	str	r0, [r4, #8]
 800078a:	4620      	mov	r0, r4
 800078c:	f000 f818 	bl	80007c0 <__sfp>
 8000790:	2200      	movs	r2, #0
 8000792:	60e0      	str	r0, [r4, #12]
 8000794:	2104      	movs	r1, #4
 8000796:	6860      	ldr	r0, [r4, #4]
 8000798:	f7ff ff82 	bl	80006a0 <std>
 800079c:	68a0      	ldr	r0, [r4, #8]
 800079e:	2201      	movs	r2, #1
 80007a0:	2109      	movs	r1, #9
 80007a2:	f7ff ff7d 	bl	80006a0 <std>
 80007a6:	68e0      	ldr	r0, [r4, #12]
 80007a8:	2202      	movs	r2, #2
 80007aa:	2112      	movs	r1, #18
 80007ac:	f7ff ff78 	bl	80006a0 <std>
 80007b0:	2301      	movs	r3, #1
 80007b2:	61a3      	str	r3, [r4, #24]
 80007b4:	e7d2      	b.n	800075c <__sinit+0xc>
 80007b6:	bf00      	nop
 80007b8:	080015b8 	.word	0x080015b8
 80007bc:	080006e9 	.word	0x080006e9

080007c0 <__sfp>:
 80007c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c2:	4607      	mov	r7, r0
 80007c4:	f7ff ffac 	bl	8000720 <__sfp_lock_acquire>
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <__sfp+0x84>)
 80007ca:	681e      	ldr	r6, [r3, #0]
 80007cc:	69b3      	ldr	r3, [r6, #24]
 80007ce:	b913      	cbnz	r3, 80007d6 <__sfp+0x16>
 80007d0:	4630      	mov	r0, r6
 80007d2:	f7ff ffbd 	bl	8000750 <__sinit>
 80007d6:	3648      	adds	r6, #72	; 0x48
 80007d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80007dc:	3b01      	subs	r3, #1
 80007de:	d503      	bpl.n	80007e8 <__sfp+0x28>
 80007e0:	6833      	ldr	r3, [r6, #0]
 80007e2:	b30b      	cbz	r3, 8000828 <__sfp+0x68>
 80007e4:	6836      	ldr	r6, [r6, #0]
 80007e6:	e7f7      	b.n	80007d8 <__sfp+0x18>
 80007e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80007ec:	b9d5      	cbnz	r5, 8000824 <__sfp+0x64>
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <__sfp+0x88>)
 80007f0:	60e3      	str	r3, [r4, #12]
 80007f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007f6:	6665      	str	r5, [r4, #100]	; 0x64
 80007f8:	f000 f847 	bl	800088a <__retarget_lock_init_recursive>
 80007fc:	f7ff ff96 	bl	800072c <__sfp_lock_release>
 8000800:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000804:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000808:	6025      	str	r5, [r4, #0]
 800080a:	61a5      	str	r5, [r4, #24]
 800080c:	2208      	movs	r2, #8
 800080e:	4629      	mov	r1, r5
 8000810:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000814:	f7ff ff24 	bl	8000660 <memset>
 8000818:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800081c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000820:	4620      	mov	r0, r4
 8000822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000824:	3468      	adds	r4, #104	; 0x68
 8000826:	e7d9      	b.n	80007dc <__sfp+0x1c>
 8000828:	2104      	movs	r1, #4
 800082a:	4638      	mov	r0, r7
 800082c:	f7ff ff62 	bl	80006f4 <__sfmoreglue>
 8000830:	4604      	mov	r4, r0
 8000832:	6030      	str	r0, [r6, #0]
 8000834:	2800      	cmp	r0, #0
 8000836:	d1d5      	bne.n	80007e4 <__sfp+0x24>
 8000838:	f7ff ff78 	bl	800072c <__sfp_lock_release>
 800083c:	230c      	movs	r3, #12
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	e7ee      	b.n	8000820 <__sfp+0x60>
 8000842:	bf00      	nop
 8000844:	080015b8 	.word	0x080015b8
 8000848:	ffff0001 	.word	0xffff0001

0800084c <_fwalk_reent>:
 800084c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000850:	4606      	mov	r6, r0
 8000852:	4688      	mov	r8, r1
 8000854:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000858:	2700      	movs	r7, #0
 800085a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800085e:	f1b9 0901 	subs.w	r9, r9, #1
 8000862:	d505      	bpl.n	8000870 <_fwalk_reent+0x24>
 8000864:	6824      	ldr	r4, [r4, #0]
 8000866:	2c00      	cmp	r4, #0
 8000868:	d1f7      	bne.n	800085a <_fwalk_reent+0xe>
 800086a:	4638      	mov	r0, r7
 800086c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000870:	89ab      	ldrh	r3, [r5, #12]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d907      	bls.n	8000886 <_fwalk_reent+0x3a>
 8000876:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800087a:	3301      	adds	r3, #1
 800087c:	d003      	beq.n	8000886 <_fwalk_reent+0x3a>
 800087e:	4629      	mov	r1, r5
 8000880:	4630      	mov	r0, r6
 8000882:	47c0      	blx	r8
 8000884:	4307      	orrs	r7, r0
 8000886:	3568      	adds	r5, #104	; 0x68
 8000888:	e7e9      	b.n	800085e <_fwalk_reent+0x12>

0800088a <__retarget_lock_init_recursive>:
 800088a:	4770      	bx	lr

0800088c <__retarget_lock_acquire_recursive>:
 800088c:	4770      	bx	lr

0800088e <__retarget_lock_release_recursive>:
 800088e:	4770      	bx	lr

08000890 <sbrk_aligned>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	4e0e      	ldr	r6, [pc, #56]	; (80008cc <sbrk_aligned+0x3c>)
 8000894:	460c      	mov	r4, r1
 8000896:	6831      	ldr	r1, [r6, #0]
 8000898:	4605      	mov	r5, r0
 800089a:	b911      	cbnz	r1, 80008a2 <sbrk_aligned+0x12>
 800089c:	f000 fb7a 	bl	8000f94 <_sbrk_r>
 80008a0:	6030      	str	r0, [r6, #0]
 80008a2:	4621      	mov	r1, r4
 80008a4:	4628      	mov	r0, r5
 80008a6:	f000 fb75 	bl	8000f94 <_sbrk_r>
 80008aa:	1c43      	adds	r3, r0, #1
 80008ac:	d00a      	beq.n	80008c4 <sbrk_aligned+0x34>
 80008ae:	1cc4      	adds	r4, r0, #3
 80008b0:	f024 0403 	bic.w	r4, r4, #3
 80008b4:	42a0      	cmp	r0, r4
 80008b6:	d007      	beq.n	80008c8 <sbrk_aligned+0x38>
 80008b8:	1a21      	subs	r1, r4, r0
 80008ba:	4628      	mov	r0, r5
 80008bc:	f000 fb6a 	bl	8000f94 <_sbrk_r>
 80008c0:	3001      	adds	r0, #1
 80008c2:	d101      	bne.n	80008c8 <sbrk_aligned+0x38>
 80008c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80008c8:	4620      	mov	r0, r4
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
 80008cc:	20000090 	.word	0x20000090

080008d0 <_malloc_r>:
 80008d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008d4:	1ccd      	adds	r5, r1, #3
 80008d6:	f025 0503 	bic.w	r5, r5, #3
 80008da:	3508      	adds	r5, #8
 80008dc:	2d0c      	cmp	r5, #12
 80008de:	bf38      	it	cc
 80008e0:	250c      	movcc	r5, #12
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	4607      	mov	r7, r0
 80008e6:	db01      	blt.n	80008ec <_malloc_r+0x1c>
 80008e8:	42a9      	cmp	r1, r5
 80008ea:	d905      	bls.n	80008f8 <_malloc_r+0x28>
 80008ec:	230c      	movs	r3, #12
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	2600      	movs	r6, #0
 80008f2:	4630      	mov	r0, r6
 80008f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008f8:	4e2e      	ldr	r6, [pc, #184]	; (80009b4 <_malloc_r+0xe4>)
 80008fa:	f000 fdbb 	bl	8001474 <__malloc_lock>
 80008fe:	6833      	ldr	r3, [r6, #0]
 8000900:	461c      	mov	r4, r3
 8000902:	bb34      	cbnz	r4, 8000952 <_malloc_r+0x82>
 8000904:	4629      	mov	r1, r5
 8000906:	4638      	mov	r0, r7
 8000908:	f7ff ffc2 	bl	8000890 <sbrk_aligned>
 800090c:	1c43      	adds	r3, r0, #1
 800090e:	4604      	mov	r4, r0
 8000910:	d14d      	bne.n	80009ae <_malloc_r+0xde>
 8000912:	6834      	ldr	r4, [r6, #0]
 8000914:	4626      	mov	r6, r4
 8000916:	2e00      	cmp	r6, #0
 8000918:	d140      	bne.n	800099c <_malloc_r+0xcc>
 800091a:	6823      	ldr	r3, [r4, #0]
 800091c:	4631      	mov	r1, r6
 800091e:	4638      	mov	r0, r7
 8000920:	eb04 0803 	add.w	r8, r4, r3
 8000924:	f000 fb36 	bl	8000f94 <_sbrk_r>
 8000928:	4580      	cmp	r8, r0
 800092a:	d13a      	bne.n	80009a2 <_malloc_r+0xd2>
 800092c:	6821      	ldr	r1, [r4, #0]
 800092e:	3503      	adds	r5, #3
 8000930:	1a6d      	subs	r5, r5, r1
 8000932:	f025 0503 	bic.w	r5, r5, #3
 8000936:	3508      	adds	r5, #8
 8000938:	2d0c      	cmp	r5, #12
 800093a:	bf38      	it	cc
 800093c:	250c      	movcc	r5, #12
 800093e:	4629      	mov	r1, r5
 8000940:	4638      	mov	r0, r7
 8000942:	f7ff ffa5 	bl	8000890 <sbrk_aligned>
 8000946:	3001      	adds	r0, #1
 8000948:	d02b      	beq.n	80009a2 <_malloc_r+0xd2>
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	442b      	add	r3, r5
 800094e:	6023      	str	r3, [r4, #0]
 8000950:	e00e      	b.n	8000970 <_malloc_r+0xa0>
 8000952:	6822      	ldr	r2, [r4, #0]
 8000954:	1b52      	subs	r2, r2, r5
 8000956:	d41e      	bmi.n	8000996 <_malloc_r+0xc6>
 8000958:	2a0b      	cmp	r2, #11
 800095a:	d916      	bls.n	800098a <_malloc_r+0xba>
 800095c:	1961      	adds	r1, r4, r5
 800095e:	42a3      	cmp	r3, r4
 8000960:	6025      	str	r5, [r4, #0]
 8000962:	bf18      	it	ne
 8000964:	6059      	strne	r1, [r3, #4]
 8000966:	6863      	ldr	r3, [r4, #4]
 8000968:	bf08      	it	eq
 800096a:	6031      	streq	r1, [r6, #0]
 800096c:	5162      	str	r2, [r4, r5]
 800096e:	604b      	str	r3, [r1, #4]
 8000970:	4638      	mov	r0, r7
 8000972:	f104 060b 	add.w	r6, r4, #11
 8000976:	f000 fd83 	bl	8001480 <__malloc_unlock>
 800097a:	f026 0607 	bic.w	r6, r6, #7
 800097e:	1d23      	adds	r3, r4, #4
 8000980:	1af2      	subs	r2, r6, r3
 8000982:	d0b6      	beq.n	80008f2 <_malloc_r+0x22>
 8000984:	1b9b      	subs	r3, r3, r6
 8000986:	50a3      	str	r3, [r4, r2]
 8000988:	e7b3      	b.n	80008f2 <_malloc_r+0x22>
 800098a:	6862      	ldr	r2, [r4, #4]
 800098c:	42a3      	cmp	r3, r4
 800098e:	bf0c      	ite	eq
 8000990:	6032      	streq	r2, [r6, #0]
 8000992:	605a      	strne	r2, [r3, #4]
 8000994:	e7ec      	b.n	8000970 <_malloc_r+0xa0>
 8000996:	4623      	mov	r3, r4
 8000998:	6864      	ldr	r4, [r4, #4]
 800099a:	e7b2      	b.n	8000902 <_malloc_r+0x32>
 800099c:	4634      	mov	r4, r6
 800099e:	6876      	ldr	r6, [r6, #4]
 80009a0:	e7b9      	b.n	8000916 <_malloc_r+0x46>
 80009a2:	230c      	movs	r3, #12
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4638      	mov	r0, r7
 80009a8:	f000 fd6a 	bl	8001480 <__malloc_unlock>
 80009ac:	e7a1      	b.n	80008f2 <_malloc_r+0x22>
 80009ae:	6025      	str	r5, [r4, #0]
 80009b0:	e7de      	b.n	8000970 <_malloc_r+0xa0>
 80009b2:	bf00      	nop
 80009b4:	2000008c 	.word	0x2000008c

080009b8 <__sfputc_r>:
 80009b8:	6893      	ldr	r3, [r2, #8]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	b410      	push	{r4}
 80009c0:	6093      	str	r3, [r2, #8]
 80009c2:	da08      	bge.n	80009d6 <__sfputc_r+0x1e>
 80009c4:	6994      	ldr	r4, [r2, #24]
 80009c6:	42a3      	cmp	r3, r4
 80009c8:	db01      	blt.n	80009ce <__sfputc_r+0x16>
 80009ca:	290a      	cmp	r1, #10
 80009cc:	d103      	bne.n	80009d6 <__sfputc_r+0x1e>
 80009ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009d2:	f000 bb33 	b.w	800103c <__swbuf_r>
 80009d6:	6813      	ldr	r3, [r2, #0]
 80009d8:	1c58      	adds	r0, r3, #1
 80009da:	6010      	str	r0, [r2, #0]
 80009dc:	7019      	strb	r1, [r3, #0]
 80009de:	4608      	mov	r0, r1
 80009e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <__sfputs_r>:
 80009e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e8:	4606      	mov	r6, r0
 80009ea:	460f      	mov	r7, r1
 80009ec:	4614      	mov	r4, r2
 80009ee:	18d5      	adds	r5, r2, r3
 80009f0:	42ac      	cmp	r4, r5
 80009f2:	d101      	bne.n	80009f8 <__sfputs_r+0x12>
 80009f4:	2000      	movs	r0, #0
 80009f6:	e007      	b.n	8000a08 <__sfputs_r+0x22>
 80009f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009fc:	463a      	mov	r2, r7
 80009fe:	4630      	mov	r0, r6
 8000a00:	f7ff ffda 	bl	80009b8 <__sfputc_r>
 8000a04:	1c43      	adds	r3, r0, #1
 8000a06:	d1f3      	bne.n	80009f0 <__sfputs_r+0xa>
 8000a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a0c <_vfiprintf_r>:
 8000a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a10:	460d      	mov	r5, r1
 8000a12:	b09d      	sub	sp, #116	; 0x74
 8000a14:	4614      	mov	r4, r2
 8000a16:	4698      	mov	r8, r3
 8000a18:	4606      	mov	r6, r0
 8000a1a:	b118      	cbz	r0, 8000a24 <_vfiprintf_r+0x18>
 8000a1c:	6983      	ldr	r3, [r0, #24]
 8000a1e:	b90b      	cbnz	r3, 8000a24 <_vfiprintf_r+0x18>
 8000a20:	f7ff fe96 	bl	8000750 <__sinit>
 8000a24:	4b89      	ldr	r3, [pc, #548]	; (8000c4c <_vfiprintf_r+0x240>)
 8000a26:	429d      	cmp	r5, r3
 8000a28:	d11b      	bne.n	8000a62 <_vfiprintf_r+0x56>
 8000a2a:	6875      	ldr	r5, [r6, #4]
 8000a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a2e:	07d9      	lsls	r1, r3, #31
 8000a30:	d405      	bmi.n	8000a3e <_vfiprintf_r+0x32>
 8000a32:	89ab      	ldrh	r3, [r5, #12]
 8000a34:	059a      	lsls	r2, r3, #22
 8000a36:	d402      	bmi.n	8000a3e <_vfiprintf_r+0x32>
 8000a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a3a:	f7ff ff27 	bl	800088c <__retarget_lock_acquire_recursive>
 8000a3e:	89ab      	ldrh	r3, [r5, #12]
 8000a40:	071b      	lsls	r3, r3, #28
 8000a42:	d501      	bpl.n	8000a48 <_vfiprintf_r+0x3c>
 8000a44:	692b      	ldr	r3, [r5, #16]
 8000a46:	b9eb      	cbnz	r3, 8000a84 <_vfiprintf_r+0x78>
 8000a48:	4629      	mov	r1, r5
 8000a4a:	4630      	mov	r0, r6
 8000a4c:	f000 fb5a 	bl	8001104 <__swsetup_r>
 8000a50:	b1c0      	cbz	r0, 8000a84 <_vfiprintf_r+0x78>
 8000a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a54:	07dc      	lsls	r4, r3, #31
 8000a56:	d50e      	bpl.n	8000a76 <_vfiprintf_r+0x6a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a5c:	b01d      	add	sp, #116	; 0x74
 8000a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a62:	4b7b      	ldr	r3, [pc, #492]	; (8000c50 <_vfiprintf_r+0x244>)
 8000a64:	429d      	cmp	r5, r3
 8000a66:	d101      	bne.n	8000a6c <_vfiprintf_r+0x60>
 8000a68:	68b5      	ldr	r5, [r6, #8]
 8000a6a:	e7df      	b.n	8000a2c <_vfiprintf_r+0x20>
 8000a6c:	4b79      	ldr	r3, [pc, #484]	; (8000c54 <_vfiprintf_r+0x248>)
 8000a6e:	429d      	cmp	r5, r3
 8000a70:	bf08      	it	eq
 8000a72:	68f5      	ldreq	r5, [r6, #12]
 8000a74:	e7da      	b.n	8000a2c <_vfiprintf_r+0x20>
 8000a76:	89ab      	ldrh	r3, [r5, #12]
 8000a78:	0598      	lsls	r0, r3, #22
 8000a7a:	d4ed      	bmi.n	8000a58 <_vfiprintf_r+0x4c>
 8000a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a7e:	f7ff ff06 	bl	800088e <__retarget_lock_release_recursive>
 8000a82:	e7e9      	b.n	8000a58 <_vfiprintf_r+0x4c>
 8000a84:	2300      	movs	r3, #0
 8000a86:	9309      	str	r3, [sp, #36]	; 0x24
 8000a88:	2320      	movs	r3, #32
 8000a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a92:	2330      	movs	r3, #48	; 0x30
 8000a94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000c58 <_vfiprintf_r+0x24c>
 8000a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a9c:	f04f 0901 	mov.w	r9, #1
 8000aa0:	4623      	mov	r3, r4
 8000aa2:	469a      	mov	sl, r3
 8000aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000aa8:	b10a      	cbz	r2, 8000aae <_vfiprintf_r+0xa2>
 8000aaa:	2a25      	cmp	r2, #37	; 0x25
 8000aac:	d1f9      	bne.n	8000aa2 <_vfiprintf_r+0x96>
 8000aae:	ebba 0b04 	subs.w	fp, sl, r4
 8000ab2:	d00b      	beq.n	8000acc <_vfiprintf_r+0xc0>
 8000ab4:	465b      	mov	r3, fp
 8000ab6:	4622      	mov	r2, r4
 8000ab8:	4629      	mov	r1, r5
 8000aba:	4630      	mov	r0, r6
 8000abc:	f7ff ff93 	bl	80009e6 <__sfputs_r>
 8000ac0:	3001      	adds	r0, #1
 8000ac2:	f000 80aa 	beq.w	8000c1a <_vfiprintf_r+0x20e>
 8000ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ac8:	445a      	add	r2, fp
 8000aca:	9209      	str	r2, [sp, #36]	; 0x24
 8000acc:	f89a 3000 	ldrb.w	r3, [sl]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f000 80a2 	beq.w	8000c1a <_vfiprintf_r+0x20e>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ae0:	f10a 0a01 	add.w	sl, sl, #1
 8000ae4:	9304      	str	r3, [sp, #16]
 8000ae6:	9307      	str	r3, [sp, #28]
 8000ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000aec:	931a      	str	r3, [sp, #104]	; 0x68
 8000aee:	4654      	mov	r4, sl
 8000af0:	2205      	movs	r2, #5
 8000af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000af6:	4858      	ldr	r0, [pc, #352]	; (8000c58 <_vfiprintf_r+0x24c>)
 8000af8:	f7ff fb6a 	bl	80001d0 <memchr>
 8000afc:	9a04      	ldr	r2, [sp, #16]
 8000afe:	b9d8      	cbnz	r0, 8000b38 <_vfiprintf_r+0x12c>
 8000b00:	06d1      	lsls	r1, r2, #27
 8000b02:	bf44      	itt	mi
 8000b04:	2320      	movmi	r3, #32
 8000b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b0a:	0713      	lsls	r3, r2, #28
 8000b0c:	bf44      	itt	mi
 8000b0e:	232b      	movmi	r3, #43	; 0x2b
 8000b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b14:	f89a 3000 	ldrb.w	r3, [sl]
 8000b18:	2b2a      	cmp	r3, #42	; 0x2a
 8000b1a:	d015      	beq.n	8000b48 <_vfiprintf_r+0x13c>
 8000b1c:	9a07      	ldr	r2, [sp, #28]
 8000b1e:	4654      	mov	r4, sl
 8000b20:	2000      	movs	r0, #0
 8000b22:	f04f 0c0a 	mov.w	ip, #10
 8000b26:	4621      	mov	r1, r4
 8000b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b2c:	3b30      	subs	r3, #48	; 0x30
 8000b2e:	2b09      	cmp	r3, #9
 8000b30:	d94e      	bls.n	8000bd0 <_vfiprintf_r+0x1c4>
 8000b32:	b1b0      	cbz	r0, 8000b62 <_vfiprintf_r+0x156>
 8000b34:	9207      	str	r2, [sp, #28]
 8000b36:	e014      	b.n	8000b62 <_vfiprintf_r+0x156>
 8000b38:	eba0 0308 	sub.w	r3, r0, r8
 8000b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	9304      	str	r3, [sp, #16]
 8000b44:	46a2      	mov	sl, r4
 8000b46:	e7d2      	b.n	8000aee <_vfiprintf_r+0xe2>
 8000b48:	9b03      	ldr	r3, [sp, #12]
 8000b4a:	1d19      	adds	r1, r3, #4
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	9103      	str	r1, [sp, #12]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bfbb      	ittet	lt
 8000b54:	425b      	neglt	r3, r3
 8000b56:	f042 0202 	orrlt.w	r2, r2, #2
 8000b5a:	9307      	strge	r3, [sp, #28]
 8000b5c:	9307      	strlt	r3, [sp, #28]
 8000b5e:	bfb8      	it	lt
 8000b60:	9204      	strlt	r2, [sp, #16]
 8000b62:	7823      	ldrb	r3, [r4, #0]
 8000b64:	2b2e      	cmp	r3, #46	; 0x2e
 8000b66:	d10c      	bne.n	8000b82 <_vfiprintf_r+0x176>
 8000b68:	7863      	ldrb	r3, [r4, #1]
 8000b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8000b6c:	d135      	bne.n	8000bda <_vfiprintf_r+0x1ce>
 8000b6e:	9b03      	ldr	r3, [sp, #12]
 8000b70:	1d1a      	adds	r2, r3, #4
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	9203      	str	r2, [sp, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bfb8      	it	lt
 8000b7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000b7e:	3402      	adds	r4, #2
 8000b80:	9305      	str	r3, [sp, #20]
 8000b82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000c68 <_vfiprintf_r+0x25c>
 8000b86:	7821      	ldrb	r1, [r4, #0]
 8000b88:	2203      	movs	r2, #3
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	f7ff fb20 	bl	80001d0 <memchr>
 8000b90:	b140      	cbz	r0, 8000ba4 <_vfiprintf_r+0x198>
 8000b92:	2340      	movs	r3, #64	; 0x40
 8000b94:	eba0 000a 	sub.w	r0, r0, sl
 8000b98:	fa03 f000 	lsl.w	r0, r3, r0
 8000b9c:	9b04      	ldr	r3, [sp, #16]
 8000b9e:	4303      	orrs	r3, r0
 8000ba0:	3401      	adds	r4, #1
 8000ba2:	9304      	str	r3, [sp, #16]
 8000ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ba8:	482c      	ldr	r0, [pc, #176]	; (8000c5c <_vfiprintf_r+0x250>)
 8000baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000bae:	2206      	movs	r2, #6
 8000bb0:	f7ff fb0e 	bl	80001d0 <memchr>
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d03f      	beq.n	8000c38 <_vfiprintf_r+0x22c>
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <_vfiprintf_r+0x254>)
 8000bba:	bb1b      	cbnz	r3, 8000c04 <_vfiprintf_r+0x1f8>
 8000bbc:	9b03      	ldr	r3, [sp, #12]
 8000bbe:	3307      	adds	r3, #7
 8000bc0:	f023 0307 	bic.w	r3, r3, #7
 8000bc4:	3308      	adds	r3, #8
 8000bc6:	9303      	str	r3, [sp, #12]
 8000bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bca:	443b      	add	r3, r7
 8000bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8000bce:	e767      	b.n	8000aa0 <_vfiprintf_r+0x94>
 8000bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bd4:	460c      	mov	r4, r1
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	e7a5      	b.n	8000b26 <_vfiprintf_r+0x11a>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	3401      	adds	r4, #1
 8000bde:	9305      	str	r3, [sp, #20]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f04f 0c0a 	mov.w	ip, #10
 8000be6:	4620      	mov	r0, r4
 8000be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bec:	3a30      	subs	r2, #48	; 0x30
 8000bee:	2a09      	cmp	r2, #9
 8000bf0:	d903      	bls.n	8000bfa <_vfiprintf_r+0x1ee>
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0c5      	beq.n	8000b82 <_vfiprintf_r+0x176>
 8000bf6:	9105      	str	r1, [sp, #20]
 8000bf8:	e7c3      	b.n	8000b82 <_vfiprintf_r+0x176>
 8000bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bfe:	4604      	mov	r4, r0
 8000c00:	2301      	movs	r3, #1
 8000c02:	e7f0      	b.n	8000be6 <_vfiprintf_r+0x1da>
 8000c04:	ab03      	add	r3, sp, #12
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	462a      	mov	r2, r5
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <_vfiprintf_r+0x258>)
 8000c0c:	a904      	add	r1, sp, #16
 8000c0e:	4630      	mov	r0, r6
 8000c10:	f3af 8000 	nop.w
 8000c14:	4607      	mov	r7, r0
 8000c16:	1c78      	adds	r0, r7, #1
 8000c18:	d1d6      	bne.n	8000bc8 <_vfiprintf_r+0x1bc>
 8000c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c1c:	07d9      	lsls	r1, r3, #31
 8000c1e:	d405      	bmi.n	8000c2c <_vfiprintf_r+0x220>
 8000c20:	89ab      	ldrh	r3, [r5, #12]
 8000c22:	059a      	lsls	r2, r3, #22
 8000c24:	d402      	bmi.n	8000c2c <_vfiprintf_r+0x220>
 8000c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c28:	f7ff fe31 	bl	800088e <__retarget_lock_release_recursive>
 8000c2c:	89ab      	ldrh	r3, [r5, #12]
 8000c2e:	065b      	lsls	r3, r3, #25
 8000c30:	f53f af12 	bmi.w	8000a58 <_vfiprintf_r+0x4c>
 8000c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c36:	e711      	b.n	8000a5c <_vfiprintf_r+0x50>
 8000c38:	ab03      	add	r3, sp, #12
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	462a      	mov	r2, r5
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <_vfiprintf_r+0x258>)
 8000c40:	a904      	add	r1, sp, #16
 8000c42:	4630      	mov	r0, r6
 8000c44:	f000 f880 	bl	8000d48 <_printf_i>
 8000c48:	e7e4      	b.n	8000c14 <_vfiprintf_r+0x208>
 8000c4a:	bf00      	nop
 8000c4c:	080015dc 	.word	0x080015dc
 8000c50:	080015fc 	.word	0x080015fc
 8000c54:	080015bc 	.word	0x080015bc
 8000c58:	0800161c 	.word	0x0800161c
 8000c5c:	08001626 	.word	0x08001626
 8000c60:	00000000 	.word	0x00000000
 8000c64:	080009e7 	.word	0x080009e7
 8000c68:	08001622 	.word	0x08001622

08000c6c <_printf_common>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	4616      	mov	r6, r2
 8000c72:	4699      	mov	r9, r3
 8000c74:	688a      	ldr	r2, [r1, #8]
 8000c76:	690b      	ldr	r3, [r1, #16]
 8000c78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	bfb8      	it	lt
 8000c80:	4613      	movlt	r3, r2
 8000c82:	6033      	str	r3, [r6, #0]
 8000c84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c88:	4607      	mov	r7, r0
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	b10a      	cbz	r2, 8000c92 <_printf_common+0x26>
 8000c8e:	3301      	adds	r3, #1
 8000c90:	6033      	str	r3, [r6, #0]
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	0699      	lsls	r1, r3, #26
 8000c96:	bf42      	ittt	mi
 8000c98:	6833      	ldrmi	r3, [r6, #0]
 8000c9a:	3302      	addmi	r3, #2
 8000c9c:	6033      	strmi	r3, [r6, #0]
 8000c9e:	6825      	ldr	r5, [r4, #0]
 8000ca0:	f015 0506 	ands.w	r5, r5, #6
 8000ca4:	d106      	bne.n	8000cb4 <_printf_common+0x48>
 8000ca6:	f104 0a19 	add.w	sl, r4, #25
 8000caa:	68e3      	ldr	r3, [r4, #12]
 8000cac:	6832      	ldr	r2, [r6, #0]
 8000cae:	1a9b      	subs	r3, r3, r2
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	dc26      	bgt.n	8000d02 <_printf_common+0x96>
 8000cb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000cb8:	1e13      	subs	r3, r2, #0
 8000cba:	6822      	ldr	r2, [r4, #0]
 8000cbc:	bf18      	it	ne
 8000cbe:	2301      	movne	r3, #1
 8000cc0:	0692      	lsls	r2, r2, #26
 8000cc2:	d42b      	bmi.n	8000d1c <_printf_common+0xb0>
 8000cc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000cc8:	4649      	mov	r1, r9
 8000cca:	4638      	mov	r0, r7
 8000ccc:	47c0      	blx	r8
 8000cce:	3001      	adds	r0, #1
 8000cd0:	d01e      	beq.n	8000d10 <_printf_common+0xa4>
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	68e5      	ldr	r5, [r4, #12]
 8000cd6:	6832      	ldr	r2, [r6, #0]
 8000cd8:	f003 0306 	and.w	r3, r3, #6
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	bf08      	it	eq
 8000ce0:	1aad      	subeq	r5, r5, r2
 8000ce2:	68a3      	ldr	r3, [r4, #8]
 8000ce4:	6922      	ldr	r2, [r4, #16]
 8000ce6:	bf0c      	ite	eq
 8000ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cec:	2500      	movne	r5, #0
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	bfc4      	itt	gt
 8000cf2:	1a9b      	subgt	r3, r3, r2
 8000cf4:	18ed      	addgt	r5, r5, r3
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	341a      	adds	r4, #26
 8000cfa:	42b5      	cmp	r5, r6
 8000cfc:	d11a      	bne.n	8000d34 <_printf_common+0xc8>
 8000cfe:	2000      	movs	r0, #0
 8000d00:	e008      	b.n	8000d14 <_printf_common+0xa8>
 8000d02:	2301      	movs	r3, #1
 8000d04:	4652      	mov	r2, sl
 8000d06:	4649      	mov	r1, r9
 8000d08:	4638      	mov	r0, r7
 8000d0a:	47c0      	blx	r8
 8000d0c:	3001      	adds	r0, #1
 8000d0e:	d103      	bne.n	8000d18 <_printf_common+0xac>
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d18:	3501      	adds	r5, #1
 8000d1a:	e7c6      	b.n	8000caa <_printf_common+0x3e>
 8000d1c:	18e1      	adds	r1, r4, r3
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	2030      	movs	r0, #48	; 0x30
 8000d22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d26:	4422      	add	r2, r4
 8000d28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d30:	3302      	adds	r3, #2
 8000d32:	e7c7      	b.n	8000cc4 <_printf_common+0x58>
 8000d34:	2301      	movs	r3, #1
 8000d36:	4622      	mov	r2, r4
 8000d38:	4649      	mov	r1, r9
 8000d3a:	4638      	mov	r0, r7
 8000d3c:	47c0      	blx	r8
 8000d3e:	3001      	adds	r0, #1
 8000d40:	d0e6      	beq.n	8000d10 <_printf_common+0xa4>
 8000d42:	3601      	adds	r6, #1
 8000d44:	e7d9      	b.n	8000cfa <_printf_common+0x8e>
	...

08000d48 <_printf_i>:
 8000d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d4c:	7e0f      	ldrb	r7, [r1, #24]
 8000d4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d50:	2f78      	cmp	r7, #120	; 0x78
 8000d52:	4691      	mov	r9, r2
 8000d54:	4680      	mov	r8, r0
 8000d56:	460c      	mov	r4, r1
 8000d58:	469a      	mov	sl, r3
 8000d5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d5e:	d807      	bhi.n	8000d70 <_printf_i+0x28>
 8000d60:	2f62      	cmp	r7, #98	; 0x62
 8000d62:	d80a      	bhi.n	8000d7a <_printf_i+0x32>
 8000d64:	2f00      	cmp	r7, #0
 8000d66:	f000 80d8 	beq.w	8000f1a <_printf_i+0x1d2>
 8000d6a:	2f58      	cmp	r7, #88	; 0x58
 8000d6c:	f000 80a3 	beq.w	8000eb6 <_printf_i+0x16e>
 8000d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d78:	e03a      	b.n	8000df0 <_printf_i+0xa8>
 8000d7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d7e:	2b15      	cmp	r3, #21
 8000d80:	d8f6      	bhi.n	8000d70 <_printf_i+0x28>
 8000d82:	a101      	add	r1, pc, #4	; (adr r1, 8000d88 <_printf_i+0x40>)
 8000d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d88:	08000de1 	.word	0x08000de1
 8000d8c:	08000df5 	.word	0x08000df5
 8000d90:	08000d71 	.word	0x08000d71
 8000d94:	08000d71 	.word	0x08000d71
 8000d98:	08000d71 	.word	0x08000d71
 8000d9c:	08000d71 	.word	0x08000d71
 8000da0:	08000df5 	.word	0x08000df5
 8000da4:	08000d71 	.word	0x08000d71
 8000da8:	08000d71 	.word	0x08000d71
 8000dac:	08000d71 	.word	0x08000d71
 8000db0:	08000d71 	.word	0x08000d71
 8000db4:	08000f01 	.word	0x08000f01
 8000db8:	08000e25 	.word	0x08000e25
 8000dbc:	08000ee3 	.word	0x08000ee3
 8000dc0:	08000d71 	.word	0x08000d71
 8000dc4:	08000d71 	.word	0x08000d71
 8000dc8:	08000f23 	.word	0x08000f23
 8000dcc:	08000d71 	.word	0x08000d71
 8000dd0:	08000e25 	.word	0x08000e25
 8000dd4:	08000d71 	.word	0x08000d71
 8000dd8:	08000d71 	.word	0x08000d71
 8000ddc:	08000eeb 	.word	0x08000eeb
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	1d1a      	adds	r2, r3, #4
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	602a      	str	r2, [r5, #0]
 8000de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000df0:	2301      	movs	r3, #1
 8000df2:	e0a3      	b.n	8000f3c <_printf_i+0x1f4>
 8000df4:	6820      	ldr	r0, [r4, #0]
 8000df6:	6829      	ldr	r1, [r5, #0]
 8000df8:	0606      	lsls	r6, r0, #24
 8000dfa:	f101 0304 	add.w	r3, r1, #4
 8000dfe:	d50a      	bpl.n	8000e16 <_printf_i+0xce>
 8000e00:	680e      	ldr	r6, [r1, #0]
 8000e02:	602b      	str	r3, [r5, #0]
 8000e04:	2e00      	cmp	r6, #0
 8000e06:	da03      	bge.n	8000e10 <_printf_i+0xc8>
 8000e08:	232d      	movs	r3, #45	; 0x2d
 8000e0a:	4276      	negs	r6, r6
 8000e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e10:	485e      	ldr	r0, [pc, #376]	; (8000f8c <_printf_i+0x244>)
 8000e12:	230a      	movs	r3, #10
 8000e14:	e019      	b.n	8000e4a <_printf_i+0x102>
 8000e16:	680e      	ldr	r6, [r1, #0]
 8000e18:	602b      	str	r3, [r5, #0]
 8000e1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e1e:	bf18      	it	ne
 8000e20:	b236      	sxthne	r6, r6
 8000e22:	e7ef      	b.n	8000e04 <_printf_i+0xbc>
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	6820      	ldr	r0, [r4, #0]
 8000e28:	1d19      	adds	r1, r3, #4
 8000e2a:	6029      	str	r1, [r5, #0]
 8000e2c:	0601      	lsls	r1, r0, #24
 8000e2e:	d501      	bpl.n	8000e34 <_printf_i+0xec>
 8000e30:	681e      	ldr	r6, [r3, #0]
 8000e32:	e002      	b.n	8000e3a <_printf_i+0xf2>
 8000e34:	0646      	lsls	r6, r0, #25
 8000e36:	d5fb      	bpl.n	8000e30 <_printf_i+0xe8>
 8000e38:	881e      	ldrh	r6, [r3, #0]
 8000e3a:	4854      	ldr	r0, [pc, #336]	; (8000f8c <_printf_i+0x244>)
 8000e3c:	2f6f      	cmp	r7, #111	; 0x6f
 8000e3e:	bf0c      	ite	eq
 8000e40:	2308      	moveq	r3, #8
 8000e42:	230a      	movne	r3, #10
 8000e44:	2100      	movs	r1, #0
 8000e46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e4a:	6865      	ldr	r5, [r4, #4]
 8000e4c:	60a5      	str	r5, [r4, #8]
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	bfa2      	ittt	ge
 8000e52:	6821      	ldrge	r1, [r4, #0]
 8000e54:	f021 0104 	bicge.w	r1, r1, #4
 8000e58:	6021      	strge	r1, [r4, #0]
 8000e5a:	b90e      	cbnz	r6, 8000e60 <_printf_i+0x118>
 8000e5c:	2d00      	cmp	r5, #0
 8000e5e:	d04d      	beq.n	8000efc <_printf_i+0x1b4>
 8000e60:	4615      	mov	r5, r2
 8000e62:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e66:	fb03 6711 	mls	r7, r3, r1, r6
 8000e6a:	5dc7      	ldrb	r7, [r0, r7]
 8000e6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e70:	4637      	mov	r7, r6
 8000e72:	42bb      	cmp	r3, r7
 8000e74:	460e      	mov	r6, r1
 8000e76:	d9f4      	bls.n	8000e62 <_printf_i+0x11a>
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	d10b      	bne.n	8000e94 <_printf_i+0x14c>
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	07de      	lsls	r6, r3, #31
 8000e80:	d508      	bpl.n	8000e94 <_printf_i+0x14c>
 8000e82:	6923      	ldr	r3, [r4, #16]
 8000e84:	6861      	ldr	r1, [r4, #4]
 8000e86:	4299      	cmp	r1, r3
 8000e88:	bfde      	ittt	le
 8000e8a:	2330      	movle	r3, #48	; 0x30
 8000e8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000e94:	1b52      	subs	r2, r2, r5
 8000e96:	6122      	str	r2, [r4, #16]
 8000e98:	f8cd a000 	str.w	sl, [sp]
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	aa03      	add	r2, sp, #12
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	4640      	mov	r0, r8
 8000ea4:	f7ff fee2 	bl	8000c6c <_printf_common>
 8000ea8:	3001      	adds	r0, #1
 8000eaa:	d14c      	bne.n	8000f46 <_printf_i+0x1fe>
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb0:	b004      	add	sp, #16
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	4835      	ldr	r0, [pc, #212]	; (8000f8c <_printf_i+0x244>)
 8000eb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000ebc:	6829      	ldr	r1, [r5, #0]
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	f851 6b04 	ldr.w	r6, [r1], #4
 8000ec4:	6029      	str	r1, [r5, #0]
 8000ec6:	061d      	lsls	r5, r3, #24
 8000ec8:	d514      	bpl.n	8000ef4 <_printf_i+0x1ac>
 8000eca:	07df      	lsls	r7, r3, #31
 8000ecc:	bf44      	itt	mi
 8000ece:	f043 0320 	orrmi.w	r3, r3, #32
 8000ed2:	6023      	strmi	r3, [r4, #0]
 8000ed4:	b91e      	cbnz	r6, 8000ede <_printf_i+0x196>
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	f023 0320 	bic.w	r3, r3, #32
 8000edc:	6023      	str	r3, [r4, #0]
 8000ede:	2310      	movs	r3, #16
 8000ee0:	e7b0      	b.n	8000e44 <_printf_i+0xfc>
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	f043 0320 	orr.w	r3, r3, #32
 8000ee8:	6023      	str	r3, [r4, #0]
 8000eea:	2378      	movs	r3, #120	; 0x78
 8000eec:	4828      	ldr	r0, [pc, #160]	; (8000f90 <_printf_i+0x248>)
 8000eee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000ef2:	e7e3      	b.n	8000ebc <_printf_i+0x174>
 8000ef4:	0659      	lsls	r1, r3, #25
 8000ef6:	bf48      	it	mi
 8000ef8:	b2b6      	uxthmi	r6, r6
 8000efa:	e7e6      	b.n	8000eca <_printf_i+0x182>
 8000efc:	4615      	mov	r5, r2
 8000efe:	e7bb      	b.n	8000e78 <_printf_i+0x130>
 8000f00:	682b      	ldr	r3, [r5, #0]
 8000f02:	6826      	ldr	r6, [r4, #0]
 8000f04:	6961      	ldr	r1, [r4, #20]
 8000f06:	1d18      	adds	r0, r3, #4
 8000f08:	6028      	str	r0, [r5, #0]
 8000f0a:	0635      	lsls	r5, r6, #24
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	d501      	bpl.n	8000f14 <_printf_i+0x1cc>
 8000f10:	6019      	str	r1, [r3, #0]
 8000f12:	e002      	b.n	8000f1a <_printf_i+0x1d2>
 8000f14:	0670      	lsls	r0, r6, #25
 8000f16:	d5fb      	bpl.n	8000f10 <_printf_i+0x1c8>
 8000f18:	8019      	strh	r1, [r3, #0]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	6123      	str	r3, [r4, #16]
 8000f1e:	4615      	mov	r5, r2
 8000f20:	e7ba      	b.n	8000e98 <_printf_i+0x150>
 8000f22:	682b      	ldr	r3, [r5, #0]
 8000f24:	1d1a      	adds	r2, r3, #4
 8000f26:	602a      	str	r2, [r5, #0]
 8000f28:	681d      	ldr	r5, [r3, #0]
 8000f2a:	6862      	ldr	r2, [r4, #4]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4628      	mov	r0, r5
 8000f30:	f7ff f94e 	bl	80001d0 <memchr>
 8000f34:	b108      	cbz	r0, 8000f3a <_printf_i+0x1f2>
 8000f36:	1b40      	subs	r0, r0, r5
 8000f38:	6060      	str	r0, [r4, #4]
 8000f3a:	6863      	ldr	r3, [r4, #4]
 8000f3c:	6123      	str	r3, [r4, #16]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f44:	e7a8      	b.n	8000e98 <_printf_i+0x150>
 8000f46:	6923      	ldr	r3, [r4, #16]
 8000f48:	462a      	mov	r2, r5
 8000f4a:	4649      	mov	r1, r9
 8000f4c:	4640      	mov	r0, r8
 8000f4e:	47d0      	blx	sl
 8000f50:	3001      	adds	r0, #1
 8000f52:	d0ab      	beq.n	8000eac <_printf_i+0x164>
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	079b      	lsls	r3, r3, #30
 8000f58:	d413      	bmi.n	8000f82 <_printf_i+0x23a>
 8000f5a:	68e0      	ldr	r0, [r4, #12]
 8000f5c:	9b03      	ldr	r3, [sp, #12]
 8000f5e:	4298      	cmp	r0, r3
 8000f60:	bfb8      	it	lt
 8000f62:	4618      	movlt	r0, r3
 8000f64:	e7a4      	b.n	8000eb0 <_printf_i+0x168>
 8000f66:	2301      	movs	r3, #1
 8000f68:	4632      	mov	r2, r6
 8000f6a:	4649      	mov	r1, r9
 8000f6c:	4640      	mov	r0, r8
 8000f6e:	47d0      	blx	sl
 8000f70:	3001      	adds	r0, #1
 8000f72:	d09b      	beq.n	8000eac <_printf_i+0x164>
 8000f74:	3501      	adds	r5, #1
 8000f76:	68e3      	ldr	r3, [r4, #12]
 8000f78:	9903      	ldr	r1, [sp, #12]
 8000f7a:	1a5b      	subs	r3, r3, r1
 8000f7c:	42ab      	cmp	r3, r5
 8000f7e:	dcf2      	bgt.n	8000f66 <_printf_i+0x21e>
 8000f80:	e7eb      	b.n	8000f5a <_printf_i+0x212>
 8000f82:	2500      	movs	r5, #0
 8000f84:	f104 0619 	add.w	r6, r4, #25
 8000f88:	e7f5      	b.n	8000f76 <_printf_i+0x22e>
 8000f8a:	bf00      	nop
 8000f8c:	0800162d 	.word	0x0800162d
 8000f90:	0800163e 	.word	0x0800163e

08000f94 <_sbrk_r>:
 8000f94:	b538      	push	{r3, r4, r5, lr}
 8000f96:	4d06      	ldr	r5, [pc, #24]	; (8000fb0 <_sbrk_r+0x1c>)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	602b      	str	r3, [r5, #0]
 8000fa0:	f7ff fa06 	bl	80003b0 <_sbrk>
 8000fa4:	1c43      	adds	r3, r0, #1
 8000fa6:	d102      	bne.n	8000fae <_sbrk_r+0x1a>
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	b103      	cbz	r3, 8000fae <_sbrk_r+0x1a>
 8000fac:	6023      	str	r3, [r4, #0]
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
 8000fb0:	20000094 	.word	0x20000094

08000fb4 <__sread>:
 8000fb4:	b510      	push	{r4, lr}
 8000fb6:	460c      	mov	r4, r1
 8000fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fbc:	f000 fab2 	bl	8001524 <_read_r>
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	bfab      	itete	ge
 8000fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8000fc8:	181b      	addge	r3, r3, r0
 8000fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fce:	bfac      	ite	ge
 8000fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fd2:	81a3      	strhlt	r3, [r4, #12]
 8000fd4:	bd10      	pop	{r4, pc}

08000fd6 <__swrite>:
 8000fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fda:	461f      	mov	r7, r3
 8000fdc:	898b      	ldrh	r3, [r1, #12]
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	4605      	mov	r5, r0
 8000fe2:	460c      	mov	r4, r1
 8000fe4:	4616      	mov	r6, r2
 8000fe6:	d505      	bpl.n	8000ff4 <__swrite+0x1e>
 8000fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fec:	2302      	movs	r3, #2
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f000 f9c8 	bl	8001384 <_lseek_r>
 8000ff4:	89a3      	ldrh	r3, [r4, #12]
 8000ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ffe:	81a3      	strh	r3, [r4, #12]
 8001000:	4632      	mov	r2, r6
 8001002:	463b      	mov	r3, r7
 8001004:	4628      	mov	r0, r5
 8001006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800100a:	f000 b869 	b.w	80010e0 <_write_r>

0800100e <__sseek>:
 800100e:	b510      	push	{r4, lr}
 8001010:	460c      	mov	r4, r1
 8001012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001016:	f000 f9b5 	bl	8001384 <_lseek_r>
 800101a:	1c43      	adds	r3, r0, #1
 800101c:	89a3      	ldrh	r3, [r4, #12]
 800101e:	bf15      	itete	ne
 8001020:	6560      	strne	r0, [r4, #84]	; 0x54
 8001022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800102a:	81a3      	strheq	r3, [r4, #12]
 800102c:	bf18      	it	ne
 800102e:	81a3      	strhne	r3, [r4, #12]
 8001030:	bd10      	pop	{r4, pc}

08001032 <__sclose>:
 8001032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001036:	f000 b8d3 	b.w	80011e0 <_close_r>
	...

0800103c <__swbuf_r>:
 800103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103e:	460e      	mov	r6, r1
 8001040:	4614      	mov	r4, r2
 8001042:	4605      	mov	r5, r0
 8001044:	b118      	cbz	r0, 800104e <__swbuf_r+0x12>
 8001046:	6983      	ldr	r3, [r0, #24]
 8001048:	b90b      	cbnz	r3, 800104e <__swbuf_r+0x12>
 800104a:	f7ff fb81 	bl	8000750 <__sinit>
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <__swbuf_r+0x98>)
 8001050:	429c      	cmp	r4, r3
 8001052:	d12b      	bne.n	80010ac <__swbuf_r+0x70>
 8001054:	686c      	ldr	r4, [r5, #4]
 8001056:	69a3      	ldr	r3, [r4, #24]
 8001058:	60a3      	str	r3, [r4, #8]
 800105a:	89a3      	ldrh	r3, [r4, #12]
 800105c:	071a      	lsls	r2, r3, #28
 800105e:	d52f      	bpl.n	80010c0 <__swbuf_r+0x84>
 8001060:	6923      	ldr	r3, [r4, #16]
 8001062:	b36b      	cbz	r3, 80010c0 <__swbuf_r+0x84>
 8001064:	6923      	ldr	r3, [r4, #16]
 8001066:	6820      	ldr	r0, [r4, #0]
 8001068:	1ac0      	subs	r0, r0, r3
 800106a:	6963      	ldr	r3, [r4, #20]
 800106c:	b2f6      	uxtb	r6, r6
 800106e:	4283      	cmp	r3, r0
 8001070:	4637      	mov	r7, r6
 8001072:	dc04      	bgt.n	800107e <__swbuf_r+0x42>
 8001074:	4621      	mov	r1, r4
 8001076:	4628      	mov	r0, r5
 8001078:	f000 f948 	bl	800130c <_fflush_r>
 800107c:	bb30      	cbnz	r0, 80010cc <__swbuf_r+0x90>
 800107e:	68a3      	ldr	r3, [r4, #8]
 8001080:	3b01      	subs	r3, #1
 8001082:	60a3      	str	r3, [r4, #8]
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	6022      	str	r2, [r4, #0]
 800108a:	701e      	strb	r6, [r3, #0]
 800108c:	6963      	ldr	r3, [r4, #20]
 800108e:	3001      	adds	r0, #1
 8001090:	4283      	cmp	r3, r0
 8001092:	d004      	beq.n	800109e <__swbuf_r+0x62>
 8001094:	89a3      	ldrh	r3, [r4, #12]
 8001096:	07db      	lsls	r3, r3, #31
 8001098:	d506      	bpl.n	80010a8 <__swbuf_r+0x6c>
 800109a:	2e0a      	cmp	r6, #10
 800109c:	d104      	bne.n	80010a8 <__swbuf_r+0x6c>
 800109e:	4621      	mov	r1, r4
 80010a0:	4628      	mov	r0, r5
 80010a2:	f000 f933 	bl	800130c <_fflush_r>
 80010a6:	b988      	cbnz	r0, 80010cc <__swbuf_r+0x90>
 80010a8:	4638      	mov	r0, r7
 80010aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <__swbuf_r+0x9c>)
 80010ae:	429c      	cmp	r4, r3
 80010b0:	d101      	bne.n	80010b6 <__swbuf_r+0x7a>
 80010b2:	68ac      	ldr	r4, [r5, #8]
 80010b4:	e7cf      	b.n	8001056 <__swbuf_r+0x1a>
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <__swbuf_r+0xa0>)
 80010b8:	429c      	cmp	r4, r3
 80010ba:	bf08      	it	eq
 80010bc:	68ec      	ldreq	r4, [r5, #12]
 80010be:	e7ca      	b.n	8001056 <__swbuf_r+0x1a>
 80010c0:	4621      	mov	r1, r4
 80010c2:	4628      	mov	r0, r5
 80010c4:	f000 f81e 	bl	8001104 <__swsetup_r>
 80010c8:	2800      	cmp	r0, #0
 80010ca:	d0cb      	beq.n	8001064 <__swbuf_r+0x28>
 80010cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80010d0:	e7ea      	b.n	80010a8 <__swbuf_r+0x6c>
 80010d2:	bf00      	nop
 80010d4:	080015dc 	.word	0x080015dc
 80010d8:	080015fc 	.word	0x080015fc
 80010dc:	080015bc 	.word	0x080015bc

080010e0 <_write_r>:
 80010e0:	b538      	push	{r3, r4, r5, lr}
 80010e2:	4d07      	ldr	r5, [pc, #28]	; (8001100 <_write_r+0x20>)
 80010e4:	4604      	mov	r4, r0
 80010e6:	4608      	mov	r0, r1
 80010e8:	4611      	mov	r1, r2
 80010ea:	2200      	movs	r2, #0
 80010ec:	602a      	str	r2, [r5, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	f7ff f90d 	bl	800030e <_write>
 80010f4:	1c43      	adds	r3, r0, #1
 80010f6:	d102      	bne.n	80010fe <_write_r+0x1e>
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	b103      	cbz	r3, 80010fe <_write_r+0x1e>
 80010fc:	6023      	str	r3, [r4, #0]
 80010fe:	bd38      	pop	{r3, r4, r5, pc}
 8001100:	20000094 	.word	0x20000094

08001104 <__swsetup_r>:
 8001104:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <__swsetup_r+0xcc>)
 8001106:	b570      	push	{r4, r5, r6, lr}
 8001108:	681d      	ldr	r5, [r3, #0]
 800110a:	4606      	mov	r6, r0
 800110c:	460c      	mov	r4, r1
 800110e:	b125      	cbz	r5, 800111a <__swsetup_r+0x16>
 8001110:	69ab      	ldr	r3, [r5, #24]
 8001112:	b913      	cbnz	r3, 800111a <__swsetup_r+0x16>
 8001114:	4628      	mov	r0, r5
 8001116:	f7ff fb1b 	bl	8000750 <__sinit>
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <__swsetup_r+0xd0>)
 800111c:	429c      	cmp	r4, r3
 800111e:	d10f      	bne.n	8001140 <__swsetup_r+0x3c>
 8001120:	686c      	ldr	r4, [r5, #4]
 8001122:	89a3      	ldrh	r3, [r4, #12]
 8001124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001128:	0719      	lsls	r1, r3, #28
 800112a:	d42c      	bmi.n	8001186 <__swsetup_r+0x82>
 800112c:	06dd      	lsls	r5, r3, #27
 800112e:	d411      	bmi.n	8001154 <__swsetup_r+0x50>
 8001130:	2309      	movs	r3, #9
 8001132:	6033      	str	r3, [r6, #0]
 8001134:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001138:	81a3      	strh	r3, [r4, #12]
 800113a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800113e:	e03e      	b.n	80011be <__swsetup_r+0xba>
 8001140:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <__swsetup_r+0xd4>)
 8001142:	429c      	cmp	r4, r3
 8001144:	d101      	bne.n	800114a <__swsetup_r+0x46>
 8001146:	68ac      	ldr	r4, [r5, #8]
 8001148:	e7eb      	b.n	8001122 <__swsetup_r+0x1e>
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <__swsetup_r+0xd8>)
 800114c:	429c      	cmp	r4, r3
 800114e:	bf08      	it	eq
 8001150:	68ec      	ldreq	r4, [r5, #12]
 8001152:	e7e6      	b.n	8001122 <__swsetup_r+0x1e>
 8001154:	0758      	lsls	r0, r3, #29
 8001156:	d512      	bpl.n	800117e <__swsetup_r+0x7a>
 8001158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800115a:	b141      	cbz	r1, 800116e <__swsetup_r+0x6a>
 800115c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001160:	4299      	cmp	r1, r3
 8001162:	d002      	beq.n	800116a <__swsetup_r+0x66>
 8001164:	4630      	mov	r0, r6
 8001166:	f000 f991 	bl	800148c <_free_r>
 800116a:	2300      	movs	r3, #0
 800116c:	6363      	str	r3, [r4, #52]	; 0x34
 800116e:	89a3      	ldrh	r3, [r4, #12]
 8001170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001174:	81a3      	strh	r3, [r4, #12]
 8001176:	2300      	movs	r3, #0
 8001178:	6063      	str	r3, [r4, #4]
 800117a:	6923      	ldr	r3, [r4, #16]
 800117c:	6023      	str	r3, [r4, #0]
 800117e:	89a3      	ldrh	r3, [r4, #12]
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	81a3      	strh	r3, [r4, #12]
 8001186:	6923      	ldr	r3, [r4, #16]
 8001188:	b94b      	cbnz	r3, 800119e <__swsetup_r+0x9a>
 800118a:	89a3      	ldrh	r3, [r4, #12]
 800118c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001194:	d003      	beq.n	800119e <__swsetup_r+0x9a>
 8001196:	4621      	mov	r1, r4
 8001198:	4630      	mov	r0, r6
 800119a:	f000 f92b 	bl	80013f4 <__smakebuf_r>
 800119e:	89a0      	ldrh	r0, [r4, #12]
 80011a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011a4:	f010 0301 	ands.w	r3, r0, #1
 80011a8:	d00a      	beq.n	80011c0 <__swsetup_r+0xbc>
 80011aa:	2300      	movs	r3, #0
 80011ac:	60a3      	str	r3, [r4, #8]
 80011ae:	6963      	ldr	r3, [r4, #20]
 80011b0:	425b      	negs	r3, r3
 80011b2:	61a3      	str	r3, [r4, #24]
 80011b4:	6923      	ldr	r3, [r4, #16]
 80011b6:	b943      	cbnz	r3, 80011ca <__swsetup_r+0xc6>
 80011b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80011bc:	d1ba      	bne.n	8001134 <__swsetup_r+0x30>
 80011be:	bd70      	pop	{r4, r5, r6, pc}
 80011c0:	0781      	lsls	r1, r0, #30
 80011c2:	bf58      	it	pl
 80011c4:	6963      	ldrpl	r3, [r4, #20]
 80011c6:	60a3      	str	r3, [r4, #8]
 80011c8:	e7f4      	b.n	80011b4 <__swsetup_r+0xb0>
 80011ca:	2000      	movs	r0, #0
 80011cc:	e7f7      	b.n	80011be <__swsetup_r+0xba>
 80011ce:	bf00      	nop
 80011d0:	20000000 	.word	0x20000000
 80011d4:	080015dc 	.word	0x080015dc
 80011d8:	080015fc 	.word	0x080015fc
 80011dc:	080015bc 	.word	0x080015bc

080011e0 <_close_r>:
 80011e0:	b538      	push	{r3, r4, r5, lr}
 80011e2:	4d06      	ldr	r5, [pc, #24]	; (80011fc <_close_r+0x1c>)
 80011e4:	2300      	movs	r3, #0
 80011e6:	4604      	mov	r4, r0
 80011e8:	4608      	mov	r0, r1
 80011ea:	602b      	str	r3, [r5, #0]
 80011ec:	f7ff f8ab 	bl	8000346 <_close>
 80011f0:	1c43      	adds	r3, r0, #1
 80011f2:	d102      	bne.n	80011fa <_close_r+0x1a>
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	b103      	cbz	r3, 80011fa <_close_r+0x1a>
 80011f8:	6023      	str	r3, [r4, #0]
 80011fa:	bd38      	pop	{r3, r4, r5, pc}
 80011fc:	20000094 	.word	0x20000094

08001200 <__sflush_r>:
 8001200:	898a      	ldrh	r2, [r1, #12]
 8001202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001206:	4605      	mov	r5, r0
 8001208:	0710      	lsls	r0, r2, #28
 800120a:	460c      	mov	r4, r1
 800120c:	d458      	bmi.n	80012c0 <__sflush_r+0xc0>
 800120e:	684b      	ldr	r3, [r1, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	dc05      	bgt.n	8001220 <__sflush_r+0x20>
 8001214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001216:	2b00      	cmp	r3, #0
 8001218:	dc02      	bgt.n	8001220 <__sflush_r+0x20>
 800121a:	2000      	movs	r0, #0
 800121c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001222:	2e00      	cmp	r6, #0
 8001224:	d0f9      	beq.n	800121a <__sflush_r+0x1a>
 8001226:	2300      	movs	r3, #0
 8001228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800122c:	682f      	ldr	r7, [r5, #0]
 800122e:	602b      	str	r3, [r5, #0]
 8001230:	d032      	beq.n	8001298 <__sflush_r+0x98>
 8001232:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001234:	89a3      	ldrh	r3, [r4, #12]
 8001236:	075a      	lsls	r2, r3, #29
 8001238:	d505      	bpl.n	8001246 <__sflush_r+0x46>
 800123a:	6863      	ldr	r3, [r4, #4]
 800123c:	1ac0      	subs	r0, r0, r3
 800123e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001240:	b10b      	cbz	r3, 8001246 <__sflush_r+0x46>
 8001242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001244:	1ac0      	subs	r0, r0, r3
 8001246:	2300      	movs	r3, #0
 8001248:	4602      	mov	r2, r0
 800124a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800124c:	6a21      	ldr	r1, [r4, #32]
 800124e:	4628      	mov	r0, r5
 8001250:	47b0      	blx	r6
 8001252:	1c43      	adds	r3, r0, #1
 8001254:	89a3      	ldrh	r3, [r4, #12]
 8001256:	d106      	bne.n	8001266 <__sflush_r+0x66>
 8001258:	6829      	ldr	r1, [r5, #0]
 800125a:	291d      	cmp	r1, #29
 800125c:	d82c      	bhi.n	80012b8 <__sflush_r+0xb8>
 800125e:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <__sflush_r+0x108>)
 8001260:	40ca      	lsrs	r2, r1
 8001262:	07d6      	lsls	r6, r2, #31
 8001264:	d528      	bpl.n	80012b8 <__sflush_r+0xb8>
 8001266:	2200      	movs	r2, #0
 8001268:	6062      	str	r2, [r4, #4]
 800126a:	04d9      	lsls	r1, r3, #19
 800126c:	6922      	ldr	r2, [r4, #16]
 800126e:	6022      	str	r2, [r4, #0]
 8001270:	d504      	bpl.n	800127c <__sflush_r+0x7c>
 8001272:	1c42      	adds	r2, r0, #1
 8001274:	d101      	bne.n	800127a <__sflush_r+0x7a>
 8001276:	682b      	ldr	r3, [r5, #0]
 8001278:	b903      	cbnz	r3, 800127c <__sflush_r+0x7c>
 800127a:	6560      	str	r0, [r4, #84]	; 0x54
 800127c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800127e:	602f      	str	r7, [r5, #0]
 8001280:	2900      	cmp	r1, #0
 8001282:	d0ca      	beq.n	800121a <__sflush_r+0x1a>
 8001284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001288:	4299      	cmp	r1, r3
 800128a:	d002      	beq.n	8001292 <__sflush_r+0x92>
 800128c:	4628      	mov	r0, r5
 800128e:	f000 f8fd 	bl	800148c <_free_r>
 8001292:	2000      	movs	r0, #0
 8001294:	6360      	str	r0, [r4, #52]	; 0x34
 8001296:	e7c1      	b.n	800121c <__sflush_r+0x1c>
 8001298:	6a21      	ldr	r1, [r4, #32]
 800129a:	2301      	movs	r3, #1
 800129c:	4628      	mov	r0, r5
 800129e:	47b0      	blx	r6
 80012a0:	1c41      	adds	r1, r0, #1
 80012a2:	d1c7      	bne.n	8001234 <__sflush_r+0x34>
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0c4      	beq.n	8001234 <__sflush_r+0x34>
 80012aa:	2b1d      	cmp	r3, #29
 80012ac:	d001      	beq.n	80012b2 <__sflush_r+0xb2>
 80012ae:	2b16      	cmp	r3, #22
 80012b0:	d101      	bne.n	80012b6 <__sflush_r+0xb6>
 80012b2:	602f      	str	r7, [r5, #0]
 80012b4:	e7b1      	b.n	800121a <__sflush_r+0x1a>
 80012b6:	89a3      	ldrh	r3, [r4, #12]
 80012b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012bc:	81a3      	strh	r3, [r4, #12]
 80012be:	e7ad      	b.n	800121c <__sflush_r+0x1c>
 80012c0:	690f      	ldr	r7, [r1, #16]
 80012c2:	2f00      	cmp	r7, #0
 80012c4:	d0a9      	beq.n	800121a <__sflush_r+0x1a>
 80012c6:	0793      	lsls	r3, r2, #30
 80012c8:	680e      	ldr	r6, [r1, #0]
 80012ca:	bf08      	it	eq
 80012cc:	694b      	ldreq	r3, [r1, #20]
 80012ce:	600f      	str	r7, [r1, #0]
 80012d0:	bf18      	it	ne
 80012d2:	2300      	movne	r3, #0
 80012d4:	eba6 0807 	sub.w	r8, r6, r7
 80012d8:	608b      	str	r3, [r1, #8]
 80012da:	f1b8 0f00 	cmp.w	r8, #0
 80012de:	dd9c      	ble.n	800121a <__sflush_r+0x1a>
 80012e0:	6a21      	ldr	r1, [r4, #32]
 80012e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80012e4:	4643      	mov	r3, r8
 80012e6:	463a      	mov	r2, r7
 80012e8:	4628      	mov	r0, r5
 80012ea:	47b0      	blx	r6
 80012ec:	2800      	cmp	r0, #0
 80012ee:	dc06      	bgt.n	80012fe <__sflush_r+0xfe>
 80012f0:	89a3      	ldrh	r3, [r4, #12]
 80012f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f6:	81a3      	strh	r3, [r4, #12]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012fc:	e78e      	b.n	800121c <__sflush_r+0x1c>
 80012fe:	4407      	add	r7, r0
 8001300:	eba8 0800 	sub.w	r8, r8, r0
 8001304:	e7e9      	b.n	80012da <__sflush_r+0xda>
 8001306:	bf00      	nop
 8001308:	20400001 	.word	0x20400001

0800130c <_fflush_r>:
 800130c:	b538      	push	{r3, r4, r5, lr}
 800130e:	690b      	ldr	r3, [r1, #16]
 8001310:	4605      	mov	r5, r0
 8001312:	460c      	mov	r4, r1
 8001314:	b913      	cbnz	r3, 800131c <_fflush_r+0x10>
 8001316:	2500      	movs	r5, #0
 8001318:	4628      	mov	r0, r5
 800131a:	bd38      	pop	{r3, r4, r5, pc}
 800131c:	b118      	cbz	r0, 8001326 <_fflush_r+0x1a>
 800131e:	6983      	ldr	r3, [r0, #24]
 8001320:	b90b      	cbnz	r3, 8001326 <_fflush_r+0x1a>
 8001322:	f7ff fa15 	bl	8000750 <__sinit>
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <_fflush_r+0x6c>)
 8001328:	429c      	cmp	r4, r3
 800132a:	d11b      	bne.n	8001364 <_fflush_r+0x58>
 800132c:	686c      	ldr	r4, [r5, #4]
 800132e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0ef      	beq.n	8001316 <_fflush_r+0xa>
 8001336:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001338:	07d0      	lsls	r0, r2, #31
 800133a:	d404      	bmi.n	8001346 <_fflush_r+0x3a>
 800133c:	0599      	lsls	r1, r3, #22
 800133e:	d402      	bmi.n	8001346 <_fflush_r+0x3a>
 8001340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001342:	f7ff faa3 	bl	800088c <__retarget_lock_acquire_recursive>
 8001346:	4628      	mov	r0, r5
 8001348:	4621      	mov	r1, r4
 800134a:	f7ff ff59 	bl	8001200 <__sflush_r>
 800134e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001350:	07da      	lsls	r2, r3, #31
 8001352:	4605      	mov	r5, r0
 8001354:	d4e0      	bmi.n	8001318 <_fflush_r+0xc>
 8001356:	89a3      	ldrh	r3, [r4, #12]
 8001358:	059b      	lsls	r3, r3, #22
 800135a:	d4dd      	bmi.n	8001318 <_fflush_r+0xc>
 800135c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800135e:	f7ff fa96 	bl	800088e <__retarget_lock_release_recursive>
 8001362:	e7d9      	b.n	8001318 <_fflush_r+0xc>
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <_fflush_r+0x70>)
 8001366:	429c      	cmp	r4, r3
 8001368:	d101      	bne.n	800136e <_fflush_r+0x62>
 800136a:	68ac      	ldr	r4, [r5, #8]
 800136c:	e7df      	b.n	800132e <_fflush_r+0x22>
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <_fflush_r+0x74>)
 8001370:	429c      	cmp	r4, r3
 8001372:	bf08      	it	eq
 8001374:	68ec      	ldreq	r4, [r5, #12]
 8001376:	e7da      	b.n	800132e <_fflush_r+0x22>
 8001378:	080015dc 	.word	0x080015dc
 800137c:	080015fc 	.word	0x080015fc
 8001380:	080015bc 	.word	0x080015bc

08001384 <_lseek_r>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	4d07      	ldr	r5, [pc, #28]	; (80013a4 <_lseek_r+0x20>)
 8001388:	4604      	mov	r4, r0
 800138a:	4608      	mov	r0, r1
 800138c:	4611      	mov	r1, r2
 800138e:	2200      	movs	r2, #0
 8001390:	602a      	str	r2, [r5, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	f7fe fffe 	bl	8000394 <_lseek>
 8001398:	1c43      	adds	r3, r0, #1
 800139a:	d102      	bne.n	80013a2 <_lseek_r+0x1e>
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	b103      	cbz	r3, 80013a2 <_lseek_r+0x1e>
 80013a0:	6023      	str	r3, [r4, #0]
 80013a2:	bd38      	pop	{r3, r4, r5, pc}
 80013a4:	20000094 	.word	0x20000094

080013a8 <__swhatbuf_r>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	460e      	mov	r6, r1
 80013ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013b0:	2900      	cmp	r1, #0
 80013b2:	b096      	sub	sp, #88	; 0x58
 80013b4:	4614      	mov	r4, r2
 80013b6:	461d      	mov	r5, r3
 80013b8:	da08      	bge.n	80013cc <__swhatbuf_r+0x24>
 80013ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	602a      	str	r2, [r5, #0]
 80013c2:	061a      	lsls	r2, r3, #24
 80013c4:	d410      	bmi.n	80013e8 <__swhatbuf_r+0x40>
 80013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ca:	e00e      	b.n	80013ea <__swhatbuf_r+0x42>
 80013cc:	466a      	mov	r2, sp
 80013ce:	f000 f8bb 	bl	8001548 <_fstat_r>
 80013d2:	2800      	cmp	r0, #0
 80013d4:	dbf1      	blt.n	80013ba <__swhatbuf_r+0x12>
 80013d6:	9a01      	ldr	r2, [sp, #4]
 80013d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80013dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80013e0:	425a      	negs	r2, r3
 80013e2:	415a      	adcs	r2, r3
 80013e4:	602a      	str	r2, [r5, #0]
 80013e6:	e7ee      	b.n	80013c6 <__swhatbuf_r+0x1e>
 80013e8:	2340      	movs	r3, #64	; 0x40
 80013ea:	2000      	movs	r0, #0
 80013ec:	6023      	str	r3, [r4, #0]
 80013ee:	b016      	add	sp, #88	; 0x58
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080013f4 <__smakebuf_r>:
 80013f4:	898b      	ldrh	r3, [r1, #12]
 80013f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013f8:	079d      	lsls	r5, r3, #30
 80013fa:	4606      	mov	r6, r0
 80013fc:	460c      	mov	r4, r1
 80013fe:	d507      	bpl.n	8001410 <__smakebuf_r+0x1c>
 8001400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001404:	6023      	str	r3, [r4, #0]
 8001406:	6123      	str	r3, [r4, #16]
 8001408:	2301      	movs	r3, #1
 800140a:	6163      	str	r3, [r4, #20]
 800140c:	b002      	add	sp, #8
 800140e:	bd70      	pop	{r4, r5, r6, pc}
 8001410:	ab01      	add	r3, sp, #4
 8001412:	466a      	mov	r2, sp
 8001414:	f7ff ffc8 	bl	80013a8 <__swhatbuf_r>
 8001418:	9900      	ldr	r1, [sp, #0]
 800141a:	4605      	mov	r5, r0
 800141c:	4630      	mov	r0, r6
 800141e:	f7ff fa57 	bl	80008d0 <_malloc_r>
 8001422:	b948      	cbnz	r0, 8001438 <__smakebuf_r+0x44>
 8001424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001428:	059a      	lsls	r2, r3, #22
 800142a:	d4ef      	bmi.n	800140c <__smakebuf_r+0x18>
 800142c:	f023 0303 	bic.w	r3, r3, #3
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	81a3      	strh	r3, [r4, #12]
 8001436:	e7e3      	b.n	8001400 <__smakebuf_r+0xc>
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <__smakebuf_r+0x7c>)
 800143a:	62b3      	str	r3, [r6, #40]	; 0x28
 800143c:	89a3      	ldrh	r3, [r4, #12]
 800143e:	6020      	str	r0, [r4, #0]
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	81a3      	strh	r3, [r4, #12]
 8001446:	9b00      	ldr	r3, [sp, #0]
 8001448:	6163      	str	r3, [r4, #20]
 800144a:	9b01      	ldr	r3, [sp, #4]
 800144c:	6120      	str	r0, [r4, #16]
 800144e:	b15b      	cbz	r3, 8001468 <__smakebuf_r+0x74>
 8001450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001454:	4630      	mov	r0, r6
 8001456:	f000 f889 	bl	800156c <_isatty_r>
 800145a:	b128      	cbz	r0, 8001468 <__smakebuf_r+0x74>
 800145c:	89a3      	ldrh	r3, [r4, #12]
 800145e:	f023 0303 	bic.w	r3, r3, #3
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	81a3      	strh	r3, [r4, #12]
 8001468:	89a0      	ldrh	r0, [r4, #12]
 800146a:	4305      	orrs	r5, r0
 800146c:	81a5      	strh	r5, [r4, #12]
 800146e:	e7cd      	b.n	800140c <__smakebuf_r+0x18>
 8001470:	080006e9 	.word	0x080006e9

08001474 <__malloc_lock>:
 8001474:	4801      	ldr	r0, [pc, #4]	; (800147c <__malloc_lock+0x8>)
 8001476:	f7ff ba09 	b.w	800088c <__retarget_lock_acquire_recursive>
 800147a:	bf00      	nop
 800147c:	20000088 	.word	0x20000088

08001480 <__malloc_unlock>:
 8001480:	4801      	ldr	r0, [pc, #4]	; (8001488 <__malloc_unlock+0x8>)
 8001482:	f7ff ba04 	b.w	800088e <__retarget_lock_release_recursive>
 8001486:	bf00      	nop
 8001488:	20000088 	.word	0x20000088

0800148c <_free_r>:
 800148c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800148e:	2900      	cmp	r1, #0
 8001490:	d044      	beq.n	800151c <_free_r+0x90>
 8001492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001496:	9001      	str	r0, [sp, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f1a1 0404 	sub.w	r4, r1, #4
 800149e:	bfb8      	it	lt
 80014a0:	18e4      	addlt	r4, r4, r3
 80014a2:	f7ff ffe7 	bl	8001474 <__malloc_lock>
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <_free_r+0x94>)
 80014a8:	9801      	ldr	r0, [sp, #4]
 80014aa:	6813      	ldr	r3, [r2, #0]
 80014ac:	b933      	cbnz	r3, 80014bc <_free_r+0x30>
 80014ae:	6063      	str	r3, [r4, #4]
 80014b0:	6014      	str	r4, [r2, #0]
 80014b2:	b003      	add	sp, #12
 80014b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80014b8:	f7ff bfe2 	b.w	8001480 <__malloc_unlock>
 80014bc:	42a3      	cmp	r3, r4
 80014be:	d908      	bls.n	80014d2 <_free_r+0x46>
 80014c0:	6825      	ldr	r5, [r4, #0]
 80014c2:	1961      	adds	r1, r4, r5
 80014c4:	428b      	cmp	r3, r1
 80014c6:	bf01      	itttt	eq
 80014c8:	6819      	ldreq	r1, [r3, #0]
 80014ca:	685b      	ldreq	r3, [r3, #4]
 80014cc:	1949      	addeq	r1, r1, r5
 80014ce:	6021      	streq	r1, [r4, #0]
 80014d0:	e7ed      	b.n	80014ae <_free_r+0x22>
 80014d2:	461a      	mov	r2, r3
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	b10b      	cbz	r3, 80014dc <_free_r+0x50>
 80014d8:	42a3      	cmp	r3, r4
 80014da:	d9fa      	bls.n	80014d2 <_free_r+0x46>
 80014dc:	6811      	ldr	r1, [r2, #0]
 80014de:	1855      	adds	r5, r2, r1
 80014e0:	42a5      	cmp	r5, r4
 80014e2:	d10b      	bne.n	80014fc <_free_r+0x70>
 80014e4:	6824      	ldr	r4, [r4, #0]
 80014e6:	4421      	add	r1, r4
 80014e8:	1854      	adds	r4, r2, r1
 80014ea:	42a3      	cmp	r3, r4
 80014ec:	6011      	str	r1, [r2, #0]
 80014ee:	d1e0      	bne.n	80014b2 <_free_r+0x26>
 80014f0:	681c      	ldr	r4, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	6053      	str	r3, [r2, #4]
 80014f6:	4421      	add	r1, r4
 80014f8:	6011      	str	r1, [r2, #0]
 80014fa:	e7da      	b.n	80014b2 <_free_r+0x26>
 80014fc:	d902      	bls.n	8001504 <_free_r+0x78>
 80014fe:	230c      	movs	r3, #12
 8001500:	6003      	str	r3, [r0, #0]
 8001502:	e7d6      	b.n	80014b2 <_free_r+0x26>
 8001504:	6825      	ldr	r5, [r4, #0]
 8001506:	1961      	adds	r1, r4, r5
 8001508:	428b      	cmp	r3, r1
 800150a:	bf04      	itt	eq
 800150c:	6819      	ldreq	r1, [r3, #0]
 800150e:	685b      	ldreq	r3, [r3, #4]
 8001510:	6063      	str	r3, [r4, #4]
 8001512:	bf04      	itt	eq
 8001514:	1949      	addeq	r1, r1, r5
 8001516:	6021      	streq	r1, [r4, #0]
 8001518:	6054      	str	r4, [r2, #4]
 800151a:	e7ca      	b.n	80014b2 <_free_r+0x26>
 800151c:	b003      	add	sp, #12
 800151e:	bd30      	pop	{r4, r5, pc}
 8001520:	2000008c 	.word	0x2000008c

08001524 <_read_r>:
 8001524:	b538      	push	{r3, r4, r5, lr}
 8001526:	4d07      	ldr	r5, [pc, #28]	; (8001544 <_read_r+0x20>)
 8001528:	4604      	mov	r4, r0
 800152a:	4608      	mov	r0, r1
 800152c:	4611      	mov	r1, r2
 800152e:	2200      	movs	r2, #0
 8001530:	602a      	str	r2, [r5, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	f7fe fece 	bl	80002d4 <_read>
 8001538:	1c43      	adds	r3, r0, #1
 800153a:	d102      	bne.n	8001542 <_read_r+0x1e>
 800153c:	682b      	ldr	r3, [r5, #0]
 800153e:	b103      	cbz	r3, 8001542 <_read_r+0x1e>
 8001540:	6023      	str	r3, [r4, #0]
 8001542:	bd38      	pop	{r3, r4, r5, pc}
 8001544:	20000094 	.word	0x20000094

08001548 <_fstat_r>:
 8001548:	b538      	push	{r3, r4, r5, lr}
 800154a:	4d07      	ldr	r5, [pc, #28]	; (8001568 <_fstat_r+0x20>)
 800154c:	2300      	movs	r3, #0
 800154e:	4604      	mov	r4, r0
 8001550:	4608      	mov	r0, r1
 8001552:	4611      	mov	r1, r2
 8001554:	602b      	str	r3, [r5, #0]
 8001556:	f7fe ff02 	bl	800035e <_fstat>
 800155a:	1c43      	adds	r3, r0, #1
 800155c:	d102      	bne.n	8001564 <_fstat_r+0x1c>
 800155e:	682b      	ldr	r3, [r5, #0]
 8001560:	b103      	cbz	r3, 8001564 <_fstat_r+0x1c>
 8001562:	6023      	str	r3, [r4, #0]
 8001564:	bd38      	pop	{r3, r4, r5, pc}
 8001566:	bf00      	nop
 8001568:	20000094 	.word	0x20000094

0800156c <_isatty_r>:
 800156c:	b538      	push	{r3, r4, r5, lr}
 800156e:	4d06      	ldr	r5, [pc, #24]	; (8001588 <_isatty_r+0x1c>)
 8001570:	2300      	movs	r3, #0
 8001572:	4604      	mov	r4, r0
 8001574:	4608      	mov	r0, r1
 8001576:	602b      	str	r3, [r5, #0]
 8001578:	f7fe ff01 	bl	800037e <_isatty>
 800157c:	1c43      	adds	r3, r0, #1
 800157e:	d102      	bne.n	8001586 <_isatty_r+0x1a>
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	b103      	cbz	r3, 8001586 <_isatty_r+0x1a>
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	bd38      	pop	{r3, r4, r5, pc}
 8001588:	20000094 	.word	0x20000094

0800158c <_init>:
 800158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158e:	bf00      	nop
 8001590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001592:	bc08      	pop	{r3}
 8001594:	469e      	mov	lr, r3
 8001596:	4770      	bx	lr

08001598 <_fini>:
 8001598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159a:	bf00      	nop
 800159c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800159e:	bc08      	pop	{r3}
 80015a0:	469e      	mov	lr, r3
 80015a2:	4770      	bx	lr
