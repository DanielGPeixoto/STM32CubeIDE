
8_uart_tx_printf_modular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000030c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000494  08000494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000494  08000494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000498  08000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800049c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007cd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000024d  00000000  00000000  00020801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00020a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000060  00000000  00000000  00020ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d25c  00000000  00000000  00020b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c36  00000000  00000000  0003dd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2424  00000000  00000000  0003e9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e0dee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000114  00000000  00000000  000e0e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800047c 	.word	0x0800047c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800047c 	.word	0x0800047c

080001c8 <main>:

char text[4096] = "Esta e uma mensagem a ser transmitida por UART.\n";
char key = 'A';


int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0


	/*MAKE GENERIC VERSION OF THIS FUNCTION IN ORDER TO RECEIVE ANY USART*/
	uart2_tx_init();
 80001cc:	f000 f80e 	bl	80001ec <uart2_tx_init>
	uart3_tx_init();
 80001d0:	f000 f872 	bl	80002b8 <uart3_tx_init>
	/*Replace USART2 as USARTx, and Pass it as argument to the function*/

	while(1){

		uart_write_function(USART2, key);																//Writes the letter 'Y' through the UART3
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <main+0x1c>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	4619      	mov	r1, r3
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <main+0x20>)
 80001dc:	f000 f8c4 	bl	8000368 <uart_write_function>
 80001e0:	e7f8      	b.n	80001d4 <main+0xc>
 80001e2:	bf00      	nop
 80001e4:	20000000 	.word	0x20000000
 80001e8:	40004400 	.word	0x40004400

080001ec <uart2_tx_init>:

/*MAKE GENERIC VERSION OF THIS FUNCTION IN ORDER TO RECEIVE ANY USART*/

/*Replace USART2 as USARTx, and Pass it as argument to the function*/
void uart2_tx_init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	/***********************Configure UART pin***************************/
	/*	Enable clock access to GPIOA for PA2 as TX line					*/
	RCC->AHB2ENR|= GPIOAEN;
 80001f0:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <uart2_tx_init+0xc0>)
 80001f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f4:	4a2d      	ldr	r2, [pc, #180]	; (80002ac <uart2_tx_init+0xc0>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	64d3      	str	r3, [r2, #76]	; 0x4c
	/*	Set PA2 Mode as alternate function mode							*/
	GPIOA->MODER &=~ (1U<<4);
 80001fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000206:	f023 0310 	bic.w	r3, r3, #16
 800020a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800020c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000216:	f043 0320 	orr.w	r3, r3, #32
 800021a:	6013      	str	r3, [r2, #0]

	/*	Set the alternate function typed to UART						*/
	GPIOA->AFR[0] |=(1U<<8);
 800021c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000220:	6a1b      	ldr	r3, [r3, #32]
 8000222:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800022a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 800022c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000230:	6a1b      	ldr	r3, [r3, #32]
 8000232:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800023a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 800023c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000240:	6a1b      	ldr	r3, [r3, #32]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800024a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 800024c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000250:	6a1b      	ldr	r3, [r3, #32]
 8000252:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800025a:	6213      	str	r3, [r2, #32]

	/*Set PIN Pull-Down */
	GPIOA->PUPDR &=~ (1U<<4);
 800025c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000260:	68db      	ldr	r3, [r3, #12]
 8000262:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000266:	f023 0310 	bic.w	r3, r3, #16
 800026a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<5);
 800026c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000270:	68db      	ldr	r3, [r3, #12]
 8000272:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	60d3      	str	r3, [r2, #12]
	/********************************************************************/

	/********************Configure the UART module***********************/
	/*	Enable clock access to UART2									*/
	RCC->APB1ENR1	|= USART2EN;
 800027c:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <uart2_tx_init+0xc0>)
 800027e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000280:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <uart2_tx_init+0xc0>)
 8000282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000286:	6593      	str	r3, [r2, #88]	; 0x58
	/*	Configure baudrate												*/
	uart_set_baudrate(USART2, APB1_CLK, 115200);
 8000288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800028c:	4908      	ldr	r1, [pc, #32]	; (80002b0 <uart2_tx_init+0xc4>)
 800028e:	4809      	ldr	r0, [pc, #36]	; (80002b4 <uart2_tx_init+0xc8>)
 8000290:	f000 f881 	bl	8000396 <uart_set_baudrate>
	/*	Configure transfer direction									*/
	USART2->CR1 = CR1_TE;												//Important to use '=' instead of '|=' operator, in order to clean everything
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <uart2_tx_init+0xc8>)
 8000296:	2208      	movs	r2, #8
 8000298:	601a      	str	r2, [r3, #0]
																		//and set the othes configs of to it's default values
	/*	Enable UART module												*/
	USART2->CR1	|= CR1_UE;												//Enables the UART module
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <uart2_tx_init+0xc8>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <uart2_tx_init+0xc8>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6013      	str	r3, [r2, #0]
	/********************************************************************/


}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40021000 	.word	0x40021000
 80002b0:	003d0900 	.word	0x003d0900
 80002b4:	40004400 	.word	0x40004400

080002b8 <uart3_tx_init>:

void uart3_tx_init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	/***********************Configure UART pin***************************/
	/*	Enable clock access to GPIOA for PC4 as TX line					*/
	RCC->AHB2ENR|= GPIOCEN;
 80002bc:	4b26      	ldr	r3, [pc, #152]	; (8000358 <uart3_tx_init+0xa0>)
 80002be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c0:	4a25      	ldr	r2, [pc, #148]	; (8000358 <uart3_tx_init+0xa0>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	64d3      	str	r3, [r2, #76]	; 0x4c
	/*	Set PA2 Mode as alternate function mode							*/
	GPIOC->MODER &=~ (1U<<8);											//Sets 8th bit to zero
 80002c8:	4b24      	ldr	r3, [pc, #144]	; (800035c <uart3_tx_init+0xa4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a23      	ldr	r2, [pc, #140]	; (800035c <uart3_tx_init+0xa4>)
 80002ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002d2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1U<<9);											//Sets 9th bit to 1
 80002d4:	4b21      	ldr	r3, [pc, #132]	; (800035c <uart3_tx_init+0xa4>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a20      	ldr	r2, [pc, #128]	; (800035c <uart3_tx_init+0xa4>)
 80002da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002de:	6013      	str	r3, [r2, #0]

	/*	Set the alternate function of PC4 to UART	AF7					*/
	GPIOC->AFR[0] |=(1U<<16);
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <uart3_tx_init+0xa4>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <uart3_tx_init+0xa4>)
 80002e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ea:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |=(1U<<17);
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <uart3_tx_init+0xa4>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	4a1a      	ldr	r2, [pc, #104]	; (800035c <uart3_tx_init+0xa4>)
 80002f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f6:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |=(1U<<18);
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <uart3_tx_init+0xa4>)
 80002fa:	6a1b      	ldr	r3, [r3, #32]
 80002fc:	4a17      	ldr	r2, [pc, #92]	; (800035c <uart3_tx_init+0xa4>)
 80002fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000302:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] &=~(1U<<19);
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <uart3_tx_init+0xa4>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	4a14      	ldr	r2, [pc, #80]	; (800035c <uart3_tx_init+0xa4>)
 800030a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800030e:	6213      	str	r3, [r2, #32]

	/*Set PIN Pull-Down */
	GPIOC->PUPDR &=~ (1U<<8);
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <uart3_tx_init+0xa4>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <uart3_tx_init+0xa4>)
 8000316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800031a:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (1U<<9);
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <uart3_tx_init+0xa4>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4a0e      	ldr	r2, [pc, #56]	; (800035c <uart3_tx_init+0xa4>)
 8000322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000326:	60d3      	str	r3, [r2, #12]
	/********************************************************************/

	/********************Configure the UART module***********************/
	/*	Enable clock access to UART3									*/
	RCC->APB1ENR1	|= USART3EN;
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <uart3_tx_init+0xa0>)
 800032a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <uart3_tx_init+0xa0>)
 800032e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000332:	6593      	str	r3, [r2, #88]	; 0x58
	/*	Configure baudrate												*/
	uart_set_baudrate(USART3, APB1_CLK, 115200);
 8000334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000338:	4909      	ldr	r1, [pc, #36]	; (8000360 <uart3_tx_init+0xa8>)
 800033a:	480a      	ldr	r0, [pc, #40]	; (8000364 <uart3_tx_init+0xac>)
 800033c:	f000 f82b 	bl	8000396 <uart_set_baudrate>
	/*	Configure transfer direction									*/
	USART3->CR1 = CR1_TE;												//Important to use '=' instead of '|=' operator, in order to clean everything
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <uart3_tx_init+0xac>)
 8000342:	2208      	movs	r2, #8
 8000344:	601a      	str	r2, [r3, #0]
																		//and set the othes configs of to it's default values
	/*	Enable UART module												*/
	USART3->CR1	|= CR1_UE;												//Enables the UART module
 8000346:	4b07      	ldr	r3, [pc, #28]	; (8000364 <uart3_tx_init+0xac>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a06      	ldr	r2, [pc, #24]	; (8000364 <uart3_tx_init+0xac>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6013      	str	r3, [r2, #0]
	/********************************************************************/


}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	48000800 	.word	0x48000800
 8000360:	003d0900 	.word	0x003d0900
 8000364:	40004800 	.word	0x40004800

08000368 <uart_write_function>:

void uart_write_function(USART_TypeDef *USARTx,uint8_t ch)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	70fb      	strb	r3, [r7, #3]
	/*Reading a register - Perform a 'and' operation against the register and the bit we want to read*/
	while(!(USARTx->ISR & ISR_TXE))																//Wait for transmit data register to be empty
 8000374:	bf00      	nop
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	69db      	ldr	r3, [r3, #28]
 800037a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0f9      	beq.n	8000376 <uart_write_function+0xe>
	{

	}
	/*TDR - Transmitter Data Register it's equal to the character we want to send*/
	USARTx->TDR = (ch & 0xFF);											// & 0xFF makes sure that 8 bits are transmitted
 8000382:	78fb      	ldrb	r3, [r7, #3]
 8000384:	b29a      	uxth	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	851a      	strh	r2, [r3, #40]	; 0x28
	}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PreiphClk, uint32_t BaudRate)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b084      	sub	sp, #16
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PreiphClk, BaudRate);
 80003a2:	6879      	ldr	r1, [r7, #4]
 80003a4:	68b8      	ldr	r0, [r7, #8]
 80003a6:	f000 f808 	bl	80003ba <compute_uart_div>
 80003aa:	4603      	mov	r3, r0
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	60da      	str	r2, [r3, #12]
	}
 80003b2:	bf00      	nop
 80003b4:	3710      	adds	r7, #16
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PreiphClk, uint32_t BaudRate)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b083      	sub	sp, #12
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	6039      	str	r1, [r7, #0]
	return ((PreiphClk + (BaudRate/2))/BaudRate);
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	085a      	lsrs	r2, r3, #1
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	441a      	add	r2, r3
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d2:	b29b      	uxth	r3, r3
	}
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e0:	480d      	ldr	r0, [pc, #52]	; (8000418 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e8:	480c      	ldr	r0, [pc, #48]	; (800041c <LoopForever+0x6>)
  ldr r1, =_edata
 80003ea:	490d      	ldr	r1, [pc, #52]	; (8000420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ec:	4a0d      	ldr	r2, [pc, #52]	; (8000424 <LoopForever+0xe>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000400:	4c0a      	ldr	r4, [pc, #40]	; (800042c <LoopForever+0x16>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800040e:	f000 f811 	bl	8000434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000412:	f7ff fed9 	bl	80001c8 <main>

08000416 <LoopForever>:

LoopForever:
    b LoopForever
 8000416:	e7fe      	b.n	8000416 <LoopForever>
  ldr   r0, =_estack
 8000418:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800041c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000420:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000424:	0800049c 	.word	0x0800049c
  ldr r2, =_sbss
 8000428:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800042c:	20000020 	.word	0x20000020

08000430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC1_2_IRQHandler>
	...

08000434 <__libc_init_array>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	4d0d      	ldr	r5, [pc, #52]	; (800046c <__libc_init_array+0x38>)
 8000438:	4c0d      	ldr	r4, [pc, #52]	; (8000470 <__libc_init_array+0x3c>)
 800043a:	1b64      	subs	r4, r4, r5
 800043c:	10a4      	asrs	r4, r4, #2
 800043e:	2600      	movs	r6, #0
 8000440:	42a6      	cmp	r6, r4
 8000442:	d109      	bne.n	8000458 <__libc_init_array+0x24>
 8000444:	4d0b      	ldr	r5, [pc, #44]	; (8000474 <__libc_init_array+0x40>)
 8000446:	4c0c      	ldr	r4, [pc, #48]	; (8000478 <__libc_init_array+0x44>)
 8000448:	f000 f818 	bl	800047c <_init>
 800044c:	1b64      	subs	r4, r4, r5
 800044e:	10a4      	asrs	r4, r4, #2
 8000450:	2600      	movs	r6, #0
 8000452:	42a6      	cmp	r6, r4
 8000454:	d105      	bne.n	8000462 <__libc_init_array+0x2e>
 8000456:	bd70      	pop	{r4, r5, r6, pc}
 8000458:	f855 3b04 	ldr.w	r3, [r5], #4
 800045c:	4798      	blx	r3
 800045e:	3601      	adds	r6, #1
 8000460:	e7ee      	b.n	8000440 <__libc_init_array+0xc>
 8000462:	f855 3b04 	ldr.w	r3, [r5], #4
 8000466:	4798      	blx	r3
 8000468:	3601      	adds	r6, #1
 800046a:	e7f2      	b.n	8000452 <__libc_init_array+0x1e>
 800046c:	08000494 	.word	0x08000494
 8000470:	08000494 	.word	0x08000494
 8000474:	08000494 	.word	0x08000494
 8000478:	08000498 	.word	0x08000498

0800047c <_init>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

08000488 <_fini>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr
