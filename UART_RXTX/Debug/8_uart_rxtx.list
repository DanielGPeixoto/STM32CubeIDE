
8_uart_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800045c  08000464  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800045c  0800045c  00010464  2**0
                  CONTENTS
  4 .ARM          00000000  0800045c  0800045c  00010464  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800045c  08000464  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000460  08000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010464  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ae9  00000000  00000000  00010494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000274  00000000  00000000  00010f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  000111f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00011290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d278  00000000  00000000  00011300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c94  00000000  00000000  0002e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a243e  00000000  00000000  0002f20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d164a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000160  00000000  00000000  000d169c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000444 	.word	0x08000444

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000444 	.word	0x08000444

080001c8 <main>:
#define GPIOAEN				(1U<<0)										//shifts 1 to position 0

uint8_t key;


int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	/*Turn LED on and off*/
	RCC->AHB2ENR |= GPIOAEN;
 80001cc:	4b13      	ldr	r3, [pc, #76]	; (800021c <main+0x54>)
 80001ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d0:	4a12      	ldr	r2, [pc, #72]	; (800021c <main+0x54>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER |= (1U<<10);
 80001d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U<<11);
 80001e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001f6:	6013      	str	r3, [r2, #0]
	/************************/
	uart2_rxtx_init();
 80001f8:	f000 f816 	bl	8000228 <uart2_rxtx_init>

	while(1){
		key = uart2_read(USART2);
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <main+0x58>)
 80001fe:	f000 f899 	bl	8000334 <uart2_read>
 8000202:	4603      	mov	r3, r0
 8000204:	461a      	mov	r2, r3
 8000206:	4b07      	ldr	r3, [pc, #28]	; (8000224 <main+0x5c>)
 8000208:	701a      	strb	r2, [r3, #0]

		if(key == 11111111)
		{
			GPIOA->BSRR |= (1U<<5);												//Sets PIN 5 from PORTA
		}else{
			GPIOA->BSRR |= (1U<<21);											//Resets PIN 5 from PORTA
 800020a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000218:	6193      	str	r3, [r2, #24]
		key = uart2_read(USART2);
 800021a:	e7ef      	b.n	80001fc <main+0x34>
 800021c:	40021000 	.word	0x40021000
 8000220:	40004400 	.word	0x40004400
 8000224:	2000001c 	.word	0x2000001c

08000228 <uart2_rxtx_init>:

/*MAKE GENERIC VERSION OF THIS FUNCTION IN ORDER TO RECEIVE ANY USART*/

/*Replace USART2 as USARTx, and Pass it as argument to the function*/
void uart2_rxtx_init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	/***********************Configure UART pin***************************/
	/*	Enable clock access to GPIOA for PA2 and PA3 as TX and RX line	*/
	RCC->AHB2ENR|= GPIOAEN;
 800022c:	4b3e      	ldr	r3, [pc, #248]	; (8000328 <uart2_rxtx_init+0x100>)
 800022e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000230:	4a3d      	ldr	r2, [pc, #244]	; (8000328 <uart2_rxtx_init+0x100>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	64d3      	str	r3, [r2, #76]	; 0x4c
	/*	Set PA2 Mode as alternate function mode							*/
	GPIOA->MODER &=~ (1U<<4);
 8000238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000242:	f023 0310 	bic.w	r3, r3, #16
 8000246:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000248:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000252:	f043 0320 	orr.w	r3, r3, #32
 8000256:	6013      	str	r3, [r2, #0]
	/*	Set PA3 Mode as alternate function mode							*/
	GPIOA->MODER &=~ (1U<<6);
 8000258:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000266:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000276:	6013      	str	r3, [r2, #0]

	/*	Set the alternate function typed to UART						*/
	GPIOA->AFR[0] |=(1U<<8);
 8000278:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800027c:	6a1b      	ldr	r3, [r3, #32]
 800027e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000286:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800028c:	6a1b      	ldr	r3, [r3, #32]
 800028e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000296:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80002a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ac:	6a1b      	ldr	r3, [r3, #32]
 80002ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002b6:	6213      	str	r3, [r2, #32]

	/*	Set the alternate function typed to UART						*/
	GPIOA->AFR[0] |=(1U<<12);
 80002b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002bc:	6a1b      	ldr	r3, [r3, #32]
 80002be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 80002c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002cc:	6a1b      	ldr	r3, [r3, #32]
 80002ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 80002d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002dc:	6a1b      	ldr	r3, [r3, #32]
 80002de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 80002e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ec:	6a1b      	ldr	r3, [r3, #32]
 80002ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002f6:	6213      	str	r3, [r2, #32]
	/********************************************************************/

	/********************Configure the UART module***********************/
	/*	Enable clock access to UART2									*/
	RCC->APB1ENR1	|= USART2EN;
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <uart2_rxtx_init+0x100>)
 80002fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <uart2_rxtx_init+0x100>)
 80002fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000302:	6593      	str	r3, [r2, #88]	; 0x58
	/*	Configure baudrate												*/
	uart_set_baudrate(USART2, APB1_CLK, 115200);
 8000304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000308:	4908      	ldr	r1, [pc, #32]	; (800032c <uart2_rxtx_init+0x104>)
 800030a:	4809      	ldr	r0, [pc, #36]	; (8000330 <uart2_rxtx_init+0x108>)
 800030c:	f000 f827 	bl	800035e <uart_set_baudrate>
	/*	Configure transfer direction									*/
	USART2->CR1 = (CR1_TE | CR1_RE);									//enable TX and RX
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <uart2_rxtx_init+0x108>)
 8000312:	220c      	movs	r2, #12
 8000314:	601a      	str	r2, [r3, #0]
																		//
	/*	Enable UART module												*/
	USART2->CR1	|= CR1_UE;												//Enables the UART module
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <uart2_rxtx_init+0x108>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a05      	ldr	r2, [pc, #20]	; (8000330 <uart2_rxtx_init+0x108>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6013      	str	r3, [r2, #0]
	/********************************************************************/


}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	003d0900 	.word	0x003d0900
 8000330:	40004400 	.word	0x40004400

08000334 <uart2_read>:


}

char uart2_read(USART_TypeDef *USARTx)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	/*Wait for receive data register not empty flag*/
	while(!(USARTx->ISR & ISR_RXNE))																//Wait for transmit data register to be empty
 800033c:	bf00      	nop
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	f003 0320 	and.w	r3, r3, #32
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f9      	beq.n	800033e <uart2_read+0xa>
	{
		//wait
	}
	/*Read content of receive data register*/
	return USARTx->RDR;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800034e:	b29b      	uxth	r3, r3
 8000350:	b2db      	uxtb	r3, r3
	}
 8000352:	4618      	mov	r0, r3
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <uart_set_baudrate>:
	/*TDR - Transmitter Data Register it's equal to the character we want to send*/
	USARTx->TDR = (ch & 0xFF);											// & 0xFF makes sure that 8 bits are transmitted
	}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PreiphClk, uint32_t BaudRate)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	b084      	sub	sp, #16
 8000362:	af00      	add	r7, sp, #0
 8000364:	60f8      	str	r0, [r7, #12]
 8000366:	60b9      	str	r1, [r7, #8]
 8000368:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PreiphClk, BaudRate);
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	68b8      	ldr	r0, [r7, #8]
 800036e:	f000 f808 	bl	8000382 <compute_uart_div>
 8000372:	4603      	mov	r3, r0
 8000374:	461a      	mov	r2, r3
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	60da      	str	r2, [r3, #12]
	}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PreiphClk, uint32_t BaudRate)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	6039      	str	r1, [r7, #0]
	return ((PreiphClk + (BaudRate/2))/BaudRate);
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	085a      	lsrs	r2, r3, #1
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	441a      	add	r2, r3
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	fbb2 f3f3 	udiv	r3, r2, r3
 800039a:	b29b      	uxth	r3, r3
	}
 800039c:	4618      	mov	r0, r3
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a8:	480d      	ldr	r0, [pc, #52]	; (80003e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b2:	490d      	ldr	r1, [pc, #52]	; (80003e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b4:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <LoopForever+0xe>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c8:	4c0a      	ldr	r4, [pc, #40]	; (80003f4 <LoopForever+0x16>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d6:	f000 f811 	bl	80003fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003da:	f7ff fef5 	bl	80001c8 <main>

080003de <LoopForever>:

LoopForever:
    b LoopForever
 80003de:	e7fe      	b.n	80003de <LoopForever>
  ldr   r0, =_estack
 80003e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ec:	08000464 	.word	0x08000464
  ldr r2, =_sbss
 80003f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f4:	20000020 	.word	0x20000020

080003f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC1_2_IRQHandler>
	...

080003fc <__libc_init_array>:
 80003fc:	b570      	push	{r4, r5, r6, lr}
 80003fe:	4d0d      	ldr	r5, [pc, #52]	; (8000434 <__libc_init_array+0x38>)
 8000400:	4c0d      	ldr	r4, [pc, #52]	; (8000438 <__libc_init_array+0x3c>)
 8000402:	1b64      	subs	r4, r4, r5
 8000404:	10a4      	asrs	r4, r4, #2
 8000406:	2600      	movs	r6, #0
 8000408:	42a6      	cmp	r6, r4
 800040a:	d109      	bne.n	8000420 <__libc_init_array+0x24>
 800040c:	4d0b      	ldr	r5, [pc, #44]	; (800043c <__libc_init_array+0x40>)
 800040e:	4c0c      	ldr	r4, [pc, #48]	; (8000440 <__libc_init_array+0x44>)
 8000410:	f000 f818 	bl	8000444 <_init>
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	10a4      	asrs	r4, r4, #2
 8000418:	2600      	movs	r6, #0
 800041a:	42a6      	cmp	r6, r4
 800041c:	d105      	bne.n	800042a <__libc_init_array+0x2e>
 800041e:	bd70      	pop	{r4, r5, r6, pc}
 8000420:	f855 3b04 	ldr.w	r3, [r5], #4
 8000424:	4798      	blx	r3
 8000426:	3601      	adds	r6, #1
 8000428:	e7ee      	b.n	8000408 <__libc_init_array+0xc>
 800042a:	f855 3b04 	ldr.w	r3, [r5], #4
 800042e:	4798      	blx	r3
 8000430:	3601      	adds	r6, #1
 8000432:	e7f2      	b.n	800041a <__libc_init_array+0x1e>
 8000434:	0800045c 	.word	0x0800045c
 8000438:	0800045c 	.word	0x0800045c
 800043c:	0800045c 	.word	0x0800045c
 8000440:	08000460 	.word	0x08000460

08000444 <_init>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr

08000450 <_fini>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr
